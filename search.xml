<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ACID</title>
    <url>/acid/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>資料庫系統在寫入或新增資料時,為了確保交易正確可靠性,所以具備</p>
<ul>
<li>原子性（atomicity，稱不可分割性）</li>
<li>一致性（consistency）</li>
<li>隔離性（isolation，稱獨立性）</li>
<li>持久性（durability）</li>
</ul>
<p>這就是我們說的ACID.</p>
<p>下面我會跟大家簡述ACID.</p>
<h2 id="Atomicity-原子性"><a href="#Atomicity-原子性" class="headerlink" title="Atomicity(原子性)"></a>Atomicity(原子性)</h2><p>所有Logical Unit都必須符合原子性</p>
<blockquote>
<p>整個流程要不是全部成功，不然就整段失敗，不會有部分完成</p>
</blockquote>
<p>sample data.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">IF (<span class="keyword">SELECT</span> OBJECT_ID(<span class="string">'dbo.ProductTest'</span>)) <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>   </span><br><span class="line"> <span class="keyword">DROP</span> <span class="keyword">TABLE</span> dbo.ProductTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> dbo.ProductTest ( ProductID <span class="built_in">INT</span> <span class="keyword">CONSTRAINT</span> ValueEqualsOne <span class="keyword">CHECK</span> (ProductID = <span class="number">1</span>)); </span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Product (ProductID <span class="built_in">INT</span>)</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dbo.Product </span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">2</span></span><br></pre></td></tr></table></figure></div>
<p>下面我們在sql-server有包Transation,因為<code>ProductTest</code>資料表有一個CONSTRAINT <code>ProductID</code>必須等於1,但目前<code>Product</code>表有1筆不符合此資料表有一個<code>CONSTRAINT</code>資料(ProductId=2)</p>
<p>如果按照(原子性)說法下面語法有包Tran應該會被RollBack,但事實上….</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span> TRAN</span><br><span class="line"></span><br><span class="line">    <span class="comment">--第一句語法</span></span><br><span class="line">	<span class="keyword">INSERT</span>  <span class="keyword">INTO</span> dbo.ProductTest        </span><br><span class="line">	<span class="keyword">SELECT</span>  p.ProductID        </span><br><span class="line">	<span class="keyword">FROM</span>    dbo.Product <span class="keyword">AS</span> p</span><br><span class="line"></span><br><span class="line">    <span class="comment">--第二句語法</span></span><br><span class="line">	<span class="keyword">INSERT</span>  <span class="keyword">INTO</span> dbo.ProductTest <span class="keyword">VALUES</span> (<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">COMMIT</span></span><br></pre></td></tr></table></figure></div>
<p>我們在執行上面語法時會有一個<code>Error</code>，但第二句語法卻會成功新增資料.</p>
<p>此時各位會覺得很奇怪,這個語法並不符合原子性.</p>
<blockquote>
<p>雖然Transation範圍是有包含<code>Logical Unit</code>,但Sql-Server <code>XACT_ABORT</code>預設是關閉.sta</p>
</blockquote>
<ol>
<li>開啟<code>XACT_ABORT</code>（預設<code>XACT_ABORT</code>是<code>Off</code>）<br> <code>XACT_ABORT</code>的開關代表,交易過程中有錯誤時是否要完整取消整段交易</li>
<li>使用<code>Try...Catch</code>判斷<code>RollBack</code>時間點</li>
</ol>
<blockquote>
<p><code>Atomicity</code>(原子性)可以確保我們在交易過程中失敗,不會有部分成功,部分失敗,造成系統不穩定.</p>
</blockquote>
<h2 id="Consistency-一致性"><a href="#Consistency-一致性" class="headerlink" title="Consistency(一致性)　"></a>Consistency(一致性)　</h2><p>在Logical unit完成時不會破壞資料表制訂constraint,關聯性規則.</p>
<p>交易過程中並不會有任何一筆資料違反,我們制定的Check constraint的資料，PK及FK的關係也同樣不會被破壞，確保不會違反Business規則。</p>
<blockquote>
<p>sql-server因為要檢查constraint,所以會導致些許Blocking.</p>
</blockquote>
<h2 id="Isolation"><a href="#Isolation" class="headerlink" title="Isolation"></a>Isolation</h2><p>在現實生活中,會同步進行多個Translation,所以Isolation是為了確保各個交易是互相隔離不會同時互相影響(不然就有可能破壞掉他們的一致性了).</p>
<ul>
<li>Lock:在某段語法被執行時,會放鎖在影響範圍,不同鎖的類型會有互斥或者可共存的情況,資料庫透過鎖確保流程.</li>
<li>Block:假如有兩段語法,語法A跟語法B影響資料範圍是一樣的,假如語法A先在此區域上<strong>鎖</strong>且語法B嘗試要在同一個區域上<strong>鎖</strong>,發現兩個鎖互斥,這時語法B就會等待語法A執行完後再執行(此狀態稱之為Block).</li>
<li>DeadLock:交易結束前會對於影響資料範圍上鎖,如果另一個語法對於某區段資料異動就會產生Block,但如果兩個交易剛好影響範圍是互相顛倒順序,這個Block會無法被釋放….此時就會產生DeadLock(每一段時間會有一個DeadLock Monitor決定誰是被犧牲者，把她資源釋放).</li>
</ul>
<p>交易隔離有分四種</p>
<h2 id="Isolation-Level"><a href="#Isolation-Level" class="headerlink" title="Isolation Level"></a>Isolation Level</h2><ul>
<li>Read UnCommited: 大家常見的<strong>NOLOCK</strong> hint(髒讀取)，但並不是真的沒有Lock(會放Sch-S Lock),主要是避免在髒讀取時有人對Schema異動或修改<ul>
<li>ex: (NOLOCK)hint</li>
</ul>
</li>
<li>Read Commited: SELECT查詢已經Commit資料，在Transaction中SELECT完畢當下就會釋放掉查詢Shared Lock，Shared Lock不會保留到交易結束.</li>
<li>Repeatable Read: Repeatable Read跟Read Commited最大差異是，Repeatable Read會把<strong>Shared Lock</strong>保留到交易結束</li>
<li>Serializable Read: <strong>Shared Lock</strong>查詢條件<strong>範圍</strong>都鎖住並保留到最後(Transaction結束)<ul>
<li>ex: (Hold Lock) hint</li>
</ul>
</li>
</ul>
<h2 id="Durability"><a href="#Durability" class="headerlink" title="Durability"></a>Durability</h2><p>當你完成<code>Transaction</code>後,不管發生什麼事情資料都會完整保留在DB中，一般來說<code>Transaction</code>完成前後都會寫<code>Transaction log</code></p>
<p>假如DB遇到非預期錯誤(ex:停電),在DB Server重啟後，DB會依照之前紀錄嘗試Recovery.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> IX_PeriodDate_T99 <span class="keyword">ON</span> dbo.T99(</span><br><span class="line">	PeriodDate</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> dbo.T99 <span class="keyword">ADD</span> PeriodDate <span class="keyword">AS</span> <span class="keyword">DATEADD</span>(<span class="keyword">MINUTE</span>,<span class="keyword">DATEPART</span>(<span class="keyword">MINUTE</span>,CreateDate) %<span class="number">5</span> * <span class="number">-1</span>,</span><br><span class="line">	DATETIMEFROMPARTS(</span><br><span class="line">	<span class="keyword">DATEPART</span>(<span class="keyword">YEAR</span>,CreateDate),</span><br><span class="line">	<span class="keyword">DATEPART</span>(<span class="keyword">MONTH</span>,CreateDate),</span><br><span class="line">	<span class="keyword">DATEPART</span>(<span class="keyword">DAY</span>,CreateDate),</span><br><span class="line">	<span class="keyword">DATEPART</span>(<span class="keyword">HOUR</span>,CreateDate),</span><br><span class="line">	<span class="keyword">DATEPART</span>(<span class="keyword">MINUTE</span>,CreateDate),<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> p.*</span><br><span class="line"><span class="keyword">FROM</span> dbo.T99 t </span><br><span class="line"><span class="keyword">JOIN</span> [dbo].[ReportPeriod] p <span class="keyword">ON</span> p.StartDate = t.PeriodDate</span><br><span class="line"><span class="keyword">JOIN</span> @<span class="keyword">Transaction</span> t1 <span class="keyword">ON</span> t.TransactionId = t1.TransactionId <span class="keyword">AND</span>  p.ProductId = t1.ProductId</span><br></pre></td></tr></table></figure></div>
<p><strong>此文作者</strong>：Daniel Shih(石頭)<br><strong>此文地址</strong>： <a href="https://isdaniel.github.io/acid/">https://isdaniel.github.io/acid/</a> <br><strong>版權聲明</strong>：本博客所有文章除特別聲明外，均採用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC90dy8=" title="https://creativecommons.org/licenses/by-nc-sa/3.0/tw/">CC BY-NC-SA 3.0 TW<i class="fa fa-external-link"></i></span> 許可協議。轉載請註明出處！</p>
]]></content>
      <categories>
        <category>C#</category>
        <category>IOC</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>IOC</tag>
        <tag>Autofac</tag>
        <tag>AOP</tag>
      </tags>
  </entry>
  <entry>
    <title>AOP Lock Architecture</title>
    <url>/aop-lock-mechanism/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h2><p>在系統中多少會遇到某些交易間需要互斥(不然容易造成<code>DeadLock</code>).</p>
<p>在我們當前系統中有許多動作間需要互斥,不然會有DeadLock問題</p>
<p>藉由已經分析DeadLock Report後,我開始構思如何讓建立Lock可以變得更容易且好理解.</p>
<p>所以就建構出此Lock架構.</p>
<h2 id="如何在此框架使用Lock機制"><a href="#如何在此框架使用Lock機制" class="headerlink" title="如何在此框架使用Lock機制"></a>如何在此框架使用Lock機制</h2><p>我們只需要做幾個步驟:</p>
<ol>
<li>在使用Lock類別上掛<code>LockerInterceptor</code>攔截器標籤.  </li>
<li>使用Lock方法上使用<code>LockAttribute</code>標籤<code>[Lock(LockKey = &quot;Your lock Key&quot;)]</code>(<code>Key</code>屬性是必填的)</li>
<li>設定Lock屬性.</li>
</ol>
<blockquote>
<p>目前寫法是針對單一Server Mutiple Thread來建立互斥Lock. 假如有遇到多台Servers需要建立互斥模式可以,參考Redis的<code>Redlock.Net</code>.</p>
</blockquote>
<p>使用方法如下,這樣在多執行緒系統中<code>MethodA1</code>跟<code>MethodB_A</code>就不會有同時執行問題,這樣就可以造成這兩個動作互斥.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">Intercept(typeof(LockerInterceptor))</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">LockerContext</span> : <span class="title">ILockerContext</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Lock(Key = <span class="meta-string">"A"</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">MethodA1</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Thread.Sleep(<span class="number">5</span>);</span><br><span class="line">        Console.WriteLine(<span class="string">$"<span class="subst">&#123;DateTime.Now:HH:mm:ss fff&#125;</span> MethodA1 Done"</span>);</span><br><span class="line">        Thread.Sleep(<span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Lock(Key = <span class="meta-string">"A"</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">MethodB_A</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Thread.Sleep(<span class="number">5</span>);</span><br><span class="line">        Console.WriteLine(<span class="string">$"<span class="subst">&#123;DateTime.Now:HH:mm:ss fff&#125;</span> MethodB_A Done"</span>);</span><br><span class="line">        Thread.Sleep(<span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="架構解說"><a href="#架構解說" class="headerlink" title="架構解說"></a>架構解說</h2><p>我是使用<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvZG90bmV0L2FwaS9zeXN0ZW0udGhyZWFkaW5nLnJlYWRlcndyaXRlcmxvY2tzbGltP3ZpZXc9bmV0Y29yZS0zLjE=" title="https://docs.microsoft.com/en-us/dotnet/api/system.threading.readerwriterlockslim?view=netcore-3.1">ReaderWriterLockSlim<i class="fa fa-external-link"></i></span></p>
<blockquote>
<p>因為支援ReadLock不互斥,WriteLock互斥邏輯</p>
</blockquote>
<p><img src="https://i.imgur.com/kESEvl4.png" alt></p>
<p>我是如何讓使用者輸入<code>Key</code>來建立不同lock呢?</p>
<blockquote>
<p>我是使用<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvZG90bmV0L2FwaS9zeXN0ZW0uY29sbGVjdGlvbnMuY29uY3VycmVudC5jb25jdXJyZW50ZGljdGlvbmFyeS0yP3ZpZXc9bmV0Y29yZS0zLjE=" title="https://docs.microsoft.com/en-us/dotnet/api/system.collections.concurrent.concurrentdictionary-2?view=netcore-3.1">ConcurrentDictionary<i class="fa fa-external-link"></i></span>來處理此問題,每個<code>Key</code>都有不同<code>Lock</code>物件</p>
</blockquote>
<h3 id="LockAttribute"><a href="#LockAttribute" class="headerlink" title="LockAttribute"></a>LockAttribute</h3><p><code>LockAttribute</code>有幾個屬性.</p>
<ul>
<li><code>Key</code>:鎖名稱</li>
<li><code>Mode</code>:鎖的模式<ol>
<li><code>LockMode.XLock</code>:獨占鎖會排斥其他資源請求此鎖,須等待資源釋放.</li>
<li><code>LockMode.Shared</code>:Shared lock之間不互斥.</li>
</ol>
</li>
<li><code>Order</code>:因為支援多個<code>LockAttribute</code>,此屬性決定執行此方法前要求鎖順序</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">AttributeUsage(AttributeTargets.Method, AllowMultiple = true)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">LockAttribute</span> : <span class="title">Attribute</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Key &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> LockMode Mode &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = LockMode.XLock;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> Order &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="LockerInterceptor"><a href="#LockerInterceptor" class="headerlink" title="LockerInterceptor"></a>LockerInterceptor</h3><p>我們直接來<code>IInterceptor</code>物件最核心邏輯方法<code>Intercept(IInvocation invocation)</code>.</p>
<p>利用<code>GetCustomAttributes</code>取得方法上所有<code>LockAttribute</code>並在方法執行前要求拿到,所需要<code>Lock</code>資源才可以執行方法,最後在<code>finally</code>時釋放lock資源</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Intercept</span>(<span class="params">IInvocation invocation</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> methodName = invocation.Method.Name;</span><br><span class="line">    <span class="keyword">var</span> lockAttributes = invocation.Method.GetCustomAttributes(<span class="keyword">typeof</span>(LockAttribute), <span class="literal">true</span>) <span class="keyword">as</span> LockAttribute[];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (IsMarkLockLockAttribute(lockAttributes))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> lockProviders = GetLockProviders(lockAttributes);</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> lockProvider <span class="keyword">in</span> lockProviders)</span><br><span class="line">            &#123;</span><br><span class="line">                lockProvider.AddLock();</span><br><span class="line">            &#125;</span><br><span class="line">            invocation.Proceed();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception e)</span><br><span class="line">        &#123;</span><br><span class="line">            _log.Exception(<span class="string">"Something wrong!"</span>, e);</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> lockProvider <span class="keyword">in</span> lockProviders)</span><br><span class="line">            &#123;</span><br><span class="line">                lockProvider.ReleaseLock();</span><br><span class="line">            &#125;</span><br><span class="line">            _log.Info(<span class="string">$"<span class="subst">&#123;DateTime.Now:HH:mm:ss fff&#125;</span> <span class="subst">&#123;methodName&#125;</span> Release Lock"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        invocation.Proceed();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="SampleCode"><a href="#SampleCode" class="headerlink" title="SampleCode"></a>SampleCode</h2><p>我利用Nunit寫一個簡單程式Print在console讓我們方便觀看結果.</p>
<ul>
<li><code>MethodA</code>:Shared lock mode on key A</li>
<li><code>MethodA1</code>:X lock mode on key A</li>
<li><code>MethodB_A</code>:X lock mode on key A and B</li>
<li><code>MethodB</code>:X lock mode on key B</li>
</ul>
<p>理論上<code>MethodB</code>只會對於<code>MethodB_A</code>互斥,<code>MethodB</code>並不會跟<code>MethodA</code>,<code>MethodA1</code>有互斥反應.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">Intercept(typeof(LockerInterceptor))</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">LockerContext</span> : <span class="title">ILockerContext</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Lock(Key = <span class="meta-string">"A"</span>, Mode = LockMode.SharedLock)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">MethodA</span> (<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Thread.Sleep(<span class="number">100</span>);</span><br><span class="line">        Console.WriteLine(<span class="string">$"<span class="subst">&#123;DateTime.Now:HH:mm:ss fff&#125;</span> MethodA Done"</span>);</span><br><span class="line">        Thread.Sleep(<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Lock(Key = <span class="meta-string">"A"</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">MethodA1</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Thread.Sleep(<span class="number">100</span>);</span><br><span class="line">        Console.WriteLine(<span class="string">$"<span class="subst">&#123;DateTime.Now:HH:mm:ss fff&#125;</span> MethodA1 Done"</span>);</span><br><span class="line">        Thread.Sleep(<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Lock(Key = <span class="meta-string">"A"</span>)</span>]</span><br><span class="line">    [<span class="meta">Lock(Key = <span class="meta-string">"B"</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">MethodB_A</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Thread.Sleep(<span class="number">100</span>);</span><br><span class="line">        Console.WriteLine(<span class="string">$"<span class="subst">&#123;DateTime.Now:HH:mm:ss fff&#125;</span> MethodB_A Done"</span>);</span><br><span class="line">        Thread.Sleep(<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Lock(Key = <span class="meta-string">"B"</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span>  <span class="keyword">void</span> <span class="title">MethodB</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Thread.Sleep(<span class="number">100</span>);</span><br><span class="line">        Console.WriteLine(<span class="string">$"<span class="subst">&#123;DateTime.Now:HH:mm:ss fff&#125;</span> MethodB Done"</span>);</span><br><span class="line">        Thread.Sleep(<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ILockerContext</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">MethodA</span>(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">MethodA1</span>(<span class="params"></span>)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">MethodB_A</span>(<span class="params"></span>)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">MethodB</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AutofacConfig</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> IContainer Container &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Register</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        ContainerBuilder builder = <span class="keyword">new</span> ContainerBuilder();</span><br><span class="line">        builder.RegisterType&lt;LockerInterceptor&gt;().AsSelf();</span><br><span class="line">        builder.RegisterType&lt;LockerContext&gt;().As&lt;ILockerContext&gt;().EnableClassInterceptors();</span><br><span class="line">        builder.RegisterType&lt;ConsoleProvider&gt;().As&lt;ISysLog&gt;().SingleInstance();</span><br><span class="line">        Container = builder.Build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[<span class="meta">TestFixture</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">LockerTest</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//You can use the following additional attributes as you write your tests:</span></span><br><span class="line">    [<span class="meta">OneTimeSetUp</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OneTimeSetUp</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        AutofacConfig.Register();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Test</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">LockGroupTest</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123; </span><br><span class="line">        <span class="keyword">var</span> lockerContext= AutofacConfig.Container.Resolve&lt;ILockerContext&gt;();</span><br><span class="line">        </span><br><span class="line">        List&lt;Task&gt; taskList =<span class="keyword">new</span> List&lt;Task&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            taskList.Add(Task.Factory.StartNew(() =&gt; &#123; lockerContext.MethodA(); &#125;));</span><br><span class="line">            taskList.Add(Task.Factory.StartNew(() =&gt; &#123; lockerContext.MethodA1(); &#125;));</span><br><span class="line">            taskList.Add(Task.Factory.StartNew(() =&gt; &#123; lockerContext.MethodB_A(); &#125;));                </span><br><span class="line">            taskList.Add(Task.Factory.StartNew(() =&gt; &#123; lockerContext.MethodB(); &#125;));</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Task.WaitAll(taskList.ToArray());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><strong>Result</strong></p>
<p>我們發現<code>MethodB_A</code>這個方法會對於,所有key是<code>A</code>,<code>B</code>方法互斥,<code>MethodA</code>則不會對於<code>MethodA</code>,<code>MethodB</code>互斥.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">14:26:59 815 MethodA1 Done</span><br><span class="line">14:26:59 816 MethodB Done</span><br><span class="line">14:26:59 919 MethodA1 Release Lock</span><br><span class="line">14:26:59 920 MethodB Release Lock</span><br><span class="line">14:27:00 020 MethodB Done</span><br><span class="line">14:27:00 120 MethodB Release Lock</span><br><span class="line">14:27:00 220 MethodB_A Done</span><br><span class="line">14:27:00 320 MethodB_A Release Lock</span><br><span class="line">14:27:00 420 MethodA1 Done</span><br><span class="line">14:27:00 520 MethodA1 Release Lock</span><br><span class="line">14:27:00 620 MethodB_A Done</span><br><span class="line">14:27:00 720 MethodB_A Release Lock</span><br><span class="line">14:27:00 820 MethodB Done</span><br><span class="line">14:27:00 820 MethodA1 Done</span><br><span class="line">14:27:00 920 MethodB Release Lock</span><br><span class="line">14:27:00 920 MethodA1 Release Lock</span><br><span class="line">14:27:01 020 MethodB_A Done</span><br><span class="line">14:27:01 120 MethodB_A Release Lock</span><br><span class="line">14:27:01 220 MethodB_A Done</span><br><span class="line">14:27:01 320 MethodB_A Release Lock</span><br><span class="line">14:27:01 420 MethodB Done</span><br><span class="line">14:27:01 420 MethodA1 Done</span><br><span class="line">14:27:01 520 MethodB Release Lock</span><br><span class="line">14:27:01 520 MethodA1 Release Lock</span><br><span class="line">14:27:01 620 MethodA Done</span><br><span class="line">14:27:01 620 MethodA Done</span><br><span class="line">14:27:01 620 MethodA Done</span><br><span class="line">14:27:01 620 MethodA Done</span><br><span class="line">14:27:01 620 MethodA Done</span><br><span class="line">14:27:01 720 MethodA Release Lock</span><br><span class="line">14:27:01 720 MethodA Release Lock</span><br><span class="line">14:27:01 720 MethodA Release Lock</span><br><span class="line">14:27:01 720 MethodA Release Lock</span><br><span class="line">14:27:01 720 MethodA Release Lock</span><br><span class="line">14:27:01 820 MethodB Done</span><br><span class="line">14:27:01 920 MethodB Release Lock</span><br><span class="line">14:27:02 020 MethodB Done</span><br><span class="line">14:27:02 120 MethodB Release Lock</span><br><span class="line">14:27:02 220 MethodB_A Done</span><br><span class="line">14:27:02 320 MethodB_A Release Lock</span><br><span class="line">14:27:02 420 MethodA1 Done</span><br><span class="line">14:27:02 520 MethodA1 Release Lock</span><br><span class="line">14:27:02 620 MethodB_A Done</span><br><span class="line">14:27:02 720 MethodB_A Release Lock</span><br><span class="line">14:27:02 820 MethodB_A Done</span><br><span class="line">14:27:02 920 MethodB_A Release Lock</span><br><span class="line">14:27:03 020 MethodA1 Done</span><br><span class="line">14:27:03 020 MethodB Done</span><br><span class="line">14:27:03 120 MethodA1 Release Lock</span><br><span class="line">14:27:03 120 MethodB Release Lock</span><br><span class="line">14:27:03 220 MethodA1 Done</span><br><span class="line">14:27:03 220 MethodB Done</span><br><span class="line">14:27:03 320 MethodA1 Release Lock</span><br><span class="line">14:27:03 320 MethodB Release Lock</span><br><span class="line">14:27:03 420 MethodB_A Done</span><br><span class="line">14:27:03 520 MethodB_A Release Lock</span><br><span class="line">14:27:03 620 MethodA1 Done</span><br><span class="line">14:27:03 720 MethodA1 Release Lock</span><br><span class="line">14:27:03 820 MethodB_A Done</span><br><span class="line">14:27:03 920 MethodB_A Release Lock</span><br><span class="line">14:27:04 020 MethodA1 Done</span><br><span class="line">14:27:04 020 MethodB Done</span><br><span class="line">14:27:04 120 MethodA1 Release Lock</span><br><span class="line">14:27:04 120 MethodB Release Lock</span><br><span class="line">14:27:04 220 MethodA Done</span><br><span class="line">14:27:04 220 MethodA Done</span><br><span class="line">14:27:04 220 MethodA Done</span><br><span class="line">14:27:04 220 MethodA Done</span><br><span class="line">14:27:04 320 MethodA Release Lock</span><br><span class="line">14:27:04 320 MethodA Release Lock</span><br><span class="line">14:27:04 320 MethodA Release Lock</span><br><span class="line">14:27:04 320 MethodA Release Lock</span><br><span class="line">14:27:04 420 MethodB Done</span><br><span class="line">14:27:04 520 MethodB Release Lock</span><br><span class="line">14:27:04 620 MethodB_A Done</span><br><span class="line">14:27:04 720 MethodB_A Release Lock</span><br><span class="line">14:27:04 820 MethodA1 Done</span><br><span class="line">14:27:04 920 MethodA1 Release Lock</span><br><span class="line">14:27:05 020 MethodA Done</span><br><span class="line">14:27:05 120 MethodA Release Lock</span><br></pre></td></tr></table></figure></div>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>本篇主要想要介紹使用Lock機制.</p>
<p>利用<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvZG90bmV0L2FwaS9zeXN0ZW0udGhyZWFkaW5nLnJlYWRlcndyaXRlcmxvY2tzbGltP3ZpZXc9bmV0Y29yZS0zLjE=" title="https://docs.microsoft.com/en-us/dotnet/api/system.threading.readerwriterlockslim?view=netcore-3.1">ReaderWriterLockSlim<i class="fa fa-external-link"></i></span>就可以建立如DB lock,實在非常方便.</p>
<p>假如想要細部了解<a href="https://isdaniel.github.io/Autofac-AOP/">Autofac + Interceptors(AOP) 動態代理</a>可以參考我之前寫文章,這裡我就不多敘述了.</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2lzZGFuaWVsL0V4dGVuaW9uVG9vbC90cmVlL21hc3Rlci9zcmMvRXh0ZW5zaW9uVG9vbC9UaGlyZFBhcnR5RXh0ZW5zaW9uL0xvY2tTZXJ2aWNl" title="https://github.com/isdaniel/ExtenionTool/tree/master/src/ExtensionTool/ThirdPartyExtension/LockService">SourceCode LockService<i class="fa fa-external-link"></i></span></p>
<p><strong>此文作者</strong>：Daniel Shih(石頭)<br><strong>此文地址</strong>： <a href="https://isdaniel.github.io/aop-lock-mechanism/">https://isdaniel.github.io/aop-lock-mechanism/</a> <br><strong>版權聲明</strong>：本博客所有文章除特別聲明外，均採用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC90dy8=" title="https://creativecommons.org/licenses/by-nc-sa/3.0/tw/">CC BY-NC-SA 3.0 TW<i class="fa fa-external-link"></i></span> 許可協議。轉載請註明出處！</p>
]]></content>
      <categories>
        <category>C#</category>
        <category>Lock</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>IOC</tag>
        <tag>Autofac</tag>
        <tag>AOP</tag>
        <tag>Lock</tag>
      </tags>
  </entry>
  <entry>
    <title>Autofac + Interceptors(AOP) 動態代理</title>
    <url>/autofac-aop/</url>
    <content><![CDATA[<p>Autofac 是個IOC容器  不懂IOC 參考 我之前寫<br>的<a href="/ioc-di/" title="IOC(控制反轉)，DI(依賴注入) 深入淺出~~">IOC(控制反轉)，DI(依賴注入) 深入淺出~~</a></p>
<p>小弟之前有一個開源框架 裡面簡單介紹 AOP核心概念和如何實作!</p>
<p>Autofac 有寫一個 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2F1dG9mYWMvQXV0b2ZhYy5FeHRyYXMuRHluYW1pY1Byb3h5" title="https://github.com/autofac/Autofac.Extras.DynamicProxy">Autofac.Extras.DynamicProxy<i class="fa fa-external-link"></i></span> 把AOP和IOC容器融合的框架</p>
<p>在Autofac使用AOP 需要實現下面幾個步驟</p>
<p>本次範例我們從資料庫中撈取時間資料出來，並使用<code>Thread.Sleep(5000)</code>作出延遲，判斷時間是否前後一致。</p>
<h2 id="第一步（定義攔截器）："><a href="#第一步（定義攔截器）：" class="headerlink" title="第一步（定義攔截器）："></a>第一步（定義攔截器）：</h2><p>我們撰寫一個快取的攔截器繼承<code>IInterceptor</code> 介面，並實現<code>Intercep</code>方法</p>
<p>其中 <code>IInvocation</code>參數有許多有用的資料</p>
<ul>
<li>Arguments：傳入方法中的參數</li>
<li>InvocationTarget ：被代理物件</li>
<li>MethodInvocationTarget：被代理物件的呼叫方法資訊</li>
<li>Proxy：代理物件</li>
<li>Method：代理的呼叫方法資訊</li>
<li>ReturnValue：呼叫方法的回傳值</li>
</ul>
<p>這幾個欄位是我們比較常用的資訊</p>
<pre><code>public class TimeInterceptor : IInterceptor
{
    private ITimeService _timeService;
    public TimeInterceptor(ITimeService s)
    {

        _timeService = s;
    }

    public void Intercept(IInvocation invocation)
    {
        var time = CallContext.GetData(&quot;time&quot;)?.ToString();
        if (time == null)
        {
            //如果沒有快取 執行呼叫Service
            invocation.Proceed();
            CallContext.SetData(&quot;time&quot;, invocation.ReturnValue);
        }
        else
        {
            //如果有快取直接取值
            invocation.ReturnValue = time;
        }
    }
}
</code></pre><p>他使用到 <code>TimeService</code> 模擬從資料庫中撈取資料出來</p>
<pre><code>public interface ITimeService
{
    string GetTime();
}

public class TimeService : ITimeService
{
    public string GetTime()
    {
        return DateTime.Now.ToString(&quot;MM/dd/yyyy hh:mm:ss&quot;);
    }
}
</code></pre><h2 id="第二步（標記攔截器）："><a href="#第二步（標記攔截器）：" class="headerlink" title="第二步（標記攔截器）："></a>第二步（標記攔截器）：</h2><p>使用<code>Intercept</code>標籤並帶入要攔截類別型態．</p>
<pre><code>[Intercept(typeof(TimeInterceptor))]
public class Person : IPerson
{
    public string SaySomething()
    {
        return DateTime.Now.ToLongTimeString();
    }
}

public interface IPerson
{
    string SaySomething();
}
</code></pre><h2 id="第三步（註冊攔截器到容器中）："><a href="#第三步（註冊攔截器到容器中）：" class="headerlink" title="第三步（註冊攔截器到容器中）："></a>第三步（註冊攔截器到容器中）：</h2><p>這邊有兩個小細節</p>
<ol>
<li>如果是註冊介面使用<code>EnableInterfaceInterceptors</code>，註冊一般類別使用<code>EnableClassInterceptors</code></li>
<li>註冊攔截器入容器</li>
</ol>
<p>因為這個範例使用<code></code>所以我們要呼叫<code>EnableInterfaceInterceptors</code></p>
<pre><code>var builder = new ContainerBuilder();

builder.RegisterType&lt;TimeInterceptor&gt;(); //註冊攔截器

builder.RegisterType&lt;Person&gt;()
        .As&lt;IPerson&gt;()
        .EnableInterfaceInterceptors();

//註冊時間Service
builder.RegisterType&lt;TimeService&gt;().As&lt;ITimeService&gt;();

return builder.Build();
</code></pre><p> <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2lzZGFuaWVsL0lPQ19TYW1wbGUvdHJlZS9tYXN0ZXIvc3JjL0F1dG9mYWNXaWh0QU9Q" title="https://github.com/isdaniel/IOC_Sample/tree/master/src/AutofacWihtAOP">原始碼連結<i class="fa fa-external-link"></i></span></p>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p><span style="color:#FFD700;">Autofac + DynamicProxy </span>有一個很大優勢，是可以把要注入的抽象動作一起注入攔截器中</p>
<p>例如本次範例我們將<code>ITimeService</code>使用建構子注入法，注入至<code>TimeInterceptor</code>攔截器中</p>
<p>讓系統和寫法擁有更多更多的彈性</p>
<p><strong>此文作者</strong>：Daniel Shih(石頭)<br><strong>此文地址</strong>： <a href="https://isdaniel.github.io/autofac-aop/">https://isdaniel.github.io/autofac-aop/</a> <br><strong>版權聲明</strong>：本博客所有文章除特別聲明外，均採用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC90dy8=" title="https://creativecommons.org/licenses/by-nc-sa/3.0/tw/">CC BY-NC-SA 3.0 TW<i class="fa fa-external-link"></i></span> 許可協議。轉載請註明出處！</p>
]]></content>
      <categories>
        <category>C#</category>
        <category>IOC</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>IOC</tag>
        <tag>Autofac</tag>
        <tag>AOP</tag>
      </tags>
  </entry>
  <entry>
    <title>Autofac (IOC)容器介紹</title>
    <url>/autofac-introduce/</url>
    <content><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>市面上有許多IoC容器 <span class="exturl" data-url="aHR0cDovL25pbmplY3Qub3JnLw==" title="http://ninject.org/">Ninject<i class="fa fa-external-link"></i></span>,<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3VuaXR5Y29udGFpbmVyL3VuaXR5" title="https://github.com/unitycontainer/unity">Unity<i class="fa fa-external-link"></i></span>….</p>
<p>雖然容器眾多但要解決的問題和概念是一樣</p>
<p>今天使用Autofac 介紹一下IoC容器</p>
<p>不了解 IoC 概念可參考 我之前寫 <a href="/ioc-di/" title="IOC(控制反轉)，DI(依賴注入) 深入淺出~~">IOC(控制反轉)，DI(依賴注入) 深入淺出~~</a></p>
<h2 id="Autofac是一個-Ioc-容器"><a href="#Autofac是一個-Ioc-容器" class="headerlink" title="Autofac是一個 Ioc 容器"></a>Autofac是一個 <span style="color:#FF8C00;">Ioc</span> <span style="color:#ADD8E6;">容器</span></h2><p>眼尖的讀者會發現我把Ioc跟容器這兩個字使用兩個不同顏色</p>
<p>原因是Autofac這個框架其實做到兩個概念.</p>
<ul>
<li><span style="color:#FFA500;">IoC(Inversion of Control)</span></li>
<li><span style="color:#FFA500;">管理物件的容器</span></li>
</ul>
<div class="note note--important">Autofac框架幫我們實現可以管理物件生命週期並提供依賴注入相對應的物件中</div>

<hr>
<h2 id="為何使用Autofac在我們專案中"><a href="#為何使用Autofac在我們專案中" class="headerlink" title="為何使用Autofac在我們專案中?"></a>為何使用Autofac在我們專案中?</h2><p>我們先來看看在專案中常使用的撰寫方式,我們需要讀取使用者資料 透過<code>UserDao</code>來幫我們完成.</p>
<pre><code>public UserService {
    private UserDao _userDao = new UserDao();

    public UserModel GetUserById(string Id){
        return _userDao.GetUserById(Id);
    }
}
</code></pre><p><code>_userDao</code>物件跟依賴<code>UserService</code>，導致兩個狀況</p>
<ol>
<li><code>UserDao</code>物件掌控於 <code>UserService</code>,假如有其他類別也使用<code>UserDao</code>物件各自掌控<code>UserDao</code>物件,這導致許多不必要的資源浪費.</li>
<li>日後要替換讀取 <code>GetUserById</code>方式(從db改讀成其他地方 如API) 需要異動全部有建立<code>UserDao</code>的類別</li>
</ol>
<p>我們可以使用IoC容器解決上面兩個問題</p>
<hr>
<h2 id="使用Autofac-容器"><a href="#使用Autofac-容器" class="headerlink" title="使用Autofac 容器"></a>使用Autofac 容器</h2><p>一般容器有多種注入方式：建構子注入，屬性注入，參數注入</p>
<p>按照以下四個步驟 簡單使用Autofac</p>
<ol>
<li>建立<code>ContainerBuilder</code>物件</li>
<li>註冊型別(可限制創建物件生命週期)</li>
<li>建立<code>IContainer</code></li>
<li>取得我們需要的物件.</li>
</ol>
<p>此範例使用建構子注入方式</p>
<pre><code>//1.建立ContainerBuilder物件
ContainerBuilder builder = new ContainerBuilder();

//2.註冊型別(可限制創建物件生命週期)
builder.RegisterType&lt;UserDao&gt;().As&lt;IUser&gt;();

//3.建立IContainer
IContainer container = builder.Build();

//4.使用IContainer取得我們需要的物件.
IUser user = container.Resolve&lt;IUser&gt;();
</code></pre><p>我們新建一個<code>IUser</code>來給<code>UserDao</code>繼承當作解耦合點(介面可利於日後替換使用)</p>
<pre><code>public interface IUser{
    UserModel GetUserById(string Id);
}

public UserService {
    private IUser _userDao;

    public UserService(IUser userdao){
        _userDao = userdao;
    }

    public UserModel GetUserById(string Id){
        return _userDao.GetUserById(Id);
    }
}
</code></pre><p>可能還感受不到IoC容器威力，因為目前依賴的複雜度還沒有太大</p>
<p>目前模組依賴關係 如下UML圖</p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/九桃/c59c2248-a535-431f-b1ca-a17372438940/1555298305_13744.png" alt></p>
<p>模組複雜程度像下圖 如果沒有容器幫我們做物件控制管理,想想就覺得可怕</p>
<p><b id="docs-internal-guid-0b402e0a-7fff-daaa-ae1a-0fd681ce4177"><img src="https://lh3.googleusercontent.com/v8WHBoDPfaypFKDoEKPrnTgwQ6QRqnXvgz9QQamrSrzsC8BUOr5_WLXiIRH2YO4mRac8EG_BhyRhDoH41iiSX-Yn0I8oID7spXRXYnTCjh93Vh6CwbfUQt8Es_LRUzqcMdUL-o87_8E" alt>**</b></p>
<p><strong>上圖是我Inovce SDK框架的UML圖 </strong></p>
<p><strong>其中我們可以發現 </strong><code>ApiBase</code><strong>這個抽象類別 依賴於 </strong><code>IConfig</code><strong>介面(日後可能依賴更多其他物件或介面)</strong></p>
<pre><code>ContainerBuilder builder = new ContainerBuilder();
builder.RegisterType&lt;AppsettingConfig&gt;().As&lt;IConfig&gt;().InstancePerRequest();
builder.RegisterGeneric(typeof(ApiBase&lt;&gt;)).PropertiesAutowired();
builder.RegisterType&lt;InvoiceApiFactory&gt;().InstancePerRequest();
</code></pre><p>如果使用Autofac我們可不用擔心這些 只需要將被依賴的物件,介面註冊到容器中，剩下配對注入動作容器都會幫我們達成</p>
<p>已上面的例子來說：我只需要用 <code>InvoiceApiFactory</code>產生繼承<code>ApiBase&lt;&gt;</code>物件，使用<code>IConfig</code>將會被容器自動注入其中。</p>
<hr>
<h2 id="Autofac-常用三種注射方式"><a href="#Autofac-常用三種注射方式" class="headerlink" title="Autofac 常用三種注射方式."></a>Autofac 常用三種注射方式.</h2><ol>
<li>Constructor injection</li>
<li>Property injection</li>
<li>Method injection</li>
</ol>
<h3 id="constructor-injection"><a href="#constructor-injection" class="headerlink" title="constructor injection"></a>constructor injection</h3><p><img src="https://dotblogsfile.blob.core.windows.net/user/九桃/c59c2248-a535-431f-b1ca-a17372438940/1555387105_48127.png" alt></p>
<h3 id="Property-injection"><a href="#Property-injection" class="headerlink" title="Property injection"></a>Property injection</h3><p><img src="https://dotblogsfile.blob.core.windows.net/user/九桃/c59c2248-a535-431f-b1ca-a17372438940/1555387131_13945.png" alt></p>
<h3 id="Method-injection"><a href="#Method-injection" class="headerlink" title="Method injection"></a>Method injection</h3><p><img src="https://dotblogsfile.blob.core.windows.net/user/九桃/c59c2248-a535-431f-b1ca-a17372438940/1555387134_01082.png" alt></p>
<hr>
<h2 id="小結："><a href="#小結：" class="headerlink" title="小結："></a>小結：</h2><p>系統越來越複雜越能表現IoC容器的優勢，如果系統沒那麼複雜其實也不一定要使用他﹐看情境如何</p>
<p><strong>此文作者</strong>：Daniel Shih(石頭)<br><strong>此文地址</strong>： <a href="https://isdaniel.github.io/autofac-introduce/">https://isdaniel.github.io/autofac-introduce/</a> <br><strong>版權聲明</strong>：本博客所有文章除特別聲明外，均採用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC90dy8=" title="https://creativecommons.org/licenses/by-nc-sa/3.0/tw/">CC BY-NC-SA 3.0 TW<i class="fa fa-external-link"></i></span> 許可協議。轉載請註明出處！</p>
]]></content>
      <categories>
        <category>C#</category>
        <category>IOC</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>IOC</tag>
        <tag>Autofac</tag>
        <tag>AOP</tag>
      </tags>
  </entry>
  <entry>
    <title>(AutoMapper)反射自動註冊AutoMapper Profile</title>
    <url>/automapperinit/</url>
    <content><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>AutoMapper 幫我我們方便管理物件跟物件之間屬性值格式轉換</p>
<h2 id="模型轉換"><a href="#模型轉換" class="headerlink" title="模型轉換"></a>模型轉換</h2><p><strong>這裡有兩個類別</strong></p>
<p>UserInfoModel 當作我們從DB撈取出來 模型資料</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UserInfoModel</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> RowId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> Age &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>UserInfoViewModel 是呈現在UI或其他地方的模型  </p>
<p>其中 <code>Detail</code>欄位由 <code>UserInfoModel</code>的 <code>Name</code>和 <code>Age</code>屬性組成的</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UserInfoViewModel</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Detail &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>這時我們就會引用 AutoMapper 幫我們統一管理轉換模型上的問題</p>
<h2 id="建立一個Profile"><a href="#建立一個Profile" class="headerlink" title="建立一個Profile"></a>建立一個Profile</h2><p>設置<code>UserInfoModel</code>對於 <code>UserInfoViewModel</code>之前的欄位轉換</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UserInfoProfile</span> : <span class="title">Profile</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">UserInfoProfile</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            CreateMap&lt;UserInfoModel, UserInfoViewModel&gt;()</span><br><span class="line">                    .ForMember(t =&gt; t.Detail, </span><br><span class="line">                                    s =&gt; s.MapFrom(_ =&gt; <span class="string">$"DetailInfo:<span class="subst">&#123;_.Name&#125;</span> <span class="subst">&#123;_.Age&#125;</span>"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>而我們在註冊時會呼叫 <code>AddProfile</code>方法</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line">Mapper.Initialize(x =&gt; x.AddProfile&lt;UserInfoProfile&gt;());</span><br></pre></td></tr></table></figure></div>
<p>但每次新加Profile這邊都需要設置新的Profile，我們就會想有沒有方法可以讓他自動註冊？</p>
<blockquote>
<p>我們可以使用反射來完成</p>
</blockquote>
<h2 id="反射自動註冊AutoMapper-Profile"><a href="#反射自動註冊AutoMapper-Profile" class="headerlink" title="反射自動註冊AutoMapper Profile"></a>反射自動註冊AutoMapper Profile</h2><p>此程式我使用我的 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2lzZGFuaWVsL0V4dGVuaW9uVG9vbA==" title="https://github.com/isdaniel/ExtenionTool">ExtenionTool<i class="fa fa-external-link"></i></span></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> profiles =  Assembly.GetExecutingAssembly()</span><br><span class="line">                        .GetInstancesByAssembly&lt;Profile&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> profile <span class="keyword">in</span> profiles)</span><br><span class="line">&#123;</span><br><span class="line">    Mapper.Initialize(x =&gt; x.AddProfile(profile));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>上面程式碼很簡單清晰，呼叫 <code></code> 取得目前組件所有的 <code>Profile</code>物件實體並且加到<code>Profile</code>中，我們將上面程式碼在初始化執行一次</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> IEnumerable&lt;TResult&gt; GetInstancesByAssembly&lt;TResult&gt;(<span class="keyword">this</span> Assembly ass)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> ass.GetTypes()</span><br><span class="line">            .Where(x =&gt; <span class="keyword">typeof</span>(TResult).IsAssignableFrom(x) &amp;&amp; x.IsNormalClass())</span><br><span class="line">            .Select(x =&gt; Activator.CreateInstance(x))</span><br><span class="line">            .Cast&lt;TResult&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>核心程式使用Linq 動態取得你所需的類型並使用反射創建</p>
<p>之後我們就可以不用在手動把<code>Profile</code>加至<code>AutoMapper</code>容器中了</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2lzZGFuaWVsL0F1dG9SZWdpc3RlckF1dG9NYXBwZXI=" title="https://github.com/isdaniel/AutoRegisterAutoMapper">Source Code<i class="fa fa-external-link"></i></span></p>
<p><strong>此文作者</strong>：Daniel Shih(石頭)<br><strong>此文地址</strong>： <a href="https://isdaniel.github.io/automapperinit/">https://isdaniel.github.io/automapperinit/</a> <br><strong>版權聲明</strong>：本博客所有文章除特別聲明外，均採用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC90dy8=" title="https://creativecommons.org/licenses/by-nc-sa/3.0/tw/">CC BY-NC-SA 3.0 TW<i class="fa fa-external-link"></i></span> 許可協議。轉載請註明出處！</p>
]]></content>
      <categories>
        <category>C#</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>Automapper</tag>
        <tag>Model</tag>
      </tags>
  </entry>
  <entry>
    <title>【C#】 AOP輕型框架  AwesomeProxy.Net 介紹使用</title>
    <url>/awesomeproxy-net/</url>
    <content><![CDATA[<p>今天和大家分享<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2lzZGFuaWVsL0F3ZXNvbWVQcm94eS5OZXQ=" title="https://github.com/isdaniel/AwesomeProxy.Net">AwesomeProxy.Net<i class="fa fa-external-link"></i></span>小弟開源AOP輕型框架</p>
<h2 id="簡單介紹-AOP-Aspect-Oriented-Programming"><a href="#簡單介紹-AOP-Aspect-Oriented-Programming" class="headerlink" title="簡單介紹 AOP (Aspect-Oriented Programming)"></a>簡單介紹 <strong>AOP</strong> (Aspect-Oriented Programming)</h2><p>AOP 是 <strong>OOP(物件導向)一個變化程式撰寫思想。</strong>（非取代OOP而是擴充）</p>
<p>導入AOP幫助：<br>    可幫我們分離<strong>核心邏輯</strong>跟<strong>非核心邏輯</strong>代碼，很好降低模組間耦合性，已便日後擴充。</p>
<p>　　非核心邏輯代碼像：(日誌記錄，性能統計，安全控制，事務處理，異常處理等代碼從業務邏輯代碼中劃分出來)</p>
<p>例如下圖：</p>
<p><img src="https://ithelp.ithome.com.tw/upload/images/20180209/20096630UyP6I4l2MB.png" alt="https://ithelp.ithome.com.tw/upload/images/20180209/20096630UyP6I4l2MB.png"></p>
<p>　　原本寫法把寫日誌相關程式寫入，業務邏輯方法中。導致此方法非單一職則。我們可以把程式重構改寫成(右圖)，將寫日誌方法抽離出來更有效達成模組化。</p>
<p><strong>經典例子:</strong></p>
<p>Asp.Net MVC中Contoller，Action過濾器(FilterAttribute)</p>
<hr>
<h2 id="AwesomeProxy-Net介紹："><a href="#AwesomeProxy-Net介紹：" class="headerlink" title="AwesomeProxy.Net介紹："></a>AwesomeProxy.Net介紹：</h2><p>AwesomeProxy.Net 主要是攔截方法處理</p>
<ol>
<li>方法執行前</li>
<li>方法執行後</li>
<li>方法異常</li>
</ol>
<h3 id="How-to-Use"><a href="#How-to-Use" class="headerlink" title="How to Use:"></a>How to Use:</h3><p>   使用方法類似於Asp.Net MVC中Contoller，Action過濾器</p>
<ol>
<li><p>撰寫一個標籤(Attribute) 標記攔截動作</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CacheAttribute</span> : <span class="title">AopBaseAttribute</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> CacheName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnExcuting</span>(<span class="params">ExcuteingContext context</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">object</span> cacheObj = CallContext.GetData(CacheName);</span><br><span class="line">        <span class="keyword">if</span> (cacheObj != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            context.Result = cacheObj;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnExcuted</span>(<span class="params">ExcutedContext context</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        CallContext.SetData(CacheName, context.Result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>將要被攔截類別繼承於<strong>MarshalByRefObject</strong>類別</p>
</li>
</ol>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CacheService</span> : <span class="title">MarshalByRefObject</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Cache</span>]</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">GetCacheDate</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>	&#123;</span><br><span class="line">		<span class="keyword">return</span> DateTime.Now.ToString(<span class="string">"yyyy/MM/dd hh:mm:ss"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>由ProxyFactory.GetProxyInstance 動態產生被代理類別<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">CacheService cache = ProxyFactory.GetProxyInstance&lt;CacheService&gt;();</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>4.直接呼叫方法就可執行標籤上的攔截動作<br><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">CacheService cache = ProxyFactory.GetProxyInstance&lt;CacheService&gt;();</span><br><span class="line">Console.WriteLine(cache.GetCacheDate());</span><br></pre></td></tr></table></figure></p>
<p>Simple Code：</p>
<p>  <strong>撰寫Log</strong><br>  <strong>權限驗證</strong><br>  <strong>快取</strong></p>
<p><img src="https://ithelp.ithome.com.tw/upload/images/20180209/20096630BB4lN2NYOW.png" alt="https://ithelp.ithome.com.tw/upload/images/20180209/20096630BB4lN2NYOW.png"></p>
<p><strong>Unit Test 結果</strong></p>
<p><img src="https://ithelp.ithome.com.tw/upload/images/20180209/20096630tbgj7MbcAL.png" alt="https://ithelp.ithome.com.tw/upload/images/20180209/20096630tbgj7MbcAL.png"></p>
<h2 id="小結："><a href="#小結：" class="headerlink" title="小結："></a>小結：</h2><p>使用 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2lzZGFuaWVsL0F3ZXNvbWVQcm94eS5OZXQ=" title="https://github.com/isdaniel/AwesomeProxy.Net">AwesomeProxy.Net <i class="fa fa-external-link"></i></span>和ASP.Net MVC註冊Contoller或Action過濾器一樣<br>AOP核心思想就是代理模式。</p>
<p>本篇只先介紹如何使用，後續有時間會再補充代理模式細節！</p>
<p><strong>此文作者</strong>：Daniel Shih(石頭)<br><strong>此文地址</strong>： <a href="https://isdaniel.github.io/awesomeproxy-net/">https://isdaniel.github.io/awesomeproxy-net/</a> <br><strong>版權聲明</strong>：本博客所有文章除特別聲明外，均採用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC90dy8=" title="https://creativecommons.org/licenses/by-nc-sa/3.0/tw/">CC BY-NC-SA 3.0 TW<i class="fa fa-external-link"></i></span> 許可協議。轉載請註明出處！</p>
]]></content>
      <categories>
        <category>C#</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>AOP</tag>
        <tag>Asp.net</tag>
        <tag>Design-Pattern</tag>
        <tag>Open-Source</tag>
      </tags>
  </entry>
  <entry>
    <title>【深入淺出】Base編碼 (Base64為例子)</title>
    <url>/base64-principle/</url>
    <content><![CDATA[<p>Base家族以Base64最為出名，這邊會用Base64編碼來做介紹</p>
<p>寫網站應該都用過Base64但你對於他的原理了解嗎?</p>
<p>此篇和大家分享Base家族的秘密</p>
<hr>
<h2 id="用途："><a href="#用途：" class="headerlink" title="用途："></a>用途：</h2><p>Base64主要用途是某些系統中只能使用ASCII字符，為了避免某些機器無法識別我們傳輸資料</p>
<p>Base64就是用來將非ASCII字符的數據轉換成ASCII字符的一種方法。</p>
<blockquote>
<p>　base64特別適合在http，mime協議下快速傳輸數據(例如我們常使用 Email)</p>
</blockquote>
<p>它使用下面表中所使用的字符與編碼。</p>
<p><img src="http://www.asciitable.com/index/asciifull.gif" alt="http://www.asciitable.com/index/asciifull.gif"></p>
<p><span class="exturl" data-url="aHR0cDovL3d3dy5hc2NpaXRhYmxlLmNvbS8=" title="http://www.asciitable.com/">圖片連結<i class="fa fa-external-link"></i></span></p>
<p><code>Base64</code> 中的64其實是有含意的</p>
<p>他會把資料轉成</p>
<pre><code>a~z (26)
A~Z (26)
0~9 (10)
+ (1)
/ (1)
</code></pre><p>上面編碼成上面五種種類字元的資料 64就是把所以可用字元數量總合</p>
<blockquote>
<p>64 = 26+26+10+1+1</p>
</blockquote>
<hr>
<h2 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h2><p>那Base64是怎麼將資料轉成<code>a~z，A~Z，0~9，/，+</code>的組合呢?</p>
<p>最終目標想要把資料轉成在Ascii Code 0 ~ 127 的字元</p>
<p><span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvQmFzZTY0" title="https://zh.wikipedia.org/wiki/Base64">Base64 wiki說明<i class="fa fa-external-link"></i></span></p>
<blockquote>
<p>轉換的時候，將3位元組的資料，先後放入一個24位元的緩衝區中，先來的位元組占高位。資料不足3位元組的話，於緩衝區中剩下的位元用0補足。每次取出6位元，按照其值選擇ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/中的字元作為編碼後的輸出，直到全部輸入資料轉換完成。</p>
</blockquote>
<p>這邊有幾個重點</p>
<ol>
<li>會把資料分割成每 3 byte (24bit) 為單位</li>
<li>資料不足3 byte的話，於緩衝區中剩下的bit用0補足</li>
<li>計算出來值依照下表索引轉換成Base64可用字元 <img src="http://i.imgur.com/4wh9OVF.png" alt="Base64 wiki說明"></li>
<li>直到全部輸入資料轉換完成</li>
</ol>
<p>下面有個例子方便大家了解！</p>
<hr>
<h2 id="實際例子："><a href="#實際例子：" class="headerlink" title="實際例子："></a>實際例子：</h2><p>先來看看下面的例子：</p>
<p><code>BC</code> 用 <code>Base64</code> 轉成 <code>QkM=</code> 過程．</p>
<ol>
<li>將字元轉換成二進制</li>
</ol>
<ul>
<li>B (66) = 0    1    0    0    0    0    1    0</li>
<li>C (67) = 0    1    0    0    0    0    1    1</li>
</ul>
<ol start="2">
<li><p>資料不足3 byte的話，於緩衝區中剩下的bit用0補足，所以我們將第三個Byte資料用0補齊</p>
</li>
<li><p>最左邊數字為頭，用每組６bit來重新分組轉換後的資料.</p>
</li>
<li><p>將轉換後的資料依照Base64轉換表 轉換成Base64字元.</p>
</li>
</ol>
<p><img src="/images/Base64_1.PNG" alt="img"></p>
<p>Base64編碼    Q    k    M    =<br>範例來自於Wiki</p>
<blockquote>
<p>= 並不是`Base64的字元 而是代表補0使用的<br>雖然Base64在最後常常會看到 = 或 == 結尾，那是因為遇到要補位的情況.如果字元剛剛好滿的狀態(3 bytes)就不會看到 = 符號</p>
</blockquote>
<p><img src="/images/Base64_2.PNG" alt="img"><br>範例來自於Wiki</p>
<h2 id="小結："><a href="#小結：" class="headerlink" title="小結："></a>小結：</h2><p>Base64分享到這邊！</p>
<p>其實Base家族除了64還有 <code>Base32,Base16 ....</code> 你也可以自行依照上面算法建立自己 Base 編碼.</p>
<p><code>Base32 : a~z , 2~7</code></p>
<p>原理其實都是一樣的</p>
<p><strong>此文作者</strong>：Daniel Shih(石頭)<br><strong>此文地址</strong>： <a href="https://isdaniel.github.io/base64-principle/">https://isdaniel.github.io/base64-principle/</a> <br><strong>版權聲明</strong>：本博客所有文章除特別聲明外，均採用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC90dy8=" title="https://creativecommons.org/licenses/by-nc-sa/3.0/tw/">CC BY-NC-SA 3.0 TW<i class="fa fa-external-link"></i></span> 許可協議。轉載請註明出處！</p>
]]></content>
      <categories>
        <category>WebDesign</category>
      </categories>
      <tags>
        <tag>WebDesign</tag>
        <tag>Base64</tag>
        <tag>Encoding</tag>
      </tags>
  </entry>
  <entry>
    <title>C# Boxing vs UnBoxing</title>
    <url>/boxing-unboxing/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h2><p><code>Boxing</code>跟<code>UnBoxing</code>在.net中,我們可能在無意識使用到但這個事情確會造成一些效能影響…</p>
<h2 id="NET兩種類型"><a href="#NET兩種類型" class="headerlink" title=".NET兩種類型"></a>.NET兩種類型</h2><p>在.NET有分兩種類型</p>
<ol>
<li>值類型(int,double,char….)</li>
<li>參考類型(自行宣告的類別,string….)</li>
</ol>
<p>而存放資料的方式也有兩種:</p>
<ol>
<li>堆疊Stack  </li>
<li>堆積Heap</li>
</ol>
<p>談談Boxing和UnBoxing之前，我們先來了解<code>Stack</code>和<code>Heap</code></p>
<p>值類型(Value Type)會存取在<code>Stack</code>記憶體區塊中</p>
<p>參考類型(Reference Type)內容會在<code>Heap</code>記憶體區塊上，Stack會指向Heap上記憶體位置(有點像c++傳址)</p>
<p>如下圖</p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/%E4%B9%9D%E6%A1%83/dc60b613-5aab-4031-b07e-ba95b3eb8c59/1519278342_30764.png" alt></p>
<p>了解<code>Stack</code>和<code>Heap</code>後</p>
<p>我們來談談<code>Boxing</code>和<code>UnBoxing</code></p>
<h2 id="Boxing"><a href="#Boxing" class="headerlink" title="Boxing:"></a>Boxing:</h2><p>型態由大轉小</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i=<span class="number">20</span>;</span><br><span class="line"><span class="keyword">object</span> o=(<span class="keyword">object</span>)i;</span><br></pre></td></tr></table></figure>
<div class="note note--normal"> int強制轉型為object 因為我們所有物件都是繼承於object物件</div>

<p>原本值類型存在<code>Stack</code>中,但因為我們強轉成<code>Object = 20</code>會存在Heap記憶體區塊中.</p>
<blockquote>
<p>因為Object是ReferType型別,這個現象就是<code>Boxing</code></p>
</blockquote>
<p>如下圖</p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/九桃/62a967a6-4b35-4ca6-a9d1-90318cd12cdc/1556535346_2245.png" alt></p>
<h2 id="UnBoxing"><a href="#UnBoxing" class="headerlink" title="UnBoxing:"></a>UnBoxing:</h2><p>型態由小轉大(小轉大會有轉型出錯的問題)</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i=<span class="number">20</span>;</span><br><span class="line"><span class="keyword">object</span> o=(<span class="keyword">object</span>)i;</span><br><span class="line"><span class="keyword">int</span> j=(<span class="keyword">int</span>)o;</span><br></pre></td></tr></table></figure>
<p>將<code>Object</code>強轉成<code>int</code>在這個案例不會有問題，但如果是將o轉為char就會有問題<br>在執行<code>UnBoxing</code>如下圖</p>
<p>可以看到原本存在<code>Heap</code>上值 我們會把他搬回<code>Stack</code>並附值給<code>J</code></p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/九桃/62a967a6-4b35-4ca6-a9d1-90318cd12cdc/1556535644_50214.png" alt></p>
<blockquote>
<p>把<code>Heap</code>上直搬回<code>Stake</code>上就會遇到UnBoxing.</p>
</blockquote>
<h2 id="Net現實生活中常遇到的案例"><a href="#Net現實生活中常遇到的案例" class="headerlink" title=".Net現實生活中常遇到的案例"></a>.Net現實生活中常遇到的案例</h2><ul>
<li><code>String.Format</code></li>
<li><code>DataTable</code></li>
</ul>
<h3 id="String-Format的Boxing"><a href="#String-Format的Boxing" class="headerlink" title="String.Format的Boxing"></a>String.Format的Boxing</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">Format</span>(<span class="params"><span class="keyword">string</span> format, <span class="keyword">params</span> <span class="keyword">object</span>[] args</span>)</span></span><br></pre></td></tr></table></figure>
<p>我們常使用上面<code>String.Format</code>重載方法,但使用這個方法會不小心遇到Boxing問題</p>
<p>我們在呼叫方法時假如參數是一個<code>Value Type</code>,<code>.Net</code>會在呼叫前把此值<strong>複製</strong>在傳入方法中(如果是<code>Refer Type</code>傳入此物件<code>Heap</code>記憶體位置).</p>
<p><code>String.Format</code>吃參數是<code>Object</code>,所以如果傳入參數是<code>Value Type</code>如(<code>1</code>,<code>1.1m</code>)就會遇到<code>Boxing</code>.</p>
<blockquote>
<p>但如果我們在呼叫<code>String.Format</code>前使用<code>ToString</code>方法就可以避免Boxing的動作,<code>$&quot;{times.ToString()}&quot;</code>.</p>
</blockquote>
<h3 id="DataTable的Boxing-UnBoxing"><a href="#DataTable的Boxing-UnBoxing" class="headerlink" title="DataTable的Boxing UnBoxing"></a>DataTable的Boxing UnBoxing</h3><p>我們在<code>ADO.Net</code>將資料存放在<code>DataTable</code>就會經歷一次<code>Boxing</code>在利用<code>DataTable.Row[][]</code>返回是一個<code>Object</code>型態資料(因為會把ValueType型別資料放進Heap中).</p>
<p>我們在取用時會把<code>Object</code>轉成我們希望型態(UnBoxing).</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">DataTable dt= <span class="keyword">new</span> DataTable();</span><br><span class="line">dt.Rows[<span class="number">0</span>][<span class="string">"col1"</span>] <span class="comment">//返回一個object型態的物件</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>所以我在讀取DB資料時建議使用<code>DataReader</code>而不是使用<code>DataTable</code>,因為使用DataReader可以直接去得使用型態(避免Boxing and UnBoxing).</p>
</blockquote>
<h3 id="常使用誤區string-format-Boxing-UnBoxing"><a href="#常使用誤區string-format-Boxing-UnBoxing" class="headerlink" title="常使用誤區string.format Boxing UnBoxing"></a>常使用誤區string.format Boxing UnBoxing</h3><p>在開始說明之前先問問大家兩個問題</p>
<p>下面兩段程式碼是否是一樣?</p>
<p>如果不一樣是哪裡不一樣?</p>
<blockquote>
<p><code>$&quot;&quot;</code>是<code>string.format</code>語法糖.</p>
</blockquote>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> intVal = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> intVal1 = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> intVal2 = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> intVal3 = <span class="number">3</span>;</span><br><span class="line"><span class="string">$"<span class="subst">&#123;intVal.ToString()&#125;</span> <span class="subst">&#123;intVal2.ToString()&#125;</span> <span class="subst">&#123;intVal3.ToString()&#125;</span>"</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> intVal = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> intVal1 = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> intVal2 = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> intVal3 = <span class="number">3</span>;</span><br><span class="line"><span class="string">$"<span class="subst">&#123;intVal&#125;</span> <span class="subst">&#123;intVal2&#125;</span> <span class="subst">&#123;intVal3&#125;</span>"</span>;</span><br></pre></td></tr></table></figure>
<p>上面答案非常明顯是不一樣,但不一樣在哪裡呢?</p>
<blockquote>
<p>Boxing和UnBoxing.</p>
</blockquote>
<p>要了解<code>String.Format</code> Boxing和UnBoxing之前我們要先了解function是如何傳參數的.</p>
<h4 id="Function如何傳參數"><a href="#Function如何傳參數" class="headerlink" title="Function如何傳參數"></a>Function如何傳參數</h4><p>在.net我們常常在寫function但你有注意參數是如何被傳的嗎?</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="keyword">new</span> A()</span><br><span class="line">    &#123;</span><br><span class="line">        Age = <span class="number">100</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    FunctionA(a);</span><br><span class="line">    Console.WriteLine(<span class="string">$"main a.Age <span class="subst">&#123;a.Age&#125;</span>"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">100</span>;</span><br><span class="line">    FunctionInt(i);</span><br><span class="line">    Console.WriteLine(<span class="string">$"main i <span class="subst">&#123;i&#125;</span>"</span>); </span><br><span class="line"></span><br><span class="line">    Console.Read();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">FunctionA</span>(<span class="params">A a</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">$"FunctionA <span class="subst">&#123;a.Age&#125;</span>"</span>);</span><br><span class="line">    a.Age = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">FunctionInt</span>(<span class="params"><span class="keyword">int</span> a</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">$"FunctionInt <span class="subst">&#123;a&#125;</span>"</span>);</span><br><span class="line">    a = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>執行結果如下圖</p>
<p><img src="https://i.imgur.com/7aGOpZJ.png" alt="alt"></p>
<p>那是因為.net在傳參數時</p>
<ul>
<li>如果<strong>方法參數</strong>是Ref Type會copy address當作參數進去</li>
<li>如果<strong>方法參數</strong>是Value Type會copy value當作參數進去</li>
</ul>
<p>我們看<code>String.Format</code>其中一個重載方法,是傳入<code>object[]</code>當作參數.</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">Format</span>(<span class="params"><span class="keyword">string</span> format, <span class="keyword">params</span> <span class="keyword">object</span>[] args</span>)</span> =&gt; args != <span class="literal">null</span> ? <span class="keyword">string</span>.FormatHelper((IFormatProvider) <span class="literal">null</span>, format, <span class="keyword">new</span> ParamsArray(args)) : <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(format == <span class="literal">null</span> ? <span class="keyword">nameof</span> (format) : <span class="keyword">nameof</span> (args));</span><br></pre></td></tr></table></figure>
<p>因為單純傳入value type會導致參數需要boxing(因為方法參數吃<code>object</code>)</p>
<p>所以value type使用<code>ToString</code>方法傳入<code>String.Format</code>方法,先把value type轉成refer type的<code>string</code>就不會造成boxing unboxing效能問題了.</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2lzZGFuaWVsL0Jsb2dTYW1wbGUvdHJlZS9tYXN0ZXIvc3JjL1NhbXBsZXMvQm94X1VuQm94aW5n" title="https://github.com/isdaniel/BlogSample/tree/master/src/Samples/Box_UnBoxing">Box_UnBoxing Sample Code<i class="fa fa-external-link"></i></span></p>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>希望本篇文章可以讓大家對於Boxing和UnBoxing更了解，避免踏入這個問題中。</p>
<h2 id="參考連結"><a href="#參考連結" class="headerlink" title="參考連結"></a>參考連結</h2><blockquote>
<p>參考 MSDN <span class="exturl" data-url="aHR0cHM6Ly9tc2RuLm1pY3Jvc29mdC5jb20vemgtdHcvbGlicmFyeS95ejJiZTV3ay5hc3B4" title="https://msdn.microsoft.com/zh-tw/library/yz2be5wk.aspx">https://msdn.microsoft.com/zh-tw/library/yz2be5wk.aspx<i class="fa fa-external-link"></i></span></p>
</blockquote>
<p><strong>此文作者</strong>：Daniel Shih(石頭)<br><strong>此文地址</strong>： <a href="https://isdaniel.github.io/boxing-unboxing/">https://isdaniel.github.io/boxing-unboxing/</a> <br><strong>版權聲明</strong>：本博客所有文章除特別聲明外，均採用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC90dy8=" title="https://creativecommons.org/licenses/by-nc-sa/3.0/tw/">CC BY-NC-SA 3.0 TW<i class="fa fa-external-link"></i></span> 許可協議。轉載請註明出處！</p>
]]></content>
      <categories>
        <category>C#</category>
        <category>Boxing-UnBoxing</category>
      </categories>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>橋接模式(BridgePattern)</title>
    <url>/bridge-pattern/</url>
    <content><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><h3 id="目的："><a href="#目的：" class="headerlink" title="目的："></a>目的：</h3><p>如果有兩大類模組是多對多的組合，如本次Smaple Code. Nick和Addidas 包包都有紅、藍、黃….或其他顏色</p>
<p>就可能呈現下面6種組合</p>
<ul>
<li>Nick(紅)</li>
<li>Nick(藍)</li>
<li>Nick(黃)</li>
<li>Addidas(紅)</li>
<li>Addidas(藍)</li>
<li>Addidas(黃)</li>
</ul>
<p>如果此建立類別的話 可能情況如下面的UNL圖</p>
<p><img src="https://github.com/isdaniel/DesignPattern/raw/master/DesignPattern/img/Bridge/BridgePattern1.PNG" alt></p>
<div class="note note--important">類別數量 = 顏色數量 * 包包品牌數量</div>

<p>這樣會有兩個問題</p>
<ol>
<li>隨著品牌和顏色增多，包包類別數量急速增長　<strong>(X = m*n)個</strong></li>
<li>顏色我們可看做一個抽象 不應當和包包合在一起</li>
</ol>
<p>其中的第二點我覺得最重要</p>
<p>這時候就很適合帶入我們的主角<strong>BridgePattern</strong></p>
<hr>
<h2 id="範例介紹"><a href="#範例介紹" class="headerlink" title="範例介紹"></a>範例介紹</h2><p>關係變成下圖UML</p>
<p><img src="https://github.com/isdaniel/DesignPattern/raw/master/DesignPattern/img/Bridge/brigdeUML.png" alt></p>
<p>我們可以看到<code>BagBsae</code>去引用<code>ColorBase</code> 可以看到我們所需的子類別變成五個而已,重點是類別關係變得更有條理了，顏色和包包分開可調整性更大。</p>
<p>OOP有一個很重要的設計觀念</p>
<blockquote>
<p>盡量用組合取代繼承，因為繼承耦合性遠大於組合！</p>
</blockquote>
<p>因為子類別繼承父類別，子類別無條件都擁有protect已上的方法或成員資料.這就會造成一個耦合性(使用繼承須看情況)，而A類別對於B類別進行組合就可達到繼承效果但不造成像繼承般的強耦合.</p>
<p>我們的背包一樣可擁有多種顏色，但耦合度跟類別關係變得更清晰了。</p>
<hr>
<h3 id="程式碼解說"><a href="#程式碼解說" class="headerlink" title="程式碼解說"></a>程式碼解說</h3><p>建立 <code>BagBase</code> 類別並將 <code>ColorBase</code> 當建構傳入(因為<code>Bag</code>需要上顏色)</p>
<pre><code>public abstract class BagBase
{
    protected ColorBase color{ get; set; }

    public BagBase(ColorBase color) {
        this.color = color;
    }
    public abstract void GetBag();
}

public abstract class ColorBase
{
    public abstract string Color();
}
</code></pre><p>這邊我只介紹一種顏色和包包來當作範例,因為其他概念都一樣</p>
<pre><code>public class AdidasBag : BagBase
{
    public AdidasBag(ColorBase color) : base(color)
    {
    }

    public override void GetBag()
    {
        Console.WriteLine($&quot;It is Addidas Bag,Color is {color.Color()}&quot;);
    }
}

class ColorBlue : ColorBase
{
    public override string Color()
    {
        return &quot;Blue&quot;;
    }
}
</code></pre><p>建立</p>
<ul>
<li><code>AdidasBag</code>類別重載<code>GetBag</code>方法</li>
<li><code>ColorBlue</code>類別重載<code>Color</code>方法</li>
</ul>
<p>因為<code>BagBase</code>要傳入顏色<code>GetBag</code>就可幫包包上色.</p>
<p>使用如下外面看起來很合理乾淨.</p>
<pre><code>class Program
{
    static void Main(string[] args)
    {
        AdidasBag nick = new AdidasBag(new ColorBlue());
        nick.GetBag();
        Console.ReadKey();
    }
}
</code></pre><hr>
<h2 id="實際案例"><a href="#實際案例" class="headerlink" title="實際案例"></a>實際案例</h2><p>前陣子在做一個Unity2D遊戲，遇到一組遊戲邏輯</p>
<p>一個人物要移動有分兩種移動方式</p>
<ol>
<li>自動移動</li>
<li>玩家手動點擊移動</li>
</ol>
<p>因為是2D遊戲 有 <code>上下左右</code> 四個方位移動,四個方位配上兩個移動方式,人物會有不一樣的移動邏輯.</p>
<p>這邊我貼上部分程式碼</p>
<p>建立一個 <code>RoadActionBase</code>裡面有三個必要屬性需要給 <code>上下左右</code> 實現</p>
<ol>
<li><code>ArrowType</code> 2D人物移動箭頭方向</li>
<li><code>OffSetPos</code> 移動距離</li>
<li><p><code>PlayerDirction</code> 這是一個Unity2D座標屬性</p>
<p>public abstract class RoadActionBase<br>{</p>
<pre><code>protected int _level;

public RoadActionBase()
{
    _level = SenceParamter.RoadCount;
}

public abstract ArrowType ArrowType { get; }

public abstract int OffSetPos { get; }

public abstract Vector2 PlayerDirction { get; }
</code></pre><p>}</p>
</li>
</ol>
<p><code>UpRoadAction</code>類別對於往<code>上</code>時的狀態做給值</p>
<pre><code>public class UpRoadAction : RoadActionBase
{
    public override ArrowType ArrowType
    {
        get
        {
            return ArrowType.Up;
        }
    }

    public override int OffSetPos
    {
        get
        {
            return -_level;
        }
    }

    public override Vector2 PlayerDirction
    {
        get
        {
            return Vector2.up;
        }
    }
}
</code></pre><p><code>DownRoadAction</code>類別對於往<code>下</code>時的狀態做給值</p>
<pre><code>public class DownRoadAction : RoadActionBase
{
    public override ArrowType ArrowType
    {
        get
        {
            return ArrowType.Down;
        }
    }

    public override int OffSetPos
    {
        get
        {
            return _level;
        }
    }

    public override Vector2 PlayerDirction
    {
        get
        {
            return Vector2.down;
        }
    }
}
</code></pre><p><code>RightRoadAction</code>類別對於往<code>右</code>時的狀態做給值</p>
<pre><code>public class RightRoadAction : RoadActionBase
{
    public override ArrowType ArrowType
    {
        get
        {
            return ArrowType.Right;
        }
    }

    public override int OffSetPos
    {
        get
        {
            return 1;
        }
    }

    public override Vector2 PlayerDirction
    {
        get
        {
            return Vector2.right;
        }
    }
}
</code></pre><p><code>LeftRoadAction</code>類別對於往<code>左</code>時的狀態做給值</p>
<pre><code>public class LeftRoadAction : RoadActionBase
{
    public override ArrowType ArrowType
    {
        get
        {
            return ArrowType.Left;
        }
    }

    public override int OffSetPos
    {
        get
        {
            return -1;
        }
    }

    public override Vector2 PlayerDirction
    {
        get
        {
            return Vector2.left;
        }
    }
}
</code></pre><p>建立一個 <code>MoveBase</code> 並將 <code>RoadActionBase</code>當作建構子傳入(內部邏輯有寫注解).</p>
<div class="note note--important">重點在於一個 <code>IsWalkNext</code>方法 提供Hock給子類別做實現,因為手動和自動移動邏輯不一樣.</div>

<pre><code>/// &lt;summary&gt;
/// 橋接模式
/// &lt;/summary&gt;
public abstract class MoveBase
{
    protected PlayerController _player;

    protected int _level;

    protected float _Scape;

    public RoadActionBase RoadAction { get; protected set; }

    public MoveBase(RoadActionBase roadAction)
    {
        _player = PlayerController.Instance;
        _level = SenceParamter.RoadCount;
        _Scape = SenceParamter.Scape + SenceParamter.RoadHeigh;
        RoadAction = roadAction;
    }

    public virtual void Move(RoadContext currentRoad, RoadContext nextRoad)
    {
        //取得下一個位置
        Vector2 nextPos = nextRoad.transform.localPosition;

        if (IsWalkNext(currentRoad, nextRoad, _player.targetPos, nextPos))
        {
            //將下一個資料塞給當前玩家
            _player.targetPos = nextPos;
            _player.RoadContext = nextRoad;
            _player.moveDirction = RoadAction.PlayerDirction;

            currentRoad.SetIsWalk(true);

            //加入等待轉換的地方
            ReloadRoadController.Instance.AddRoadContext(currentRoad);
        }
    }

    protected abstract bool IsWalkNext(RoadContext currentRoad, RoadContext nextRoad, Vector3 targetPos, Vector3 nextPos);
}
</code></pre><p><code>TouchMove</code> 類別重載 <code>IsWalkNext</code>實現自己的邏輯</p>
<pre><code>public class TouchMove : MoveBase
{
    public TouchMove(RoadActionBase roadAction) : base(roadAction)
    {
    }

    /// &lt;summary&gt;
    /// 判斷是否可以 前往下一個目標
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;currentRoad&quot;&gt;&lt;/param&gt;
    /// &lt;param name=&quot;nextRoad&quot;&gt;&lt;/param&gt;
    /// &lt;param name=&quot;targetPos&quot;&gt;&lt;/param&gt;
    /// &lt;param name=&quot;nextPos&quot;&gt;&lt;/param&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    protected override bool IsWalkNext(RoadContext currentRoad, RoadContext nextRoad, Vector3 targetPos, Vector3 nextPos)
    {
        ArrowType arrowType = RoadAction.ArrowType;
        //1.下一個道路要可以進去
        //2.當前道路要可以出來
        //3.必須為四周的道路
        return
            arrowType.CanWalk(currentRoad.CanWalkOut) &amp;&amp;
            arrowType.CanWalk(nextRoad.CanWalkIn) &amp;&amp;
            CanMoveNextPos(targetPos, nextPos);

    }

    private bool CanMoveNextPos(Vector3 targetPos, Vector3 nextPos)
    {
        return ((int)Vector2.Distance(targetPos, nextPos)) % 
            ((int)_Scape) == 0;
    }
}
</code></pre><p><code>AutoMove</code> 類別重載 <code>IsWalkNext</code>實現自己的邏輯</p>
<pre><code>public class AutoMove : MoveBase
{
    public AutoMove(RoadActionBase roadAction) : base(roadAction)
    {
    }

    /// &lt;summary&gt;
    /// 判斷是否可以 前往下一個目標
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;currentRoad&quot;&gt;&lt;/param&gt;
    /// &lt;param name=&quot;nextRoad&quot;&gt;&lt;/param&gt;
    /// &lt;param name=&quot;targetPos&quot;&gt;&lt;/param&gt;
    /// &lt;param name=&quot;nextPos&quot;&gt;&lt;/param&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    protected override bool IsWalkNext(RoadContext currentRoad, RoadContext nextRoad, Vector3 targetPos, Vector3 nextPos)
    {
        //1.下一個道路要可以進去
        //2.當前道路要可以出來
        //3.必須為四周的道路
        //4.步數必須大於0
        return
                currentRoad.CurrentArrow.CanWalk(nextRoad.CanWalkIn) &amp;&amp;
                currentRoad.CurrentArrow.CanWalk(currentRoad.CanWalkOut) &amp;&amp;
                CanMoveNextPos(targetPos, nextPos) &amp;&amp;
                !nextRoad.IsChangeState &amp;&amp; 
                GameModel.Step &gt;0;
    }

    private bool CanMoveNextPos(Vector3 targetPos, Vector3 nextPos)
    {
        return ((int)Vector2.Distance(targetPos, nextPos)) % 
            ((int)_Scape) == 0;
    }
}
</code></pre><p>上面程式碼最主要是跟大家分享移動方式和方位的關係,<code>上下左右</code>值和方位式固定,將此配上不同的移動方式有不一樣的邏輯.</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2lzZGFuaWVsL0Rlc2lnblBhdHRlcm4vdHJlZS9tYXN0ZXIvRGVzaWduUGF0dGVybi9CcmlkZ2VQYXR0ZXJu" title="https://github.com/isdaniel/DesignPattern/tree/master/DesignPattern/BridgePattern">SourceCode<i class="fa fa-external-link"></i></span></p>
<p><strong>此文作者</strong>：Daniel Shih(石頭)<br><strong>此文地址</strong>： <a href="https://isdaniel.github.io/bridge-pattern/">https://isdaniel.github.io/bridge-pattern/</a> <br><strong>版權聲明</strong>：本博客所有文章除特別聲明外，均採用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC90dy8=" title="https://creativecommons.org/licenses/by-nc-sa/3.0/tw/">CC BY-NC-SA 3.0 TW<i class="fa fa-external-link"></i></span> 許可協議。轉載請註明出處！</p>
]]></content>
      <categories>
        <category>C#</category>
        <category>DesignPattern</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>DesignPattern</tag>
        <tag>BridgePattern</tag>
      </tags>
  </entry>
  <entry>
    <title>(C#)委託delegate,Func&lt;&gt;,Action 解說系列(一)</title>
    <url>/c-func-1/</url>
    <content><![CDATA[<h2 id="前文："><a href="#前文：" class="headerlink" title="前文："></a>前文：</h2><p>成為.Net高手<code>Delegate</code> 是必備武器之一</p>
<p>今天小弟和大家分享我所認知的<code>Delegate</code></p>
<p>一開始我們先來看看<code>Delegate</code>到底是不是類別</p>
<hr>
<h3 id="範例解說："><a href="#範例解說：" class="headerlink" title="範例解說："></a>範例解說：</h3><p>宣告一個 <code>voidDelegate</code> 委託</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">delegate</span> <span class="keyword">void</span> <span class="title">voidDelegate</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">$"delegate is class? <span class="subst">&#123;<span class="keyword">typeof</span>(voidDelegate).IsClass&#125;</span>"</span>);</span><br><span class="line"></span><br><span class="line">    Console.ReadKey();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>執行結果:Yes 委託是一個特別的類別</p>
</blockquote>
<p>但委託物件方式很特別 他在宣告時必須傳入<strong>[建構子參數]</strong>  而建構子參數是<strong>[方法]</strong></p>
<p>我們宣告一個委託 傳入兩個Int參數 回傳Int</p>
<pre><code>public delegate int calcInt(int arg1,int arg2);
</code></pre><p>使用如下 new 一個 <code>calcInt</code> 並傳入建構子參數  add方法 之後就可以把<code>calcint</code>當作方法來使用</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line">calcInt calcint = <span class="keyword">new</span> calcInt(<span class="keyword">add</span>);</span><br><span class="line"><span class="keyword">var</span> result1 = calcint(<span class="number">5</span>,<span class="number">5</span>);</span><br><span class="line">Console.WriteLine(result1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span>(<span class="params"><span class="keyword">int</span> a, <span class="keyword">int</span> b</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>或是</p>
<p>使用.net提供的 語法糖 如下</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line">calcInt calcint1 = (a,b) =&gt; &#123; <span class="keyword">return</span> a + b; &#125;;</span><br><span class="line"><span class="keyword">var</span> result2 = calcint1(<span class="number">5</span>, <span class="number">5</span>);</span><br><span class="line">Console.WriteLine(result2);</span><br><span class="line">(a,b) =&gt; &#123; <span class="keyword">return</span> a + b; &#125;;</span><br></pre></td></tr></table></figure></div>
<p>編譯器會動態幫我們產生一個方法。</p>
<p>委託就這樣嗎?!</p>
<hr>
<h2 id="進階的用法"><a href="#進階的用法" class="headerlink" title="進階的用法"></a>進階的用法</h2><h3 id="第一-宣告一個類別-計算者-，建構子參數是一個泛行List"><a href="#第一-宣告一個類別-計算者-，建構子參數是一個泛行List" class="headerlink" title="第一 : 宣告一個類別[計算者]，建構子參數是一個泛行List"></a>第一 : 宣告一個類別[計算者]，建構子參數是一個泛行List<t></t></h3><p>在類別中宣告Calc委託，在Excute方法中我們直接回傳執行Calc結果</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line">public class Calculator&lt;T&gt;</span><br><span class="line">    <span class="keyword">where</span> T : <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">delegate</span> T <span class="title">Calc</span>(<span class="params">IList&lt;T&gt; list</span>)</span>;</span><br><span class="line"></span><br><span class="line">    IList&lt;T&gt; _container;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Calculator</span>(<span class="params">IList&lt;T&gt; container</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        _container = container;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">Excute</span>(<span class="params">Calc C</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> C(_container);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="使用方法如下："><a href="#使用方法如下：" class="headerlink" title="使用方法如下："></a>使用方法如下：</h2><p>宣告一個物件Calculator傳入建構子參數List</p>
<p>重點:我們可以在Client端決定如何使用此方法</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line">List&lt;<span class="keyword">int</span>&gt; i_List = <span class="keyword">new</span> List&lt;<span class="keyword">int</span>&gt;()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span></span><br><span class="line">&#125;;</span><br><span class="line">Calculator&lt;<span class="keyword">int</span>&gt; calculator = <span class="keyword">new</span> Calculator&lt;<span class="keyword">int</span>&gt;(i_List);</span><br><span class="line"><span class="keyword">int</span> i_add = calculator.Excute((list) =&gt; list.Sum());</span><br><span class="line"><span class="keyword">int</span> i_multi = calculator.Excute((list) =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> totle = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> i <span class="keyword">in</span> list)</span><br><span class="line">    &#123;</span><br><span class="line">        totle *= i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> totle;</span><br><span class="line">&#125;);</span><br><span class="line">Console.WriteLine(<span class="string">$"add:<span class="subst">&#123;i_add&#125;</span>  multi:<span class="subst">&#123;i_multi&#125;</span>"</span>);</span><br></pre></td></tr></table></figure></div>
<p>總結:如上面程式碼　我們可在<code>Client</code>中決定對<code>List</code>集合做操作(加,減,乘,除) ，而不是一開始就寫死在類別中，降低了類別方法和<code>Client</code>的耦合</p>
<p><code>Delegate</code>可以把方法實作的權利移交給<code>Clinet</code>端</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2lzZGFuaWVsL0RlbGVnYXRlU2ltcGxl" title="https://github.com/isdaniel/DelegateSimple">原始碼範例<i class="fa fa-external-link"></i></span></p>
<p><strong>此文作者</strong>：Daniel Shih(石頭)<br><strong>此文地址</strong>： <a href="https://isdaniel.github.io/c-func-1/">https://isdaniel.github.io/c-func-1/</a> <br><strong>版權聲明</strong>：本博客所有文章除特別聲明外，均採用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC90dy8=" title="https://creativecommons.org/licenses/by-nc-sa/3.0/tw/">CC BY-NC-SA 3.0 TW<i class="fa fa-external-link"></i></span> 許可協議。轉載請註明出處！</p>
]]></content>
      <categories>
        <category>C#</category>
        <category>Delegate</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>Func</tag>
        <tag>Delegate</tag>
      </tags>
  </entry>
  <entry>
    <title>(C#) 委託delegate,Func&lt;&gt;,Action 解說系列(二)</title>
    <url>/c-func-2/</url>
    <content><![CDATA[<h2 id="前文："><a href="#前文：" class="headerlink" title="前文："></a>前文：</h2><p>這個文章和大家分享解說 Func&lt;&gt;和Action&lt;&gt;</p>
<p>最後帶著大家來實現自己的<code>Linq Where</code></p>
<p>先來看 <code>Func&lt;&gt; ，Action&lt;&gt;</code>原始定義</p>
<p>我們發現<code>Func&lt;&gt; ，Action&lt;&gt;</code> 其實本質就是委託 ，雖然有十幾個重載 但大同小異</p>
<pre><code>public delegate TResult Func&lt;out TResult&gt;();

public delegate void Action&lt;in T&gt;(T obj);
</code></pre><p><code>Func</code>固定最後一個泛型參數為方法回傳值，其餘是傳入參數</p>
<pre><code>public delegate TResult Func&lt;in T, out TResult&gt;(T arg);
</code></pre><h3 id="解說Func："><a href="#解說Func：" class="headerlink" title="解說Func："></a>解說Func：</h3><p>宣告一個<code>Func&lt;Person,string&gt;</code>委託 <code>_thunkCheckAge</code><br><code>_thunkCheckAge</code>委託指向<code>CheckAge</code>方法<br>執行<code>_thunkCheckAge</code>委託 (執行<code>CheckAge</code>方法)</p>
<pre><code>public class Person
{
    public int Age { get; set; }
    public string Name { get; set; }
}

/// &lt;summary&gt;
/// 年紀超過10歲算老人
/// &lt;/summary&gt;
/// &lt;param name=&quot;person&quot;&gt;&lt;/param&gt;
/// &lt;returns&gt;&lt;/returns&gt;
public static string CheckAge(Person person)
{
    string result = &quot;年紀剛剛好&quot;;
    if (person.Age &gt;= 10)
    {
        result = &quot;老人&quot;;
    }
    return result;
}
static void Main(string[] args)
{
    //Init一個Person物件
    Person p = new Person()
    {
        Age = 10,
        Name = &quot;tom&quot;
    };

    #region Func
    //宣告一個Func&lt;Person,string&gt;委託 _thunkCheckAge
    Func&lt;Person, string&gt; _thunkCheckAge;

    //_thunkCheckAge委託指向CheckAge方法
    _thunkCheckAge = new Func&lt;Person, string&gt;(CheckAge);

    //執行_thunkCheckAge委託 (執行CheckAge方法)
    string result = _thunkCheckAge(p);

    //最後將結果顯示出來
    Console.WriteLine(result); 
    #endregion
    Console.ReadKey();
}
</code></pre><h3 id="解說-Action："><a href="#解說-Action：" class="headerlink" title="解說 Action："></a>解說 Action：</h3><p><code>Action</code>這個委託是<code>Void</code>，傳入參數型態是由泛型來決定</p>
<pre><code>public delegate void Action&lt;in T&gt;(T obj);
</code></pre><p>宣告一個<code>Action&lt;Person&gt;</code>委託的 <code>_thunkPerson</code>物件<br>將<code>CallPersonInfo</code>方法 賦予給<code>_thunkPerson</code><br>執行<code>_thunkPerson</code> (就是執行<code>CallPersonInfo</code>方法)</p>
<pre><code>public class Person
{
    public int Age { get; set; }
    public string Name { get; set; }
}
static void Main(string[] args)
{
    //宣告_thunkPerson為Action&lt;Person&gt;委託
    //此Action傳入參數是Person由泛型來決定
    Action&lt;Person&gt; _thunkPerson;
    //Init一個Person物件
    Person p = new Person()
    {
        Age = 10,
        Name = &quot;tom&quot;
    };
    //將CallPersonInfo方法 賦予給_thunkPerson
    _thunkPerson = new Action&lt;Person&gt;(CallPersonInfo);

    //執行_thunkPerson (就是執行CallPersonInfo方法)
    _thunkPerson(p);
    Console.ReadKey();
}

public static void CallPersonInfo(Person person)
{
    Console.WriteLine($&quot;Age:{person.Age} Name:{person.Name}&quot;);
}
</code></pre><h3 id="小總結："><a href="#小總結：" class="headerlink" title="小總結："></a>小總結：</h3><p>Action<code></code>和<code>Func</code>差別是</p>
<ul>
<li><code>Action</code>是<code>void</code>不回傳值得委託</li>
<li><code>Func</code>是有回傳值得委託</li>
</ul>
<p>有了以上的基礎，我們就來實現我們自己的<code>Linq Where</code> 和 <code>Linq Select</code></p>
<p>先來分析 <code>Where</code> 方法簽章</p>
<pre><code>public static IEnumerable&lt;TSource&gt; Where&lt;TSource&gt;(this IEnumerable&lt;TSource&gt; source, Func&lt;TSource, bool&gt; predicate)
</code></pre><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><p>如果我要找一個大於10歲的人,撰寫一般Linq Where 如下在where中塞選此集合的條件，那我要怎麼自己實現呢？</p>
<p>重點在於<strong>[執行塞選條件]</strong>這個動作</p>
<pre><code>List&lt;Person&gt; pList = new List&lt;Person&gt;()
{
    new Person() { Age=100,Name=&quot;daniel&quot;},
    new Person() { Age=20,Name=&quot;Tom&quot; },
    new Person() { Age = 10,Name = &quot;Amy&quot;},
    new Person() { Age=5,Name = &quot;rjo&quot;}
};
pList.Where(per =&gt; per.Age &gt; 10);
</code></pre><p>以下是實現自己的<code>Where</code>語法 有沒有很簡單!</p>
<p>重點在<code>if(where(item))</code> 判斷物件是否符合條件，如符合就回傳此物件</p>
<pre><code>public static class LinqExtension
{
    /// &lt;summary&gt;
    /// 自訂一個Where 
    /// &lt;/summary&gt;
    /// &lt;typeparam name=&quot;TSource&quot;&gt;&lt;/typeparam&gt;
    /// &lt;param name=&quot;source&quot;&gt;&lt;/param&gt;
    /// &lt;param name=&quot;where&quot;&gt;&lt;/param&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    public static IEnumerable&lt;TSource&gt; MyWhere&lt;TSource&gt;(this IEnumerable&lt;TSource&gt; source
        ,Func&lt;TSource, bool&gt; where)
    {
        foreach (var item in source)
        {
            if (where(item))
            {
                yield return item;
            }
        }
    }
}
</code></pre><hr>
<h2 id="總結："><a href="#總結：" class="headerlink" title="總結："></a>總結：</h2><p>委託把不確定的動作，轉移給呼叫端來撰寫。  </p>
<p>而不是寫死在程式中</p>
<p>上面的<code>MyWhere</code>挖了一個洞，關於判斷是否符合條件，給呼叫端實現</p>
<p>雖然在裡面一樣是一個一個判斷是否符合條件，符合再返回，但利用委託和泛型就可以對於任何條件和任何型別來做比較　大大提升了程式效率</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2lzZGFuaWVsL0RlbGVnYXRlU2ltcGxl" title="https://github.com/isdaniel/DelegateSimple">原始碼範例<i class="fa fa-external-link"></i></span></p>
<p><strong>此文作者</strong>：Daniel Shih(石頭)<br><strong>此文地址</strong>： <a href="https://isdaniel.github.io/c-func-2/">https://isdaniel.github.io/c-func-2/</a> <br><strong>版權聲明</strong>：本博客所有文章除特別聲明外，均採用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC90dy8=" title="https://creativecommons.org/licenses/by-nc-sa/3.0/tw/">CC BY-NC-SA 3.0 TW<i class="fa fa-external-link"></i></span> 許可協議。轉載請註明出處！</p>
]]></content>
      <categories>
        <category>C#</category>
        <category>Delegate</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>Func</tag>
        <tag>Delegate</tag>
      </tags>
  </entry>
  <entry>
    <title>(C#)委託delegate,Func&lt;&gt;,Action 解說系列(三)</title>
    <url>/c-func-3/</url>
    <content><![CDATA[<h2 id="前文："><a href="#前文：" class="headerlink" title="前文："></a>前文：</h2><p>在Func和Action泛型委託中 有 In , Out 兩個關鍵字</p>
<p>那到底是神麼意思呢?  </p>
<p>讓我們一起看下去….</p>
<pre><code>//Action delegate
public delegate void Action&lt;in T&gt;(T obj);

//fun delegate
public delegate TResult Func&lt;in T, out TResult&gt;(T arg);
</code></pre><p>上面程式碼我列出<code>Action</code>和<code>Func</code> 委派方法各其中一個重載</p>
<p>我們可以發現到泛型中有關鍵字 <code>in</code> 和 <code>out</code> 這是代表神麼意思呢?</p>
<p>讓我們繼續看下去…..</p>
<h3 id="解說："><a href="#解說：" class="headerlink" title="解說："></a>解說：</h3><p>分享前先探討一個問題 泛型是否可以父類別指向子類別</p>
<pre><code>public interface IGeneric&lt;T&gt; { }
public class Base&lt;T&gt; : IGeneric&lt;T&gt; { }

public class A { }

class Program
{

    static void Main(string[] args)
    {
        IGeneric&lt;object&gt; b = new Base&lt;object&gt;();
        IGeneric&lt;A&gt; a = new Base&lt;A&gt;();
        //無法執行父類只向子類別 因為泛型預設是Invariance
        b = a;
        Console.ReadKey();
    }
}
</code></pre><p>上面範例程式很清楚知道無法編譯，那我要怎麼處理和解決的？</p>
<p>第一種解法 使用 <code>AS</code> :</p>
<pre><code>public interface IGeneric&lt;T&gt; { }
public class Base&lt;T&gt; : IGeneric&lt;T&gt; { }

public class A { }

class Program
{

    static void Main(string[] args)
    {
        IGeneric&lt;object&gt; b = new Base&lt;object&gt;();
        IGeneric&lt;A&gt; a = new Base&lt;A&gt;();
        //使用AS來轉型
        b = a as IGeneric&lt;object&gt;;
        Console.ReadKey();
    }
}
</code></pre><p>第二種解法 在<code>interface</code>的泛型中使用 <code>Out</code> (今天要介紹的主角)</p>
<pre><code>//這裡使用out將T 解釋為Covariance
public interface IGeneric&lt;out T&gt; { }
public class Base&lt;T&gt; : IGeneric&lt;T&gt; { }

public class A { }

class Program
{

    static void Main(string[] args)
    {
        IGeneric&lt;object&gt; b = new Base&lt;object&gt;();
        IGeneric&lt;A&gt; a = new Base&lt;A&gt;();
        //在上面的泛型用out
        b = a;
        Console.ReadKey();
    }
}
</code></pre><h3 id="三個重要名詞-Covariance，Contravariance，Invariance"><a href="#三個重要名詞-Covariance，Contravariance，Invariance" class="headerlink" title="三個重要名詞 Covariance，Contravariance，Invariance"></a>三個重要名詞 <code>Covariance，Contravariance，Invariance</code></h3><p>MSDN中有解釋 此關鍵字 泛型中的共變數和反變數</p>
<p><code>Covariance</code>(共變數) ：</p>
<blockquote>
<p>MSDN說明：可讓您使用比原本指定更多衍生的類型。您可以將 IEnumerable<derived> (在 Visual Basic 中為 IEnumerable(Of Derived)) 的執行個體指派給 IEnumerable<base> 類型的變數<br>簡單說明：泛型支援父類指向子類別  [泛型中使用out ]  (支援泛型介面或泛型委派)<br>如下面的範例:</derived></p>
</blockquote>
<p>因<code>IGeneric&lt;out T&gt;</code>所以下面a付值給b就不需轉型</p>
<pre><code>//這裡使用out將T 解釋為Covariance
public interface IGeneric&lt;out T&gt; { }
public class Base&lt;T&gt; : IGeneric&lt;T&gt; { }

public class A { }

class Program
{

    static void Main(string[] args)
    {
        IGeneric&lt;object&gt; b = new Base&lt;object&gt;();
        IGeneric&lt;A&gt; a = new Base&lt;A&gt;();
        //在上面的泛型用out
        b = a;
        Console.ReadKey();
    }
}
</code></pre><p><code>Contravariance</code>(反變數)</p>
<blockquote>
<p>MSDN說明：可讓您使用比原本所指定更泛型 (較少衍生) 的類型。您可以將 IEnumerable<base> (在 Visual Basic 中為 IEnumerable(Of Base)) 的執行個體指派給IEnumerable<derived> 類型的變數。</derived></p>
</blockquote>
<p>簡單說明：可將父類物件引用賦予給子類別 <strong>[泛型中有in]</strong><br>如下範例：</p>
<p>因<code>IComparer&lt;in T&gt;</code> 所以子類可以取得父類的引用</p>
<pre><code>//這裡使用in將T 解釋為Contravariance
public interface IGeneric&lt;in T&gt; { }

public class Base&lt;T&gt; : IGeneric&lt;T&gt; { }

public abstract class Shape
{
    public virtual double Area { get { return 0; } }
}

public class Square : Shape
{
    private double r;
    public Square(double radius) { r = radius; }
    public double Radius { get { return r; } }
    public override double Area { get { return r * r; } }
}

public class Circle : Shape
{
    private double r;
    public Circle(double radius) { r = radius; }
    public double Radius { get { return r; } }
    public override double Area { get { return Math.PI * r * r; } }
}

public class ShapeAreaComparer : IComparer&lt;Shape&gt;
{
    int IComparer&lt;Shape&gt;.Compare(Shape a, Shape b)
    {
        if (a == null) return b == null ? 0 : -1;
        return b == null ? 1 : a.Area.CompareTo(b.Area);
    }
}

class Program
{

    static void Main(string[] args)
    {
        //泛型[形狀類別(基類)]
        IGeneric&lt;Shape&gt; b = new Base&lt;Shape&gt;();
        //泛型[圓形類別(子類)]
        IGeneric&lt;Circle&gt; a = new Base&lt;Circle&gt;();
        //子類可以取得父類引用
        a = b;
        Console.ReadKey();
    }
}
</code></pre><p><code>Invariance</code> 只能該類別指向該類別<br>一般泛型預設就是這個</p>
<hr>
<h2 id="總結："><a href="#總結：" class="headerlink" title="總結："></a>總結：</h2><p><code>Func</code> 泛型委派的最後一個泛型類型參數會指定委派簽章中的傳回值類型</p>
<p><code>Covariance</code> (共變數) (<code>out</code> 關鍵字) 泛型支援父類指向子類別</p>
<p><code>Contravariant</code> (反變數) (<code>in</code> 關鍵字)  泛型子類可以取得父類的引用</p>
<p><code>Invariance</code> 一般泛型預設就是這個</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9tc2RuLm1pY3Jvc29mdC5jb20vemgtdHcvbGlicmFyeS9kZDc5OTUxNyh2PXZzLjExMA==" title="https://msdn.microsoft.com/zh-tw/library/dd799517(v=vs.110">泛型中的共變數和反變數<i class="fa fa-external-link"></i></span>.aspx)</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvZG90bmV0L2NzaGFycC9sYW5ndWFnZS1yZWZlcmVuY2Uva2V5d29yZHMvb3V0LWdlbmVyaWMtbW9kaWZpZXI=" title="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/out-generic-modifier">out (generic modifier) (C# Reference)<i class="fa fa-external-link"></i></span></p>
<p><strong>此文作者</strong>：Daniel Shih(石頭)<br><strong>此文地址</strong>： <a href="https://isdaniel.github.io/c-func-3/">https://isdaniel.github.io/c-func-3/</a> <br><strong>版權聲明</strong>：本博客所有文章除特別聲明外，均採用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC90dy8=" title="https://creativecommons.org/licenses/by-nc-sa/3.0/tw/">CC BY-NC-SA 3.0 TW<i class="fa fa-external-link"></i></span> 許可協議。轉載請註明出處！</p>
]]></content>
      <categories>
        <category>C#</category>
        <category>Delegate</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>Func</tag>
        <tag>Delegate</tag>
      </tags>
  </entry>
  <entry>
    <title>Asp.net使用快取 (一)</title>
    <url>/cache-asp-net-1/</url>
    <content><![CDATA[<p>最近回答<span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNTExNjA5Nzgvc3FsLXNlcnZlci1kYXRhLWNhY2hpbmctaW4tYXNwLW5ldC81MTE2MTI3NyM1MTE2MTI3Nw==" title="https://stackoverflow.com/questions/51160978/sql-server-data-caching-in-asp-net/51161277#51161277">SQL Server data caching in ASP.NET<i class="fa fa-external-link"></i></span>問題,且有人問我有關快取的問題.</p>
<p>所以小弟打算寫兩篇文章簡單分享我知道的<em>快取</em></p>
<hr>
<h2 id="目錄"><a href="#目錄" class="headerlink" title="目錄:"></a>目錄:</h2><h3 id="第一篇"><a href="#第一篇" class="headerlink" title="第一篇"></a>第一篇</h3><ol>
<li>為何要使用快取</li>
<li>快取操作</li>
<li>Asp.Net中使用快取 by <code>HttpRuntime.Cache</code></li>
</ol>
<h3 id="第二篇"><a href="#第二篇" class="headerlink" title="第二篇"></a>第二篇</h3><ol>
<li>提出介面,提高可替換性</li>
<li>使用<strong>泛型</strong>改寫快取 讀取方式</li>
<li>使用<strong>擴充方法</strong>改寫快取</li>
</ol>
<hr>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>快取機制很重要,但有些觀念可能要先釐清楚</p>
<h3 id="為何要使用快取"><a href="#為何要使用快取" class="headerlink" title="為何要使用快取"></a>為何要使用快取</h3><p>在使用一個東西前,使用的原因很重要.</p>
<p>如果某些資料<strong>常常使用</strong>,但卻<strong>不常改變</strong>我們會把資料存在某個空間中(常常會存記憶體,因為記憶體速度快),方便日後讀取使用.</p>
<h3 id="快取操作"><a href="#快取操作" class="headerlink" title="快取操作"></a>快取操作</h3><p>一般使用快取會有兩個動作,讀和寫<br>如果是存在記憶體中一般會有期限,因為記憶體資源很寶貴不能一直占用.</p>
<ul>
<li>寫入</li>
</ul>
<p>通常有一個<strong>Key</strong>,跟要存入<strong>物件</strong><br>就像我們把東西存入保險箱,會拿到一個鑰匙 來取東西</p>
<ul>
<li>讀取</li>
</ul>
<p>讀取就是依照Key讀取我們存入的物件</p>
<p>就像我們要拿保險箱裡的東西需要的鑰匙</p>
<ol>
<li>Asp.Net中使用快取 by <code>HttpRuntime.Cache</code></li>
</ol>
<p>在Asp.net中 有一個靜態物件  <code>HttpRuntime.Cache</code> 可以很方便使用快取</p>
<ul>
<li>存入快取可以呼叫 <code>Insert</code> 方法</li>
</ul>
<p>他有多個重載 可以使用最簡單的 <code>Insert(string [key],object [value])</code></p>
<p>如下面範例</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">System.Web.Caching.Cache cacheContainer = HttpRuntime.Cache;</span><br><span class="line"><span class="keyword">string</span> data = <span class="string">""</span>;</span><br><span class="line">cacheContainer.Insert(<span class="string">"test1"</span>, data);</span><br></pre></td></tr></table></figure>
<ul>
<li>讀取快取資料</li>
</ul>
<p>呼叫 <code>Get</code> 傳入Key值即可獲得  Note:如果快取容器沒有此物件會回傳<code>NULL</code></p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">string</span> cacheData = cacheContainer.Get(<span class="string">"data"</span>) <span class="keyword">as</span> <span class="keyword">string</span>;</span><br></pre></td></tr></table></figure>
<p>小結:這篇簡單介紹快取 下篇會將目前程式碼做改進,變得更優美彈性</p>
<p><strong>此文作者</strong>：Daniel Shih(石頭)<br><strong>此文地址</strong>： <a href="https://isdaniel.github.io/cache-asp-net-1/">https://isdaniel.github.io/cache-asp-net-1/</a> <br><strong>版權聲明</strong>：本博客所有文章除特別聲明外，均採用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC90dy8=" title="https://creativecommons.org/licenses/by-nc-sa/3.0/tw/">CC BY-NC-SA 3.0 TW<i class="fa fa-external-link"></i></span> 許可協議。轉載請註明出處！</p>
]]></content>
      <categories>
        <category>C#</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>Asp.net</tag>
        <tag>cache</tag>
      </tags>
  </entry>
  <entry>
    <title>Asp.net使用快取 (二)</title>
    <url>/cache-asp-net-2/</url>
    <content><![CDATA[<a href="/cache-asp-net-1/" title="Asp.net使用快取 (一)">Asp.net使用快取 (一)</a>
<p>向大家簡單介紹</p>
<ol>
<li>快取是什麼</li>
<li>為何要使用快取</li>
<li>使用簡單<code>HttpRuntime.Cache</code>使用快取機制</li>
</ol>
<p>這篇是分享把快取程式碼變得更有彈性</p>
<hr>
<h2 id="第二篇大綱"><a href="#第二篇大綱" class="headerlink" title="第二篇大綱"></a>第二篇大綱</h2><ol>
<li>提出介面,提高可替換性</li>
<li>使用泛型改寫快取 讀取方式</li>
<li>使用擴充方法改寫快取</li>
</ol>
<hr>
<h3 id="提出介面-提高可替換性"><a href="#提出介面-提高可替換性" class="headerlink" title="提出介面,提高可替換性"></a>提出介面,提高可替換性</h3><p>情境:</p>
<p>目前有個專案使用 <code>HttpRuntime.Cache</code> 物件</p>
<p>在記憶體快取中除了使用 Asp.Net 中<code>HttpRuntime.Cache</code>類別外還有很多解決方案.例如使用<strong>Memcache</strong>,<strong>Redis</strong>…</p>
<p>如果我們原本使用<code>HttpRuntime.Cache</code>類別但之後要轉成其他快取方式怎麼辦?</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">HomeController</span> : <span class="title">Controller</span></span><br><span class="line">&#123;</span><br><span class="line">	System.Web.Caching.Cache cacheContainer = HttpRuntime.Cache;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> ActionResult <span class="title">Index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>	&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">string</span> cacheData = cacheContainer.Get(<span class="string">"data"</span>) <span class="keyword">as</span> <span class="keyword">string</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (cacheData==<span class="literal">null</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			cacheContainer.Insert(<span class="string">"test1"</span>, DateTime.Now.ToShortDateString());</span><br><span class="line">		&#125;</span><br><span class="line">  </span><br><span class="line">		<span class="keyword">return</span> View(cacheData);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>雖然使用不同快取方式,但記得我上篇的重點<strong>快取會有兩個動作,讀和寫</strong>,所以最基本就會有讀和寫這兩個<strong>動作</strong></p>
<p>OOP有個很重要的觀念 <strong>多個類有重複動作考慮提出父類別</strong></p>
<p>為了方便了解我把<code>HttpRuntime.Cache</code>封裝成一個類別</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">NetCache</span> &#123;</span><br><span class="line">    System.Web.Caching.Cache cacheContainer = HttpRuntime.Cache;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">object</span> <span class="title">GetCacheObject</span>(<span class="params"><span class="keyword">string</span> key</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> cacheContainer.Get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetCache</span>(<span class="params"><span class="keyword">string</span> key,<span class="keyword">object</span> obj</span>)</span> &#123;</span><br><span class="line">        cacheContainer.Insert(key, obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>這邊有另一個<code>Memcache</code>快取Class</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MemeryCache</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> ObjectCache _cache = MemoryCache.Default;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">object</span> <span class="title">GetCacheObject</span>(<span class="params"><span class="keyword">string</span> key</span>)</span></span><br><span class="line"><span class="function"></span>	&#123;</span><br><span class="line">		<span class="keyword">return</span> _cache[cacheKey];</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetCache</span>(<span class="params"><span class="keyword">string</span> key, <span class="keyword">object</span> obj</span>)</span></span><br><span class="line"><span class="function"></span>	&#123;</span><br><span class="line">		<span class="keyword">var</span> policy = <span class="keyword">new</span> CacheItemPolicy();</span><br><span class="line">		policy.RemovedCallback = OnFileContentsCacheRemove;</span><br><span class="line">		<span class="comment">// 設定快取時間2分鐘</span></span><br><span class="line">		policy.AbsoluteExpiration = DateTimeOffset.Now.Minute(<span class="number">2</span>);</span><br><span class="line">		_cache.Set(cacheKey, fileContents, policy);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>先不關注這兩個物件裡面細節,我們可以發現他們都有 <code>GetCacheObject</code> 方法和<code>SetCache</code> 方法</p>
<p>這時我們就可以適時提出<strong>介面(interface)</strong>,當作這兩個類別的合約</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ICache</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Set</span>(<span class="params"><span class="keyword">string</span> key,<span class="keyword">object</span> obj</span>)</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">object</span> <span class="title">Get</span>(<span class="params"><span class="keyword">string</span> key</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>之後將他們兩個類別實現 <code>ICache</code> 介面</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MemeryCache</span> : <span class="title">ICache</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">private</span> ObjectCache _cache = MemoryCache.Default;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">object</span> <span class="title">Get</span>(<span class="params"><span class="keyword">string</span> key</span>)</span></span><br><span class="line"><span class="function"></span>	&#123;</span><br><span class="line">		<span class="keyword">return</span> _cache[cacheKey];</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Set</span>(<span class="params"><span class="keyword">string</span> key, <span class="keyword">object</span> obj</span>)</span></span><br><span class="line"><span class="function"></span>	&#123;</span><br><span class="line">		<span class="keyword">var</span> policy = <span class="keyword">new</span> CacheItemPolicy();</span><br><span class="line">		policy.RemovedCallback = OnFileContentsCacheRemove;</span><br><span class="line">		<span class="comment">// 設定快取時間2分鐘</span></span><br><span class="line">		policy.AbsoluteExpiration = DateTimeOffset.Now.Minute(<span class="number">2</span>);</span><br><span class="line">		_cache.Set(cacheKey, fileContents, policy);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">NetCache</span> : <span class="title">ICache</span></span><br><span class="line">&#123;</span><br><span class="line">    System.Web.Caching.Cache cacheContainer = HttpRuntime.Cache;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">object</span> <span class="title">Get</span>(<span class="params"><span class="keyword">string</span> key</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> cacheContainer.Get(key);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Set</span>(<span class="params"><span class="keyword">string</span> key,<span class="keyword">object</span> obj</span>)</span> &#123;</span><br><span class="line">        cacheContainer.Insert(key, obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>提出介面有甚麼好處?</p>
<p>我們可以把前面程式碼改成<strong>IOC依賴注入</strong>的方式,不要在程式碼寫死使用<code>HttpRuntime.Cache</code>,由IOC容器幫我們把物件注入程式碼中.</p>
<p>Note:我使用建構子注入法</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">HomeController</span> : <span class="title">Controller</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//不用寫死使用  HttpRuntime.Cache</span></span><br><span class="line">	<span class="comment">//System.Web.Caching.Cache cacheContainer = HttpRuntime.Cache;</span></span><br><span class="line">    ICache cacheContainer;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HomeController</span>(<span class="params">ICache Container</span>)</span>&#123;</span><br><span class="line">        cacheContainer = Container;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">	<span class="function"><span class="keyword">public</span> ActionResult <span class="title">Index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>	&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">string</span> cacheData = cacheContainer.Get(<span class="string">"data"</span>) <span class="keyword">as</span> <span class="keyword">string</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (cacheData==<span class="literal">null</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			cacheContainer.Insert(<span class="string">"test1"</span>, DateTime.Now.ToShortDateString());</span><br><span class="line">		&#125;</span><br><span class="line">  </span><br><span class="line">		<span class="keyword">return</span> View(cacheData);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>ICache</code> 變成快取程式碼的潤滑劑.可讓程式變得更有彈性</p>
<hr>
<h3 id="使用泛型改寫快取-讀取方式"><a href="#使用泛型改寫快取-讀取方式" class="headerlink" title="使用泛型改寫快取 讀取方式"></a>使用泛型改寫快取 讀取方式</h3><p>我在<span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNTExNjA5Nzgvc3FsLXNlcnZlci1kYXRhLWNhY2hpbmctaW4tYXNwLW5ldC81MTE2MTI3NyM1MTE2MTI3Nw==" title="https://stackoverflow.com/questions/51160978/sql-server-data-caching-in-asp-net/51161277#51161277">StackOverFlow解答<i class="fa fa-external-link"></i></span>的方式就是第二種</p>
<p>其中最主要的技巧就是把<code>Get</code>方法返回的<code>Object</code>改成使用泛型</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> T GetOrSetCache&lt;T&gt;</span><br><span class="line">    (string key,T obj, int cacheTime) where T:class,new()</span><br><span class="line">&#123;</span><br><span class="line">    System.Web.Caching.Cache cacheContainer = HttpRuntime.Cache;</span><br><span class="line">    T cacheObj = cacheContainer.Get(key) <span class="keyword">as</span> T;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (cacheObj == <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cacheContainer.Insert(key,</span><br><span class="line">            obj,</span><br><span class="line">            <span class="literal">null</span>, </span><br><span class="line">            DateTime.Now.AddMinutes(cacheTime),</span><br><span class="line">            System.Web.Caching.Cache.NoSlidingExpiration);</span><br><span class="line">        cacheObj = obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> cacheObj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>讓我們在使用時可以變成</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> data = DateTime.Now.ToShortDateString();</span><br><span class="line"><span class="keyword">int</span> numberOfMinutes = <span class="number">3</span>;</span><br><span class="line">data = GetOrSetCache(<span class="string">"name1"</span>,data,numberOfMinutes );</span><br></pre></td></tr></table></figure>
<p>我們只需要呼叫<code>GetOrSetCache</code>方法,這個方法把<code>GetCache</code>和<code>SetCache</code>封裝起來了</p>
<hr>
<h3 id="使用擴充方法改寫快取"><a href="#使用擴充方法改寫快取" class="headerlink" title="使用擴充方法改寫快取"></a>使用擴充方法改寫快取</h3><p>.Net有提供一個很方便的機制 <strong>擴充方法</strong>,這個機制幫我們解決一個很重要的問題.<br>我們可以<strong>擴充已經封裝但沒有原始碼的類別</strong>,</p>
<p>在這段程式碼中,使用<code>Func&lt;TObj&gt;</code> 可以使用<code>lambda</code> 表達式,讓程式碼更簡潔有力!!</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> TObj GetOrSetCache&lt;TObj&gt;(<span class="keyword">this</span> Func&lt;TObj&gt; selector, <span class="keyword">string</span> key, <span class="keyword">int</span> cacheTime)    <span class="keyword">where</span> TObj : <span class="keyword">class</span></span><br><span class="line">&#123; </span><br><span class="line">	Cache cacheContainer = HttpRuntime.Cache;</span><br><span class="line">	<span class="comment">//get cache Object</span></span><br><span class="line">	<span class="keyword">var</span> obj = cacheContainer.Get(key) <span class="keyword">as</span> TObj;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//if there isn't cache object add this object to cache</span></span><br><span class="line">	<span class="keyword">if</span> (obj == <span class="literal">null</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		obj = selector();</span><br><span class="line">		cacheContainer.Insert(key, obj);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我們使用時如下</p>
<p>變更簡潔動作更漂亮</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> numberOfMinutes = <span class="number">3</span>;</span><br><span class="line">data = GetOrSetCache(()=&gt; DateTime.Now.ToShortDateString(),<span class="string">"name1"</span>,data,numberOfMinutes );</span><br></pre></td></tr></table></figure>
<hr>
<p>同場加映:</p>
<p>擴展方法和介面搭配使用</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">WebDefaultCache</span> : <span class="title">ICache</span></span><br><span class="line">&#123;</span><br><span class="line">	Cache cacheContainer = HttpRuntime.Cache;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">object</span> <span class="title">Get</span>(<span class="params"><span class="keyword">string</span> key</span>)</span></span><br><span class="line"><span class="function"></span>	&#123;</span><br><span class="line">		<span class="keyword">return</span> cacheContainer.Get(key);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Set</span>(<span class="params"><span class="keyword">string</span> key, <span class="keyword">object</span> obj</span>)</span></span><br><span class="line"><span class="function"></span>	&#123;</span><br><span class="line">		cacheContainer.Insert(key, obj);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ICache</span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Set</span>(<span class="params"><span class="keyword">string</span> key, <span class="keyword">object</span> obj</span>)</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">object</span> <span class="title">Get</span>(<span class="params"><span class="keyword">string</span> key</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">InfrastructureExtension</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> TObj GetOrSetCache&lt;TObj&gt;(<span class="keyword">this</span> Func&lt;TObj&gt; selector, <span class="keyword">string</span> key) <span class="keyword">where</span> TObj : <span class="keyword">class</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> GetOrSetCache(selector, key,<span class="number">10</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> TObj GetOrSetCache&lt;TObj&gt;(<span class="keyword">this</span> Func&lt;TObj&gt; selector, <span class="keyword">string</span> key, <span class="keyword">int</span> cacheTime) <span class="keyword">where</span> TObj : <span class="keyword">class</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> GetOrSetCache(selector, key, cacheTime, <span class="keyword">new</span> WebDefaultCache());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> TObj GetOrSetCache&lt;TObj&gt;(<span class="keyword">this</span> Func&lt;TObj&gt; selector, <span class="keyword">string</span> key, <span class="keyword">int</span> cacheTime, ICache cacheContainer) <span class="keyword">where</span> TObj : <span class="keyword">class</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//get cache Object</span></span><br><span class="line">		<span class="keyword">var</span> obj = cacheContainer.Get(key) <span class="keyword">as</span> TObj;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//if there isn't cache object add this object to cache</span></span><br><span class="line">		<span class="keyword">if</span> (obj == <span class="literal">null</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			obj = selector();</span><br><span class="line">			cacheContainer.Set(key, obj);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> obj;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>雖然在使用上和第三種一樣<br>但我們多了使用<strong>方法重載</strong>多傳一個參數<code>ICache</code>介面 可以讓我們在寫程式時決定要使用哪種cache方式,不用改快去那邊程式碼.</p>
<p>同場加映<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2lzZGFuaWVsL0V4dGVuaW9uVG9vbA==" title="https://github.com/isdaniel/ExtenionTool">程式碼<i class="fa fa-external-link"></i></span>我放在我自己常用的<strong>ExtenionTool</strong>專案中</p>
<p><strong>此文作者</strong>：Daniel Shih(石頭)<br><strong>此文地址</strong>： <a href="https://isdaniel.github.io/cache-asp-net-2/">https://isdaniel.github.io/cache-asp-net-2/</a> <br><strong>版權聲明</strong>：本博客所有文章除特別聲明外，均採用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC90dy8=" title="https://creativecommons.org/licenses/by-nc-sa/3.0/tw/">CC BY-NC-SA 3.0 TW<i class="fa fa-external-link"></i></span> 許可協議。轉載請註明出處！</p>
]]></content>
      <categories>
        <category>C#</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>Asp.net</tag>
        <tag>cache</tag>
      </tags>
  </entry>
  <entry>
    <title>(SQL Server) CTE RECURSIVE (遞迴)製作月曆</title>
    <url>/cte-recursive/</url>
    <content><![CDATA[<p>如果要製作月報…但只有給起訖日</p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/%E4%B9%9D%E6%A1%83/5cb059bd-5868-490a-a5fc-3b8f69aec405/1521377514_65506.PNG" alt="pic"></p>
<p>要產生出如下的列表 要怎麼辦…</p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/九桃/5cb059bd-5868-490a-a5fc-3b8f69aec405/1521377621_11696.PNG" alt="pic"></p>
<p>第一個想到的解法 會使用 <code>WHILE  +  [暫存表]</code>迴圈遍歷 把每個月新增入暫存表中</p>
<p>程式碼如下:</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span>  @t <span class="keyword">TABLE</span></span><br><span class="line">(</span><br><span class="line">    StartDate DATETIME,</span><br><span class="line">	EndDate DATETIME</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> @t</span><br><span class="line">        ( StartDate, EndDate )</span><br><span class="line"><span class="keyword">VALUES</span>  ( <span class="string">'2017/01/01'</span>, <span class="comment">-- StartDate - datetime</span></span><br><span class="line">          <span class="string">'2018/01/01'</span>  <span class="comment">-- EndDate - datetime</span></span><br><span class="line">          );</span><br><span class="line"></span><br><span class="line"><span class="comment">--宣告一個起始時間變數</span></span><br><span class="line"><span class="keyword">DECLARE</span> @TempStartDate DATETIME</span><br><span class="line"><span class="keyword">DECLARE</span> @TempEndDate DATETIME</span><br><span class="line"></span><br><span class="line"><span class="comment">--設置變數 最小時間(起始時間)  和 最大時間</span></span><br><span class="line"><span class="keyword">SELECT</span> @TempStartDate = StartDate,@TempEndDate=EndDate </span><br><span class="line"><span class="keyword">FROM</span> @t</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="comment">#TEMP(Dates DATETIME)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WHILE</span>(@TempStartDate &lt; @TempEndDate)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">     <span class="comment">--將資料新增入暫存表</span></span><br><span class="line">     <span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="comment">#TEMP (Dates) VALUES (@TempStartDate)</span></span><br><span class="line">     <span class="comment">--每跑一次迴圈就加一個月</span></span><br><span class="line">	 <span class="keyword">SELECT</span> @TempStartDate = <span class="keyword">DATEADD</span>(<span class="keyword">MONTH</span>,<span class="number">1</span>,@TempStartDate)</span><br><span class="line"><span class="keyword">END</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="comment">#TEMP</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="comment">#TEMP</span></span><br></pre></td></tr></table></figure></div>
<p>但這個解法雖然簡單..但程式碼又臭又長..</p>
<p><strong>Q: 有沒有更好看的解法又可達成目的呢?</strong></p>
<p><strong>ANS: 有!! 就是本次主角 CTE 遞迴</strong></p>
<p>話不多說先貼上程式碼</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span>  @t <span class="keyword">TABLE</span></span><br><span class="line">(</span><br><span class="line">    StartDate DATETIME,</span><br><span class="line">	EndDate DATETIME</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span>  <span class="keyword">INTO</span>  @t</span><br><span class="line">        ( StartDate, EndDate )</span><br><span class="line"><span class="keyword">VALUES</span>  ( <span class="string">'2017/01/01'</span>, <span class="comment">-- StartDate - datetime</span></span><br><span class="line">          <span class="string">'2018/01/01'</span>  <span class="comment">-- EndDate - datetime</span></span><br><span class="line">          );</span><br><span class="line"></span><br><span class="line">;<span class="keyword">WITH</span> CTE (Dates,EndDate) <span class="keyword">AS</span></span><br><span class="line">(</span><br><span class="line">	<span class="keyword">SELECT</span> StartDate <span class="keyword">AS</span> Dates,EndDate <span class="keyword">AS</span> EndDate</span><br><span class="line">	<span class="keyword">FROM</span> @t</span><br><span class="line">	<span class="keyword">UNION</span> <span class="keyword">ALL</span> <span class="comment">--注意這邊使用 UNION ALL</span></span><br><span class="line">	<span class="keyword">SELECT</span> <span class="keyword">DATEADD</span>(<span class="keyword">MONTH</span>,<span class="number">1</span>,Dates),EndDate</span><br><span class="line">	<span class="keyword">FROM</span> CTE </span><br><span class="line">	<span class="keyword">WHERE</span> <span class="keyword">DATEADD</span>(<span class="keyword">MONTH</span>,<span class="number">1</span>,Dates) &lt; EndDate <span class="comment">--判斷是否目前遞迴月份小於結束日期</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> CTE.Dates</span><br><span class="line"><span class="keyword">FROM</span> CTE</span><br></pre></td></tr></table></figure></div>
<p>接下來解說 CTE遞迴原理 :</p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/九桃/5cb059bd-5868-490a-a5fc-3b8f69aec405/1521379674_85716.PNG" alt="PIC"></p>
<p>可看到CTE中最主要執行四個步驟</p>
<ol>
<li>取得初始結果集並(錨點結果集) T(0)</li>
<li>將T(0)結果集進行判斷是否滿足 DATEADD(MONTH,1,Dates) &lt; EndDate 不滿足繼續走,並產生T(1)結果集,依照此結果集繼續往下執行</li>
<li>在執行上面的2步驟 直到滿足條件 T(0),T(1)…..T(n)</li>
<li>傳回結果集。將之前所有產生結果集 UNION ALL。</li>
</ol>
<p><strong><code>使用CTE遞迴必須使用UNION ALL</code></strong></p>
<p>最後CTE結果集就會呈現如下^^<br><img src="https://dotblogsfile.blob.core.windows.net/user/九桃/5cb059bd-5868-490a-a5fc-3b8f69aec405/1521377621_11696.PNG" alt="https://dotblogsfile.blob.core.windows.net/user/九桃/5cb059bd-5868-490a-a5fc-3b8f69aec405/1521377621_11696.PNG"></p>
<p><strong>補充 oracle解法</strong></p>
<p>同場加映!! </p>
<p>如果使用 <em>oracle</em> 可使用 <strong><code>connect by</code></strong> 很簡便取得日曆</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> T</span><br><span class="line">(</span><br><span class="line">    StartDate <span class="built_in">DATE</span>,</span><br><span class="line">	EndDate <span class="built_in">DATE</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> T( StartDate, EndDate ) <span class="keyword">VALUES</span>  (<span class="built_in">date</span> <span class="string">'2017-01-01'</span>,<span class="built_in">date</span> <span class="string">'2018-01-01'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> add_months(trunc(StartDate,<span class="string">'mm'</span>),<span class="keyword">level</span> - <span class="number">1</span> ) <span class="string">"Date"</span></span><br><span class="line">   <span class="keyword">from</span> T </span><br><span class="line"><span class="keyword">connect</span> <span class="keyword">by</span> trunc(EndDate,<span class="string">'mm'</span>) &gt;= add_months(trunc(StartDate,<span class="string">'mm'</span>),<span class="keyword">level</span>)</span><br><span class="line">  <span class="keyword">order</span> <span class="keyword">by</span> <span class="number">1</span></span><br></pre></td></tr></table></figure></div>
<blockquote>
<p><span class="exturl" data-url="aHR0cDovL3NxbGZpZGRsZS5jb20vIyE0Lzc1Y2Q5LzE0" title="http://sqlfiddle.com/#!4/75cd9/14">http://sqlfiddle.com/#!4/75cd9/14<i class="fa fa-external-link"></i></span></p>
</blockquote>
<p><strong>此文作者</strong>：Daniel Shih(石頭)<br><strong>此文地址</strong>： <a href="https://isdaniel.github.io/cte-recursive/">https://isdaniel.github.io/cte-recursive/</a> <br><strong>版權聲明</strong>：本博客所有文章除特別聲明外，均採用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC90dy8=" title="https://creativecommons.org/licenses/by-nc-sa/3.0/tw/">CC BY-NC-SA 3.0 TW<i class="fa fa-external-link"></i></span> 許可協議。轉載請註明出處！</p>
]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>Tsql</tag>
        <tag>MSSql</tag>
        <tag>CTE</tag>
        <tag>UNION ALL</tag>
      </tags>
  </entry>
  <entry>
    <title>Sqlserver不可不知道Heap Table.</title>
    <url>/db-heaptable/</url>
    <content><![CDATA[<h2 id="Heap-資料表"><a href="#Heap-資料表" class="headerlink" title="Heap 資料表"></a>Heap 資料表</h2><p>如果資料表沒有<code>Clustered Index</code>那此表就會是Heap資料表</p>
<p>Heap資料表有個特性是<code>Insert</code>資料快比較快，因為插入資料不需要考慮排序。</p>
<p>適合使用在Log資料表、Event資料表、稽核資料表….一直新增資料，但比較少查詢或更新的表</p>
<blockquote>
<p>一般來說Heap資料表很少見,因為都會建議每張表都要有Clustered Index.</p>
</blockquote>
<p>另外Heap資料表Data Page沒有像其他B+Tree Index有對於左右Page連結Reference.</p>
<h3 id="Heap資料表中不得不知-forwarding-pointer"><a href="#Heap資料表中不得不知-forwarding-pointer" class="headerlink" title="Heap資料表中不得不知(forwarding pointer)"></a>Heap資料表中不得不知(forwarding pointer)</h3><p>假如在Heap資料表更新欄位資料，就可能會造成<code>forwarding pointer</code>如果你資料表有許多<code>forwarding pointer</code>可能就要考慮是否要優化調整….</p>
<blockquote>
<p>forwarding pointer會造成Logic read增加,因為在Heap讀取資料使用<code>Allocation scan</code>(依照儲存page順序讀取資料,讀到page有forwarding pointer就會多讀取資料頁)</p>
</blockquote>
<p><code>forwarding pointer</code>是因為原本<code>Page</code>(8KB)塞不下更新後資料就會先把資料搬到另一個新建立<code>Page</code>上並在原本<code>Page</code>建立一個類似指標東西指向它.</p>
<blockquote>
<p><code>forwarding pointer</code>指標會存在原本的Page大小是16 byte</p>
</blockquote>
<p>簡單來說就是更新後資料後發現原本<code>Page</code>塞不下更新後資料就會先把資料搬到另一個新建立<code>Page</code>上並在原本<code>Page</code>建立一個類似指標東西指向它.</p>
<blockquote>
<p>這個指標會存在原本的Page大小是16 byte</p>
</blockquote>
<p><code>forwarding pointer</code> Page產生和概念如下圖</p>
<p><img src="https://i.imgur.com/5drfCFZ.png" alt></p>
<p>讀取<code>forwarding pointer</code>執行動作如下圖所示</p>
<p>假如我們有一個Scan的需求</p>
<ol>
<li>讀取要讀<code>Page1</code>發現有些資料在其他(<code>Page2</code>,<code>Page3</code>)</li>
<li>所以到<code>forwarding pointer</code> (<code>Page2</code>,<code>Page3</code>)搜索資料</li>
<li>搜尋完<code>Page1</code>接者搜尋<code>Page2</code>,<code>Page3</code></li>
</ol>
<p><img src="https://i.imgur.com/HT0bui0.png" alt></p>
<p>上面因為Page1資料<code>forwarding pointer</code>到其他Page導致Scan資料時多了2個page read,如果<code>forwarding pointer</code>數量一多對於讀的效能可想而知….</p>
<h3 id="IAM-index-allocation-map"><a href="#IAM-index-allocation-map" class="headerlink" title="IAM(index allocation map)"></a>IAM(index allocation map)</h3><p>當Heap要搜尋資料<code>SQL-Server</code>透過IAM(index allocation map)去尋要掃描Page範圍，因為<code>IAM</code>會以範圍存在於檔案中的順序來表示它們，這代表循序的堆積掃描都將依檔案順序進行。</p>
<blockquote>
<p>表示 IAM 掃描順序Heap中資料Row通常不會依插入順序傳回。</p>
</blockquote>
<p>IAM Page在讀取資料的示意圖如下，可以看到讀取Page中資料順序和新增資料順序不一樣.</p>
<blockquote>
<p>因為透過IAM Page搜索資料是在做<strong>Allocation order scan</strong>,這也是為什麼Heap資料表和使用<code>With NOLOCK</code>查詢資料時,如果沒有使用<code>ORDER BY</code>順序會不如預期</p>
</blockquote>
<p><img src="https://i.imgur.com/Qw8Kx1q.png" alt></p>
<h3 id="Allocation-order-scan-amp-Range-scan"><a href="#Allocation-order-scan-amp-Range-scan" class="headerlink" title="Allocation order scan &amp; Range scan"></a>Allocation order scan &amp; Range scan</h3><p>在sqlserver底層有隱藏兩種Scan方式</p>
<ul>
<li>Allocation order scan: 使用with(nolock) or 查詢Heap table 使用(IAM)找尋Page和Extents</li>
</ul>
<blockquote>
<p>With(Nolock)可能會遇到Dirty Read意思是讀取重覆兩筆資料,原因Nolock是sch-S lock + Allocation scan一開始讀去到資料A,讀完同時有人更新資料且資料大小大於8K造成page split,因為Allocation scan會依照(IAM)存取順序讀取,就造成資料重複讀取.</p>
</blockquote>
<ul>
<li>Range scan(b-tree scan): 沒使用(IAM),靠著Clustered Index or NonClustered Index來查找資料.</li>
</ul>
<h2 id="GAM-amp-SGAM"><a href="#GAM-amp-SGAM" class="headerlink" title="GAM &amp; SGAM"></a>GAM &amp; SGAM</h2><p>GAM和SGAM Page可以讓SqlServer管理Page更有效率.</p>
<p>SQL-Server會依照Mixed或Uniforms來分配Extent使用(1個Extent可以管理8個page)</p>
<p>SQL Server 有兩種Allocate extend的方法，而SGAM /GAM Page就是用來計錄File中每<br>個Extent的使用方法及狀況,SQL Server在藉此決定資料要落地的extent位置</p>
<ul>
<li><p>GAM(Global Allocation Map):計錄哪些Extent尚未配置，會存放一個bit值對應到一個extent，如果是1就是extent not allocated。</p>
</li>
<li><p>SGAM(Shared Global Allocation Map):計錄Extent是Mixed extent且還有Free space，會存放一個bit值對應到一個extent，如果是1代表</p>
</li>
</ul>
<p><img src="https://i.imgur.com/m4tTh7z.png" alt></p>
<p>一個GAM page可以存64K Extend使用資訊,所以一個GAM Extent可以存放4GB資料Extent資訊</p>
<blockquote>
<p>64k <em> 8k(page size) </em> 8 (page count)  ~= 4GB</p>
</blockquote>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>今天對於Heap資料表有比較多深入探討,也對於Allocation order scan &amp; Range scan做了些介紹</p>
<blockquote>
<p>之前有跟大家說小心使用(WITH NOLOCK),就是因為With Nolock使用Allocation order scan,在高併發系統很有機會遇到Dirty Read會造成資料不如預期.</p>
</blockquote>
<p>所以<code>WITH NOLOCK</code>要慎用,特別是交易系統就不要用<code>WITH NOLOCK</code>太害人了….</p>
<p>日後有空我會再跟大家分享Page底層的一些細節,如果要學會效能調教這些資料庫原理的事物必須學會.</p>
<p>雖然可能有些深澀但學成一定會有所幫助.</p>
<p><strong>此文作者</strong>：Daniel Shih(石頭)<br><strong>此文地址</strong>： <a href="https://isdaniel.github.io/db-heaptable/">https://isdaniel.github.io/db-heaptable/</a> <br><strong>版權聲明</strong>：本博客所有文章除特別聲明外，均採用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC90dy8=" title="https://creativecommons.org/licenses/by-nc-sa/3.0/tw/">CC BY-NC-SA 3.0 TW<i class="fa fa-external-link"></i></span> 許可協議。轉載請註明出處！</p>
]]></content>
      <categories>
        <category>Sql-server</category>
      </categories>
      <tags>
        <tag>Sql-server</tag>
        <tag>DataBase</tag>
        <tag>table</tag>
      </tags>
  </entry>
  <entry>
    <title>高併發系統系列-不得不了解的Isolation Level(by 錢包被扣到變負值)</title>
    <url>/db-isolation/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>假如我跟你說下面語法在高併發系統，UserId = 101餘額會扣到變負值你們知道問題出在哪裡嗎？</p>
<p>本篇會跟大家解析問題所在(DB Isolation重要性)</p>
<h2 id="建立樣本資料-amp-問題解釋"><a href="#建立樣本資料-amp-問題解釋" class="headerlink" title="建立樣本資料 &amp; 問題解釋"></a>建立樣本資料 &amp; 問題解釋</h2><p>我建立一個資料表<code>UserAccount</code>並建立一個PK在<code>UserID</code>欄位上，裡面Patch一筆資料Userid = 101餘額有100元</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> dbo.UserAccount(</span><br><span class="line">	UserID <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">	Balance <span class="built_in">DECIMAL</span> <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">	PRIMARY <span class="keyword">KEY</span> (</span><br><span class="line">		UserID</span><br><span class="line">	)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dbo.UserAccount <span class="keyword">VALUES</span> (<span class="number">101</span>,<span class="number">100</span>);</span><br></pre></td></tr></table></figure></div>
<p>執行扣款有bug版腳本</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span> TRAN</span><br><span class="line">	<span class="keyword">DECLARE</span> @UserID <span class="built_in">INT</span> = <span class="number">101</span>,</span><br><span class="line">			@Balance <span class="built_in">DECIMAL</span>(<span class="number">18</span>,<span class="number">4</span>) = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">IF</span> <span class="keyword">EXISTS</span>(</span><br><span class="line">		<span class="keyword">SELECT</span> <span class="number">1</span></span><br><span class="line">		<span class="keyword">FROM</span> dbo.UserAccount</span><br><span class="line">		<span class="keyword">WHERE</span> UserID = @UserID</span><br><span class="line">			  <span class="keyword">AND</span> Balance &gt;= @Balance </span><br><span class="line">	)</span><br><span class="line">	<span class="keyword">BEGIN</span></span><br><span class="line">		<span class="keyword">UPDATE</span> dbo.UserAccount</span><br><span class="line">		<span class="keyword">SET</span> Balance = Balance - @Balance</span><br><span class="line">		<span class="keyword">WHERE</span> UserID = @UserID</span><br><span class="line">	<span class="keyword">END</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COMMIT</span> TRAN</span><br></pre></td></tr></table></figure></div>
<p>明明上面有使用Transatcion但為什麼還是會扣成負值?</p>
<h3 id="壓力測試數值介紹-amp-問題重現"><a href="#壓力測試數值介紹-amp-問題重現" class="headerlink" title="壓力測試數值介紹 &amp; 問題重現"></a>壓力測試數值介紹 &amp; 問題重現</h3><p>壓力測試我使用SqlQueryStress，工具使用相關介紹可以參考<a href="https://isdaniel.github.io/sqlquerystress-intro/">資料庫壓測好工具-SQLQueryStress</a></p>
<p>測試使用下面數值</p>
<ul>
<li>Thread:100</li>
<li>Iterator:10</li>
</ul>
<p><img src="https://i.imgur.com/wpbx538.png" alt></p>
<p>執行畫面如上圖</p>
<p>執行完畢後我們在查詢此表</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span>  dbo.UserAccount</span><br></pre></td></tr></table></figure></div>
<p><img src="https://i.imgur.com/Md6RyOY.png" alt></p>
<p>發現數值被扣到-70!!</p>
<p>明明我有判斷<code>Balance &gt;= @Balance</code>確定有餘額才扣款為什麼會變成負值而不是0元?</p>
<h2 id="Isolation-Level-介紹"><a href="#Isolation-Level-介紹" class="headerlink" title="Isolation Level 介紹"></a>Isolation Level 介紹</h2><p>此次問題要解釋必須先了解DB的Isolation Level</p>
<p>交易隔離有分四種</p>
<ul>
<li>Read UnCommited: 大家常見的<strong>NOLOCK</strong> hint(髒讀取)，但並不是真的沒有Lock(會放Sch-S Lock),主要是避免在髒讀取時有人對Schema異動或修改<ul>
<li>ex: (NOLOCK)hint</li>
</ul>
</li>
<li>Read Commited: SELECT查詢已經Commit資料，在Transaction中SELECT完畢當下就會釋放掉查詢Shared Lock，Shared Lock不會保留到交易結束.</li>
<li>Repeatable Read: Repeatable Read跟Read Commited最大差異是，Repeatable Read會把<strong>Shared Lock</strong>保留到交易結束</li>
<li>Serializable Read: <strong>Shared Lock</strong>查詢條件<strong>範圍</strong>都鎖住並保留到最後(Transaction結束)<ul>
<li>ex: (Hold Lock) hint</li>
</ul>
</li>
<li>Snapshot<ul>
<li>Snapshot:在交易中讀取old version資料,就算此物件在執行中已經被commit tran</li>
<li>Read Committed Snapshot Isolation(RCSI):在交易中讀取old version資料,但如果後續讀取物件(已經被更新且commit tran)就會使用新資料(可能造成Non-repeatable )<blockquote>
<p>(RCSI)可以使用<code>ReadCommittedLock</code>避免Non-repeatable,假如同時有其他Session在<br>參考資料: <span class="exturl" data-url="aHR0cHM6Ly9kb3RibG9ncy5jb20udHcvc3RhbmxleTE0LzIwMTcvMTIvMTMvcmNzaV92c19zbmFwc2hvdGlzb2xhdGlvbg==" title="https://dotblogs.com.tw/stanley14/2017/12/13/rcsi_vs_snapshotisolation">https://dotblogs.com.tw/stanley14/2017/12/13/rcsi_vs_snapshotisolation<i class="fa fa-external-link"></i></span></p>
</blockquote>
</li>
</ul>
</li>
</ul>
<p>SqlServer預設使用<code>Read Commited</code>，<code>Read Commited</code>有一個特色是Shared Lock不會保留到交易結束.</p>
<p>所以假如在高併發系統中，很有可能會有多個connetion通過檢核在扣款那邊blocking，所以就導致檢核餘額大小失效.</p>
<h2 id="解決問題"><a href="#解決問題" class="headerlink" title="解決問題"></a>解決問題</h2><p>因為我知道<code>UserID</code>是唯一值且當作查詢條件，所以我可以在<code>EXISTS</code>查詢時使用<code>XLOCK</code> hint.</p>
<blockquote>
<p>因為shared lock和Xlock互斥</p>
</blockquote>
<p>所以blocking位置會從原本<code>UPDATE dbo.UserAccount</code>轉移到<code>SELECT 1 FROM dbo.UserAccount WITH(ROWLOCK,XLOCK) WHERE UserID = @UserID</code>上面就可以保證判斷條件的connection一瞬間只有一個.</p>
<p>所以這個解法是使用<strong>提高lock層級</strong>並放在<strong>對的位置</strong>來解決shared lock之間不互斥問題.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> NOCOUNT <span class="keyword">ON</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">BEGIN</span> TRAN</span><br><span class="line">	<span class="keyword">DECLARE</span> @UserID <span class="built_in">INT</span> = <span class="number">101</span>,</span><br><span class="line">			@Balance <span class="built_in">DECIMAL</span>(<span class="number">18</span>,<span class="number">4</span>) = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">IF</span> <span class="keyword">EXISTS</span>(</span><br><span class="line">		<span class="keyword">SELECT</span> <span class="number">1</span></span><br><span class="line">		<span class="keyword">FROM</span> dbo.UserAccount <span class="keyword">WITH</span>(ROWLOCK,XLOCK)</span><br><span class="line">		<span class="keyword">WHERE</span> UserID = @UserID</span><br><span class="line">			  <span class="keyword">AND</span> Balance &gt;= @Balance </span><br><span class="line">	)</span><br><span class="line">	<span class="keyword">BEGIN</span></span><br><span class="line">		<span class="keyword">UPDATE</span> dbo.UserAccount</span><br><span class="line">		<span class="keyword">SET</span> Balance = Balance - @Balance</span><br><span class="line">		<span class="keyword">WHERE</span> UserID = @UserID</span><br><span class="line">	<span class="keyword">END</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COMMIT</span> TRAN</span><br></pre></td></tr></table></figure></div>
<p>我們在查詢<code>UserAccount</code>資料表發現用同樣的Thread和Iterator(甚至更多)來壓測Balance不會變成負值.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> dbo.UserAccount</span><br></pre></td></tr></table></figure></div>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>本文章希望透過一個小例子跟大家分享DB Isolation Level重要性，在高併發系統中Isolation尤為重要，調整範圍大小需要對於系統有一定了解（調整太大會降低系統吞吐量,Level不足<br>會早成Data Racing甚至是Racing Condition）.</p>
<p>如果是小型系統遇到此問題機率就很低，但對於中大型系統這個問題不得不重視．</p>
<p><strong>此文作者</strong>：Daniel Shih(石頭)<br><strong>此文地址</strong>： <a href="https://isdaniel.github.io/db-isolation/">https://isdaniel.github.io/db-isolation/</a> <br><strong>版權聲明</strong>：本博客所有文章除特別聲明外，均採用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC90dy8=" title="https://creativecommons.org/licenses/by-nc-sa/3.0/tw/">CC BY-NC-SA 3.0 TW<i class="fa fa-external-link"></i></span> 許可協議。轉載請註明出處！</p>
]]></content>
      <categories>
        <category>DB</category>
        <category>sql-server</category>
        <category>Isolation</category>
        <category>Racing Condition</category>
      </categories>
      <tags>
        <tag>DB</tag>
        <tag>Isolation</tag>
      </tags>
  </entry>
  <entry>
    <title>資料庫索引深入淺出(一)</title>
    <url>/dbindex-1/</url>
    <content><![CDATA[<h2 id="前文"><a href="#前文" class="headerlink" title="前文"></a>前文</h2><p><code>Index</code>第一個欄位至關重要它會影響資料<strong>統計值</strong>結果，<code>Index</code>一般建立在查詢條件的欄位</p>
<blockquote>
<p>每個<code>Index</code>都擁有自己的<code>B+ tree</code>.</p>
</blockquote>
<h2 id="Index使用的資料結構-B-tree"><a href="#Index使用的資料結構-B-tree" class="headerlink" title="Index使用的資料結構(B+ tree)"></a>Index使用的資料結構(B+ tree)</h2><p><code>B+ tree</code>是一種資料結構這個資料結構被<code>Index</code>拿來使用，關於<code>B+ tree</code>網路上有很多資源可再自行尋找，所以我們來談談為什麼<code>DataBase</code>會使用<code>B+ tree</code></p>
<p>在<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvQiUyQiVFNiVBMCU5MQ==" title="https://zh.wikipedia.org/wiki/B%2B%E6%A0%91">Wiki<i class="fa fa-external-link"></i></span>講述<code>B+ tree</code>有其中一段</p>
<blockquote>
<p><code>B+ tree</code>是能夠保持資料穩定有序，其插入與修改擁有較穩定的對數時間複雜度。<code>B+ tree</code>元素由下而上插入，通過最大化在每個內部節點內的子節點的數目減少樹的高度，平衡操作不經常發生，而且效率增加了。這種價值得以確立通常需要每個節點在次級儲存中占據完整的磁碟塊或近似的大小。</p>
</blockquote>
<p>簡白來說<code>B+ tree</code>有一個特性是他會把資料存在子頁(Leaf Page)中透過一個參考把每個子頁串聯起來，提高穩定度.</p>
<p><code>B+ tree</code>資料結構如下圖，這個資料結在在範圍查詢時較<code>B tree</code>來的更穩定</p>
<p><img src="https://i.imgur.com/8CDe0Ms.png" alt></p>
<p>Index真正在使用<code>B+ tree</code>儲存類似於下圖</p>
<p>此圖來自(Pro SQL Server Internals, 2nd edition)</p>
<p><img src="https://i.imgur.com/FnQlBUl.png" alt></p>
<h2 id="Index優缺點"><a href="#Index優缺點" class="headerlink" title="Index優缺點"></a>Index優缺點</h2><p><code>Index</code>可以加快查詢速度，因為<code>Index</code>是以<strong>空間</strong>換取<strong>時間</strong>。</p>
<p>基本上它使用的資源如下:</p>
<ol>
<li>每個<code>Index</code>都會建立一顆<code>b+ tree</code></li>
<li>每次新增、更新資料時都會異動到有使用的<code>b+ tree</code></li>
</ol>
<blockquote>
<p>所以當你<code>Index</code>越多時，你需要維護的<code>Index</code>越多(代表需要更多資源來維護)</p>
</blockquote>
<p>建立太多<code>Index</code>，小心降低(新增、更新)效率</p>
<blockquote>
<p>因為SQLServer會對於這次新增、更新使用<code>Index</code>做異動</p>
</blockquote>
<p>下面有一個<code>T98</code>資料表擁有兩個Index</p>
<ul>
<li><code>CIX_T98</code> Clustered Index</li>
<li><code>IX_T98</code> Convering Index</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">IF EXISTS(</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">FROM</span> sys.tables</span><br><span class="line">    <span class="keyword">WHERE</span> <span class="keyword">name</span> = <span class="string">'T98'</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> T98(</span><br><span class="line">        <span class="keyword">ID</span> <span class="built_in">int</span>,</span><br><span class="line">        COL1 <span class="built_in">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">        COL2 <span class="built_in">VARCHAR</span>(<span class="number">50</span>)</span><br><span class="line">    )</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> T98 <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="string">'Hello'</span>,<span class="string">'Hello1'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> CLUSTERED  <span class="keyword">INDEX</span> CIX_T98 <span class="keyword">ON</span> T98(</span><br><span class="line">    <span class="keyword">ID</span> </span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> IX_T98 <span class="keyword">ON</span> T98(</span><br><span class="line">    <span class="keyword">ID</span> </span><br><span class="line">) <span class="keyword">INCLUDE</span> (COL1)</span><br></pre></td></tr></table></figure></div>
<p>當我們要執行更新<code>COL1</code>欄位時(打開執行計畫)</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> T98</span><br><span class="line"><span class="keyword">SET</span> COL1 = <span class="string">'Test1'</span></span><br></pre></td></tr></table></figure></div>
<p>可以發現此次更新,我們會對於這兩個Index異動</p>
<ul>
<li><code>CIX_T98</code> Clustered Index</li>
<li><code>IX_T98</code> Convering Index</li>
</ul>
<p><img src="https://i.imgur.com/XrVqq2q.png" alt></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> T98</span><br><span class="line"><span class="keyword">SET</span> COL1 = <span class="string">'Test1'</span></span><br></pre></td></tr></table></figure></div>
<p>但當我只更新<code>COL2</code>時,只會異動<code>CIX_T98</code> Index</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> T98</span><br><span class="line"><span class="keyword">SET</span> COL2 = <span class="string">'Test1'</span></span><br></pre></td></tr></table></figure></div>
<p><img src="https://i.imgur.com/iDZPu76.png" alt></p>
<p>這是為什麼?</p>
<blockquote>
<p>因為<code>IX_T98</code> Index <code>B+ Tree</code>沒有包含<code>COL2</code>欄位相關資訊,所以不需要更新</p>
</blockquote>
<h2 id="Clustered-Index-叢集索引"><a href="#Clustered-Index-叢集索引" class="headerlink" title="Clustered Index(叢集索引)"></a>Clustered Index(叢集索引)</h2><p>每個資料表只能有一個<code>Clustered index</code>，資料表會依照<code>Clustered index</code>方式存放排列資料，<code>Clustered Index</code>會把資料放置在<code>Left</code>子頁層</p>
<blockquote>
<p><code>Cluster index</code>好比書籍頁碼目錄。每本書只能有一個目錄</p>
</blockquote>
<p>建立<code>Clustered Index</code>欄位有幾個重點</p>
<ol>
<li>常用於查詢欄位</li>
<li>可識別度高(唯一性較高)</li>
</ol>
<h2 id="NonClustered-Index-非叢集索引"><a href="#NonClustered-Index-非叢集索引" class="headerlink" title="NonClustered Index(非叢集索引)"></a>NonClustered Index(非叢集索引)</h2><p>每個資料表能有許多<code>NonClustered Index</code>，像每本書可以有很多種附錄</p>
<ol>
<li>例如依照字母排序</li>
<li>依照附錄A</li>
<li>附錄B</li>
</ol>
<blockquote>
<p><code>NonClustered Index</code>按照<code>Key Column</code>排序，</p>
</blockquote>
<p><code>NonClustered Index</code>(index page)上所有分葉節點存放指標，如果資料表已存在<code>Clustered Index</code>(<code>KeyID</code>)，那麼該指標將會指<code>Clustered Index</code>，如不存在將指向資料真實存放位置(<code>RID</code>)</p>
<blockquote>
<p>this is a very important point to remember. Nonclustered indexes do not store information about physical row location when a table has a clustered index. They store the value of the clustered index key instead.</p>
</blockquote>
<p>上面簡單來說如果<code>NonClustered Index</code>沒有包含所有要查詢欄位</p>
<ol>
<li>有<code>Clustered Index</code>，會執行<code>Key Lookup</code></li>
<li>沒有<code>Clustered Index</code>，會執行<code>RID Lookup</code></li>
</ol>
<blockquote>
<p>這裡的<code>RID</code>是指向真實資料位子<code>RowID</code></p>
</blockquote>
<blockquote>
<p>如果Nonclustered index可以建立Unique盡量宣告成Unique,因為Leaf page就可以減少製造Unique的<code>Row-id</code>欄位,減少儲存空間.</p>
</blockquote>
<h3 id="RID-Lookup"><a href="#RID-Lookup" class="headerlink" title="RID Lookup"></a>RID Lookup</h3><p>資料表沒有<code>Clustered Index</code>且使用<code>Index</code>所有查詢欄位不包含在<code>Converting Index</code>中就會透過<code>RID Lookup</code>查找確切Page上的Row(藉由<code>Row-Id</code>)</p>
<blockquote>
<p>RID Key的大小8 byte</p>
</blockquote>
<p><code>lookup</code>會消耗<code>Disk I/O</code>，所以消耗成本相對會比較大.</p>
<blockquote>
<p>沒有<code>Clustered Index</code>的資料表我們稱為<code>Heap</code>資料表</p>
</blockquote>
<h3 id="Key-Lookup"><a href="#Key-Lookup" class="headerlink" title="Key Lookup"></a>Key Lookup</h3><p><code>NonClustered Index</code>中會存放此Row在<code>Clustered Index</code>相對位置，假如單單靠搜尋<code>Non-Clustered Index</code>沒有辦法滿足所有查詢需要資料就會去<code>Key Lookup</code>(by Clustered key)回找<code>Clustered Index</code>取出相對應的資料.</p>
<h2 id="範例演示"><a href="#範例演示" class="headerlink" title="範例演示"></a>範例演示</h2><p>我們先準備10000筆樣本資料</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> T(</span><br><span class="line">	<span class="keyword">Id</span> <span class="built_in">INT</span> <span class="keyword">identity</span>(<span class="number">1</span>,<span class="number">1</span>),</span><br><span class="line">	UserId <span class="built_in">INT</span>,</span><br><span class="line">	UserGroup <span class="built_in">INT</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> T (UserId,UserGroup)</span><br><span class="line"><span class="keyword">SELECT</span> TOP <span class="number">10000</span> <span class="number">1.0</span> + <span class="keyword">floor</span>(<span class="number">10000</span> * <span class="keyword">RAND</span>(<span class="keyword">convert</span>(varbinary, newid()))),</span><br><span class="line">	   (<span class="number">1.0</span> + <span class="keyword">floor</span>(<span class="number">10000</span> * <span class="keyword">RAND</span>(<span class="keyword">convert</span>(varbinary, newid())))/<span class="number">1000</span>)+<span class="number">1</span></span><br><span class="line"><span class="keyword">FROM</span> sys.all_columns t1 <span class="keyword">CROSS</span> <span class="keyword">JOIN</span>  sys.all_columns t2</span><br></pre></td></tr></table></figure></div>
<p>建立完資料後我們利用下面條件來查找資料.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> dbo.T</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">10000</span></span><br></pre></td></tr></table></figure></div>
<p>因為沒有建立<code>Index</code>，導致我明明只需要撈取一筆資料,但資料庫卻全表掃描</p>
<p><img src="https://i.imgur.com/J2BctqU.png" alt><br><img src="https://i.imgur.com/37rnlmn.png" alt></p>
<h2 id="建立一個-NonClustered-Index"><a href="#建立一個-NonClustered-Index" class="headerlink" title="建立一個 NonClustered Index"></a>建立一個 NonClustered Index</h2><p>我們在表中建立了一個<code>NonClustered Index</code>，並利用相同查詢語法查詢資料</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> NONCLUSTERED <span class="keyword">INDEX</span> IX_T_Id <span class="keyword">on</span>  dbo.T(</span><br><span class="line">	<span class="keyword">id</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></div>
<p>建立完<code>NonClustered Index</code>後從原本的全表掃描變成<code>RID Lookup</code>和<code>Index Seek</code>，因為<code>NonClustered Index</code>的<code>B+ Tree</code>沒有包含所有需要撈取的資料.所以透過<code>RID</code>回去<code>Heap</code>資料表查找出所需要的欄位</p>
<p><code>RID Lookup</code>在執行計畫中呈現如下圖，</p>
<p><img src="https://i.imgur.com/E6WS5qL.png" alt></p>
<h2 id="建立一個-Clustered-Index"><a href="#建立一個-Clustered-Index" class="headerlink" title="建立一個 Clustered Index"></a>建立一個 Clustered Index</h2><p>我們在<code>T</code>資料表中建立一個<code>Clustered Index</code>，並且執行相同查詢</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> CLUSTERED <span class="keyword">INDEX</span> CIX_T_UserId <span class="keyword">on</span>  dbo.T(</span><br><span class="line">	UserId</span><br><span class="line">)</span><br></pre></td></tr></table></figure></div>
<p>能看到執行計畫的不同了，已經透過<code>Key Lookup</code>回去查找資料，原因是目前資料表已經有<code>Clustered Index</code>但此查詢使用條件使用<code>NonClustered Index</code>所以導致需要<code>Lookup</code>回去<code>Clustered Index</code>的<code>B+ Tree</code>查找資料</p>
<p><img src="https://i.imgur.com/PPTDYcG.png" alt></p>
<p><strong>此文作者</strong>：Daniel Shih(石頭)<br><strong>此文地址</strong>： <a href="https://isdaniel.github.io/dbindex-1/">https://isdaniel.github.io/dbindex-1/</a> <br><strong>版權聲明</strong>：本博客所有文章除特別聲明外，均採用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC90dy8=" title="https://creativecommons.org/licenses/by-nc-sa/3.0/tw/">CC BY-NC-SA 3.0 TW<i class="fa fa-external-link"></i></span> 許可協議。轉載請註明出處！</p>
]]></content>
      <categories>
        <category>DataBase</category>
        <category>Turning</category>
      </categories>
      <tags>
        <tag>DataBase</tag>
        <tag>Turning</tag>
        <tag>sql-server</tag>
        <tag>Index</tag>
      </tags>
  </entry>
  <entry>
    <title>資料庫索引深入淺出(二)</title>
    <url>/dbindex-2/</url>
    <content><![CDATA[<h1 id="Agenda"><a href="#Agenda" class="headerlink" title="Agenda"></a>Agenda<!-- omit in toc --></h1><ul>
<li><a href="#前文">前文</a></li>
<li><a href="#covering-index">Covering Index</a><ul>
<li><a href="#加入include欄位含意">加入INCLUDE欄位含意</a></li>
<li><a href="#案例解說">案例解說</a></li>
</ul>
</li>
<li><a href="#filter-index">Filter Index</a></li>
<li><a href="#filter-index的限制">filter index的限制</a></li>
<li><a href="#index-intersection">Index Intersection</a></li>
<li><a href="#primary-key">Primary Key</a></li>
</ul>
<h2 id="前文"><a href="#前文" class="headerlink" title="前文"></a>前文</h2><p>本系列文章</p>
<ul>
<li><a href="https://isdaniel.github.io/DBIndex-1/">資料庫索引深入淺出(一)</a></li>
<li><a href="https://isdaniel.github.io/DBIndex-2/">資料庫索引深入淺出(二)</a></li>
</ul>
<p>兩種基本索引</p>
<ul>
<li>Clustered Index(叢集索引)</li>
<li>NonClustered Index(非叢集索引)</li>
</ul>
<p>兩種<code>Lookup</code>(如果<code>NonClustered Index</code>無法滿足查詢結果執行)</p>
<ul>
<li>RID Lookup</li>
<li>Key Lookup</li>
</ul>
<p>本篇會介紹其他種類<code>Index</code></p>
<h2 id="Covering-Index"><a href="#Covering-Index" class="headerlink" title="Covering Index"></a>Covering Index</h2><p>我們先來看看<code>Covering Index</code>語法.</p>
<p>最主要使在<code>NONCLUSTERED INDEX</code>後面加上<code>INCLUDE</code>欄位.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> NONCLUSTERED <span class="keyword">INDEX</span> IX_T_Id_Convering <span class="keyword">on</span> dbo.T(</span><br><span class="line">	<span class="keyword">id</span></span><br><span class="line">) <span class="keyword">INCLUDE</span> (</span><br><span class="line">	UserId,</span><br><span class="line">	UserGroup</span><br><span class="line">)</span><br></pre></td></tr></table></figure></div>
<h3 id="加入INCLUDE欄位含意"><a href="#加入INCLUDE欄位含意" class="headerlink" title="加入INCLUDE欄位含意"></a>加入INCLUDE欄位含意</h3><p>在<code>NONCLUSTERED INDEX</code>把<code>Column</code>加入<code>INCLUDE</code>區域後此<code>NONCLUSTERED INDEX</code>會把此欄位資料加入至子頁層.之後如果要查找資料時就不用在<code>Lookup</code>回去</p>
<blockquote>
<p>所以我們可以把<code>Covering Index</code>當作是偽<code>CLUSTERED INDEX</code>.</p>
</blockquote>
<blockquote>
<p>如果每次只需要<code>SELECT</code>少部分欄位且範圍較大又須排序，<code>Covering Index</code>執行效率會比<code>CLUSTERED INDEX</code>來的快.</p>
</blockquote>
<p><code>Covering</code>欄位只會在子頁層儲存資料，並不會在中葉層儲存相關資訊。</p>
<p>儲存方式如下圖會把資料存在子頁層中，並不會把Include資料存在中葉層</p>
<p><img src="https://i.imgur.com/8TvUoRY.png" alt></p>
<p>適合<code>Covering Index</code>很適合用在查出來<code>Column</code>不需要當作<code>Key</code></p>
<h3 id="案例解說"><a href="#案例解說" class="headerlink" title="案例解說"></a>案例解說</h3><p>樣本資料一樣使用上一篇的資料</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> dbo.T</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">10000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> dbo.T <span class="keyword">with</span>(<span class="keyword">index</span>(IX_T_Id))</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">10000</span></span><br></pre></td></tr></table></figure></div>
<p>有兩段語法一段是有使用<code>Hint</code>，執行出來後會有兩個執行計畫.</p>
<blockquote>
<p>第一個執行計畫是上面的語法,第二個執行計畫是下面的語法</p>
</blockquote>
<p><img src="https://i.imgur.com/ivgZPGm.png" alt></p>
<p>建立完<code>Convering Index</code>後我們使用的查詢就會變成只使用<code>Seek</code>，而且在執行成本也大幅降低.</p>
<p>Convering Index有幾個缺點</p>
<ol>
<li>假如在此次update有包含index include columns時,此次修改也會對於Index子頁層進行資料更新，這會增加I/O和Transaction log.</li>
<li>因為會把include columns增加在NonClustered Index子頁層這會增加硬碟儲存Index的額外空間.</li>
</ol>
<p>所以建議只新增有用到的include columns.</p>
<p><code>Covering</code>欄位只會在子頁層儲存資料，並不會在中葉層儲存相關資訊。</p>
<p>儲存方式如下圖會把資料存在子頁層中，並不會把Include資料存在中葉層</p>
<p><img src="https://i.imgur.com/8TvUoRY.png" alt></p>
<h2 id="Filter-Index"><a href="#Filter-Index" class="headerlink" title="Filter Index"></a>Filter Index</h2><p>在SQL-Server 2008之後,支援使用filter index.他可以節省index大小和維護成本</p>
<p><code>Filter Index</code>語法就是在最後寫<code>where</code>條件</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> NONCLUSTERED <span class="keyword">INDEX</span> FIX_T_Id_UserGroup <span class="keyword">on</span>  dbo.T(</span><br><span class="line">	<span class="keyword">id</span></span><br><span class="line">) <span class="keyword">INCLUDE</span> (</span><br><span class="line">	UserId,</span><br><span class="line">	UserGroup</span><br><span class="line">)</span><br><span class="line"><span class="keyword">where</span> UserGroup = <span class="number">8</span></span><br></pre></td></tr></table></figure></div>
<p>上面語法意思是只針對於<code>UserGroup = 8</code>的<code>Row</code>建立資料在子頁層，<code>Filter Index</code>主要是提升維護性和降低<code>Index</code>大小.</p>
<h2 id="filter-index的限制"><a href="#filter-index的限制" class="headerlink" title="filter index的限制"></a>filter index的限制</h2><ol>
<li>filter index只支援<strong>簡單過濾條件</strong>，在<code>where</code>查詢如果有使用到<code>OR</code>、function、計算欄位,可能會讓filter index失效</li>
<li>因為sql-server會cache執行計畫,所以filter index無法在參數化查詢發揮作用</li>
</ol>
<p>關於第二點我們可以看下面查詢,假如我們建立一個fitler index(<code>IDX_Data_Unprocessed_Filtered</code>)因為我們使用參數化查詢所以導致此index無法正常發揮</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> nonclustered <span class="keyword">index</span> IDX_Data_Unprocessed_Filtered</span><br><span class="line"><span class="keyword">on</span> dbo.Data(RecId)</span><br><span class="line"><span class="keyword">include</span>(Processed)</span><br><span class="line"><span class="keyword">where</span> Processed = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> top <span class="number">1000</span> RecId</span><br><span class="line"><span class="keyword">from</span> dbo.Data</span><br><span class="line"><span class="keyword">where</span> Processed = @Processed</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> RecId;</span><br></pre></td></tr></table></figure></div>
<p>所以假如此查詢有使用到filter index請在查詢使用硬變數或是可以使用<code>option(recompile)</code>不讓執行計畫被cache.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> top <span class="number">1000</span> RecId</span><br><span class="line"><span class="keyword">from</span> dbo.Data</span><br><span class="line"><span class="keyword">where</span> Processed = <span class="number">0</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> RecId; </span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> top <span class="number">1000</span> RecId</span><br><span class="line"><span class="keyword">from</span> dbo.Data</span><br><span class="line"><span class="keyword">where</span> Processed = @Processed</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> RecId; </span><br><span class="line">option(recompile)</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>注意:如果有使用到<code>Filter Index</code>的<code>SP</code>或<code>Script</code>，如果沒有加上<code>SET QUOTED_IDENTIFIER ON</code>就會造成錯誤，所以在撰寫<code>Script</code>時要養成加上面語法的好習慣.</p>
</blockquote>
<h2 id="Index-Intersection"><a href="#Index-Intersection" class="headerlink" title="Index Intersection"></a>Index Intersection</h2><p><code>SQL-Server</code>可透過多個<code>Index</code>完成一段查詢(通常選擇子集合較小)在透過<code>JOIN</code>完成查詢</p>
<p>假如我們有兩個一個查詢會用到<code>UserId</code>和<code>Id</code> Column當作條件我們可能會建立下面這個索引.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> CLUSTERED <span class="keyword">INDEX</span> IX_T_UserId_Id <span class="keyword">on</span> dbo.T(</span><br><span class="line">	UserId,</span><br><span class="line">	<span class="keyword">Id</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></div>
<p>但除了同時利用<code>UserId</code>和<code>Id</code> Column當作條件外還可能個別當作查詢條件.</p>
<p>我們就可以考慮把這個<code>Index</code>拆開成兩個，這樣可以提高索引使用率（因為執行計畫透過統計值來產生，而<code>Index</code>統計值計算是由<code>Index</code>第一個Column來當計算）</p>
<blockquote>
<p>注意:把<code>Index</code>拆成兩個或許可以增加查詢效率，但每個<code>Index</code>就是一個<code>B+ Tree</code>,這會造成維護上成本</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> CLUSTERED <span class="keyword">INDEX</span> IX_T_UserId <span class="keyword">on</span> dbo.T(</span><br><span class="line">	UserId</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> CLUSTERED <span class="keyword">INDEX</span> IX_T_Id <span class="keyword">on</span>  dbo.T(</span><br><span class="line">	<span class="keyword">Id</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></div>
<h2 id="Primary-Key"><a href="#Primary-Key" class="headerlink" title="Primary Key"></a>Primary Key</h2><p>在<code>SQL-Server</code>很常使用PRIMARY KEY但你知道他代表甚麼含意嗎?</p>
<p>PRIMARY KEY是也是一個<code>Index</code>，他可以設定<code>NonClustered Index</code>或是<code>Clustered Index</code></p>
<p>PRIMARY KEY有幾個特徵</p>
<ol>
<li>資料不能重複(Unique)</li>
<li>Columns都必須定義成<code>NOT NULL</code></li>
<li>PRIMARY KEY是一個<code>Index</code></li>
</ol>
<blockquote>
<p>預設建立的PRIMARY KEY是<code>Clustered Index</code>，但我們使用語法自行建立為<code>NonClustered Index</code>的PRIMARY KEY</p>
</blockquote>
<p>如下範例我們可以建立一個<code>NONCLUSTERED</code>的PRIMARY KEY</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> T(</span><br><span class="line">    <span class="keyword">ID</span> <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,  </span><br><span class="line">    <span class="keyword">CONSTRAINT</span> [PK_T] PRIMARY <span class="keyword">KEY</span> NONCLUSTERED (</span><br><span class="line">        <span class="keyword">ID</span></span><br><span class="line">    )</span><br><span class="line">)</span><br></pre></td></tr></table></figure></div>
<p><strong>此文作者</strong>：Daniel Shih(石頭)<br><strong>此文地址</strong>： <a href="https://isdaniel.github.io/dbindex-2/">https://isdaniel.github.io/dbindex-2/</a> <br><strong>版權聲明</strong>：本博客所有文章除特別聲明外，均採用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC90dy8=" title="https://creativecommons.org/licenses/by-nc-sa/3.0/tw/">CC BY-NC-SA 3.0 TW<i class="fa fa-external-link"></i></span> 許可協議。轉載請註明出處！</p>
]]></content>
      <categories>
        <category>DataBase</category>
        <category>Turning</category>
      </categories>
      <tags>
        <tag>DataBase</tag>
        <tag>Turning</tag>
        <tag>sql-server</tag>
        <tag>Index</tag>
      </tags>
  </entry>
  <entry>
    <title>淺談SqlServer Lock(一)</title>
    <url>/dblock-1/</url>
    <content><![CDATA[<h1 id="Agenda"><a href="#Agenda" class="headerlink" title="Agenda"></a>Agenda<!-- omit in toc --></h1><ul>
<li><a href="#前文">前文</a></li>
<li><a href="#兩種圍度的lock">兩種圍度的Lock</a><ul>
<li><a href="#lock範圍">Lock範圍</a></li>
<li><a href="#lock類型">Lock類型</a><ul>
<li><a href="#update-lock-存在的意義">Update Lock 存在的意義</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#lock互斥demo">Lock互斥Demo</a><ul>
<li><a href="#nolock的隱憂">NoLock的隱憂</a></li>
</ul>
</li>
<li><a href="#小結">小結</a><h2 id="前文"><a href="#前文" class="headerlink" title="前文"></a>前文</h2></li>
</ul>
<p>之前有跟大家介紹資料庫交易中的<a href="https://isdaniel.github.io/ACID/">ACID</a>,今天我們就來談談常常聽到<strong>Lock</strong></p>
<p>在討論Lock前我們必須先了解,為什麼會有Lock?</p>
<p>假如你的系統能保證只有一個使用著操作每個資源,其實也就不用lock存在,但現實生活中往往有個命令對於同一個資源操作.這時候我們為了確保資料正確性,必須使用lock來避免<span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvUmFjZV9jb25kaXRpb24=" title="https://en.wikipedia.org/wiki/Race_condition">Racing Condition<i class="fa fa-external-link"></i></span>.</p>
<p>在早期系統我們要儲存資料會存放檔案在Disk並使用類似Excel方式來儲存,但這會導致每次讀取只有有一個使用者(因為對於檔案上Lock),被lock資源其他人就無法存入</p>
<h2 id="兩種圍度的Lock"><a href="#兩種圍度的Lock" class="headerlink" title="兩種圍度的Lock"></a>兩種圍度的Lock</h2><p>在<code>Sql-Server</code> Lock有分兩種圍度</p>
<ol>
<li>Lock範圍</li>
<li>Lock類型</li>
</ol>
<h3 id="Lock範圍"><a href="#Lock範圍" class="headerlink" title="Lock範圍"></a>Lock範圍</h3><p><code>Sql-Server</code>支援我們在同一時間能建立不同交易執行命令<br>是因為<code>Sql-Server</code>有許多不一樣力度範圍Lock.</p>
<blockquote>
<p>下表表示鎖範圍等級由上到下越來越大. </p>
</blockquote>
<ul>
<li>Row (•RID) </li>
<li>Key (•KEY) </li>
<li>Page (•PAG) </li>
<li>Extent (•    EXT) </li>
<li>Heap or B-tree (•    HoBT) </li>
<li>Table (•    TAB) </li>
<li>File (•    FIL) </li>
<li>Application (•    APP) </li>
<li>MetaData (•    MDT) </li>
<li>Allocation Unit (•    AU) </li>
<li>Database (•DB)</li>
</ul>
<h3 id="Lock類型"><a href="#Lock類型" class="headerlink" title="Lock類型"></a>Lock類型</h3><p>在SqlServer有許多類型Lock</p>
<ul>
<li>Shared Locks (s)</li>
<li>Update Locks (U)</li>
<li>Exclusive Locks (X)</li>
<li>Intent Locks (I)</li>
<li>Schema Locks (Sch)</li>
<li>Bulk Update Locks (BU)</li>
<li>Key-range</li>
</ul>
<p>下表是Lock類型互斥或相容對應表</p>
<p><img src="https://i.imgur.com/YaBZcaT.png" alt></p>
<p>例如:你在使用查詢(Shared Lock),除了上XLock資源外其餘資料都可同步被查找出來.</p>
<h4 id="Update-Lock-存在的意義"><a href="#Update-Lock-存在的意義" class="headerlink" title="Update Lock 存在的意義"></a>Update Lock 存在的意義</h4><p>我們在更新資料時使用Lock類型會如下</p>
<blockquote>
<p>Shared Lock =&gt; Update Lock =&gt; XLock</p>
</blockquote>
<ul>
<li>Shared Lock:查詢更新的資料.</li>
<li>Update Lock:更新前把資料改成Update Lock.</li>
<li>XLock:確定要更新當下改成XLock.</li>
</ul>
<p>但為什麼會多一個Update Lock呢?</p>
<blockquote>
<p>因為可以避免DeadLock產生機率.</p>
</blockquote>
<p>假如有一個Update語法同時被執行.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Update</span> T</span><br><span class="line"><span class="keyword">Set</span> Val = @Val</span><br><span class="line"><span class="keyword">Where</span> <span class="keyword">id</span> = <span class="number">1</span></span><br></pre></td></tr></table></figure></div>
<p>如果只有Shared Lock =&gt; XLock</p>
<ol>
<li>語法1 產生Shared Lock</li>
<li>語法2 產生Shared Lock</li>
<li>因為Shared Lock 和 XLock 互斥,所以互相等待對方Shared Lock釋放，造成死結(Dead Lock)</li>
</ol>
<p>假如我們多一個ULock會變成</p>
<ol>
<li>語法1 產生Shared Lock</li>
<li>語法2 產生Shared Lock</li>
<li>語法1 產生ULock(釋放Shared Lock)</li>
<li>語法2 想要產生ULock發現語法1已經先產生(ULock)，所以等待語法1執行完畢(Block)</li>
<li>語法1 Update完後產生XLock直到Commit結束才釋放XLock</li>
<li>語法2 產生ULock執行後面更新動作.</li>
</ol>
<blockquote>
<p>Shared Lock執行完查詢後立即釋放資源<br>關鍵在於Shared Lcok不互斥,ULock互斥</p>
</blockquote>
<h2 id="Lock互斥Demo"><a href="#Lock互斥Demo" class="headerlink" title="Lock互斥Demo"></a>Lock互斥Demo</h2><p>我們建立一張<code>T2</code>資料表</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> T2</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> T2 (<span class="keyword">Id</span> <span class="built_in">int</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> T2 <span class="keyword">VALUES</span> (<span class="number">1</span>)</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> T2 <span class="keyword">VALUES</span> (<span class="number">2</span>)</span><br></pre></td></tr></table></figure></div>
<p>在使用Transaction + XLOCK hint在查詢語法(這時T2查詢的資料就會被上XLock了)</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span> TRAN</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * </span><br><span class="line"><span class="keyword">FROM</span> T2 <span class="keyword">WITH</span>(XLOCK) </span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">Id</span> = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">WAITFOR DELAY <span class="string">'00:00:10'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ROLLBACK</span> TRAN</span><br></pre></td></tr></table></figure></div>
<p>我們馬上開另一個Session,執行查詢<code>ID=1</code>語法</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> dbo.T2 </span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">Id</span> = <span class="number">1</span></span><br></pre></td></tr></table></figure></div>
<p>會發現我們需要等上面語法執行完才能查出資料,那是因為我們Shared Lock跟X Lock會互斥我們,必須等到XLock執行完我們才可以得到資料.</p>
<h3 id="NoLock的隱憂"><a href="#NoLock的隱憂" class="headerlink" title="NoLock的隱憂"></a>NoLock的隱憂</h3><p>上文有提到Shard Lock會被XLock給Block住,如果我非得在資料上XLock時查詢資料有辦法嗎?</p>
<p>有,我們在第二句查詢加上<code>With(Nolock)</code>hint或者是(設定<code>SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED</code>)不然Shard Lock會被XLock給Block住.</p>
<blockquote>
<p>但使用<code>With(Nolock)</code> Read Uncommitted要慎用,因為是髒讀取,(Read Uncommitted顧名思義就是讀取未<code>commite</code>資料)</p>
</blockquote>
<h4 id="Read-Uncommitted-髒讀取"><a href="#Read-Uncommitted-髒讀取" class="headerlink" title="Read Uncommitted 髒讀取"></a>Read Uncommitted 髒讀取</h4><p>我們試著把上面範例稍微修改一下第一個查詢語法</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">BEGIN</span> TRAN</span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> dbo.T2</span><br><span class="line"><span class="keyword">Set</span> <span class="keyword">id</span> = <span class="number">100</span></span><br><span class="line"><span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">WAITFOR DELAY <span class="string">'00:00:10'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ROLLBACK</span> TRAN</span><br></pre></td></tr></table></figure></div>
<p>第二個查詢語法</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> dbo.T2 <span class="keyword">with</span>(nolock)</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">Id</span> = <span class="number">100</span></span><br></pre></td></tr></table></figure></div>
<p>在資料上XLock時使用<code>with(nolock)</code>來查詢資料,會發現可以查詢出Id=100資訊</p>
<p><img src="https://i.imgur.com/aMvPo4W.png" alt></p>
<p>但因為第一句語法因為一些原因RollBack,過段時間再查詢</p>
<p><img src="https://i.imgur.com/5BqG419.png" alt></p>
<p>我們會得到空的結果集…那是因為<code>with(nolock)</code>是髒讀取,在查詢時他會直接拿取目前資料最新狀態(這個資料狀態可能不一定,最後結果),假如RollBack就會導致資料錯誤問題.</p>
<blockquote>
<p>有時候NoLock會讀到重複資料<br>所以建議在跟算錢或交易有關程式碼,請別使用<code>with(nolock)</code></p>
</blockquote>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>本篇對於Lock做了基本介紹</p>
<ol>
<li>Lock範圍</li>
<li>Lock類型</li>
</ol>
<p><code>with(nolock)</code>記得要慎用,他會造成資料讀取上有誤差,建議在高併發系統且交易有關程式碼,請別使用<code>with(nolock)</code>,這會造成資料不正確(有資料執行到一半RollBack,剛好被NoLock查詢讀到)</p>
<p>日後有機會再慢慢介紹更多Lock運用時間和注意事項.</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvc3FsL3JlbGF0aW9uYWwtZGF0YWJhc2VzL3NxbC1zZXJ2ZXItdHJhbnNhY3Rpb24tbG9ja2luZy1hbmQtcm93LXZlcnNpb25pbmctZ3VpZGU/dmlldz1zcWwtc2VydmVyLTIwMTc=" title="https://docs.microsoft.com/en-us/sql/relational-databases/sql-server-transaction-locking-and-row-versioning-guide?view=sql-server-2017">Transaction Locking and Row Versioning Guide<i class="fa fa-external-link"></i></span></p>
<p><strong>此文作者</strong>：Daniel Shih(石頭)<br><strong>此文地址</strong>： <a href="https://isdaniel.github.io/dblock-1/">https://isdaniel.github.io/dblock-1/</a> <br><strong>版權聲明</strong>：本博客所有文章除特別聲明外，均採用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC90dy8=" title="https://creativecommons.org/licenses/by-nc-sa/3.0/tw/">CC BY-NC-SA 3.0 TW<i class="fa fa-external-link"></i></span> 許可協議。轉載請註明出處！</p>
]]></content>
      <categories>
        <category>DataBase</category>
        <category>Turning</category>
      </categories>
      <tags>
        <tag>Lock</tag>
        <tag>Sql-server</tag>
        <tag>DataBase</tag>
        <tag>Turning</tag>
      </tags>
  </entry>
  <entry>
    <title>撰寫SQL的建議</title>
    <url>/dbnote/</url>
    <content><![CDATA[<h1 id="Agenda"><a href="#Agenda" class="headerlink" title="Agenda"></a>Agenda<!-- omit in toc --></h1><ul>
<li><a href="#%e5%89%8d%e6%96%87">前文</a></li>
</ul>
<h2 id="前文"><a href="#前文" class="headerlink" title="前文"></a>前文</h2><p>本篇會分享在撰寫SQL時建議和比較分享</p>
<blockquote>
<p>永遠先考慮T-SQL改寫</p>
</blockquote>
<ol>
<li>符合SARG Statement進行撰寫<ul>
<li>&lt;、&gt;、=、&lt;=、&gt;=、LIKE(視%所在位置，前面有%讓DB engine選擇不走INDEX) </li>
</ul>
</li>
<li>不要在<code>Where</code>欄位做運算 </li>
<li>使用<code>ANSI 92</code>相容的Join方式連接資料庫(避免使用舊式<code>Join</code>)</li>
<li>避免row by row操作</li>
</ol>
<blockquote>
<p>符合SARG格式的撰寫 + 適當Index設計可以解決大部分的效能問題</p>
</blockquote>
<h2 id="使用Like查詢建議"><a href="#使用Like查詢建議" class="headerlink" title="使用Like查詢建議"></a>使用Like查詢建議</h2><ul>
<li>盡量別把<code>%</code>放在前面</li>
<li>如果查詢條件是<code>CNAME LIKE &#39;%范&#39;</code>想讓讓查詢走索引(seek 查詢),在後面加一個條件<code>AND CNAME &gt; &#39;&#39;</code>讓查詢走Seek.</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> [<span class="keyword">MID</span>]</span><br><span class="line">      ,[NickName]</span><br><span class="line">      ,[CName]</span><br><span class="line"><span class="keyword">FROM</span> [Member_Basic] <span class="keyword">WITH</span> (NOLOCK)</span><br><span class="line"><span class="keyword">WHERE</span> CNAME <span class="keyword">LIKE</span> <span class="string">'%范'</span> <span class="keyword">AND</span> CNAME &gt; <span class="string">''</span></span><br></pre></td></tr></table></figure></div>
<h2 id="使用Count函數建議"><a href="#使用Count函數建議" class="headerlink" title="使用Count函數建議"></a>使用Count函數建議</h2><p>如果要取得筆數數量使用<code>COUNT(*)</code>比<code>Count(c1)</code>效能好.</p>
<blockquote>
<p><code>Count(c1)</code>會忽略<code>c1 IS NULL</code>數量.</p>
</blockquote>
<blockquote>
<p>另外如果[資料筆數]&gt;2^15-1(大於INT最大值)筆數量可使用<code>count_big(*)</code>方法</p>
</blockquote>
<p>如果需要<code>COUNT</code>資料很大造成效能影響可以透過<code>DMV</code>取得當前資料表數量(資料會不準確,因為並非及時更新)</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SUM</span>(p.rows)</span><br><span class="line"><span class="keyword">FROM</span> sys.partitions p </span><br><span class="line"><span class="keyword">WHERE</span> p.[object_id] = object_id(<span class="string">'dbo.Person'</span>) <span class="keyword">AND</span> p.index_id &lt; <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SUM</span>(p.row_count)</span><br><span class="line"><span class="keyword">FROM</span> sys.dm_db_partition_stats p </span><br><span class="line"><span class="keyword">WHERE</span> p.[object_id] = object_id(<span class="string">'dbo.Person'</span>)  <span class="keyword">AND</span> p.index_id &lt; <span class="number">2</span></span><br></pre></td></tr></table></figure></div>
<p>使用<code>if exists (select 1 from dbo.table)</code>取代<code>count</code>函式判斷資料是否存在</p>
<h2 id="NOT-IN-vs-NOT-EXISTS"><a href="#NOT-IN-vs-NOT-EXISTS" class="headerlink" title="NOT IN vs NOT EXISTS"></a>NOT IN vs NOT EXISTS</h2><p>在查詢時避免使用<code>NOT IN</code>，因為會被QO改寫成 <code>&lt;&gt; NULL</code>，在SQL中<code>NULL</code>代表不知道(Unknow)，所以會什麼都查不到</p>
<ul>
<li>因為此欄位是可空(<code>NULL</code>)時會造成非預期結果(因為<code>NULL</code>會造成判斷失誤<code>NULL</code>不是一個值他代表<strong>未知</strong>)</li>
<li>使用<code>NOT EXISTS</code>替代<code>NOT IN</code></li>
<li><code>NOT EXISTS</code>在<strong>可空欄位</strong>效能比<code>NOT IN</code>還要好(如果有建立<code>Index</code>兩個產生執行計畫理論上是一樣)</li>
</ul>
<p>下面有一個範例來解說為什麼避免在可空欄位使用<code>NOT IN</code></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> T(</span><br><span class="line">    <span class="keyword">ID</span> <span class="built_in">INT</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> T <span class="keyword">VALUES</span> (<span class="number">1</span>)</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> T <span class="keyword">VALUES</span> (<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> dbo.T</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">ID</span> <span class="keyword">NOT</span> <span class="keyword">IN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">ID</span></span><br><span class="line">    <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> <span class="literal">NULL</span> v <span class="keyword">UNION</span> <span class="keyword">ALL</span> <span class="keyword">SELECT</span> <span class="number">1</span>) t1</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> dbo.T </span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">ID</span></span><br><span class="line">    <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> <span class="literal">NULL</span> v <span class="keyword">UNION</span> <span class="keyword">ALL</span> <span class="keyword">SELECT</span> <span class="number">1</span>) t1</span><br><span class="line">    <span class="keyword">WHERE</span> <span class="keyword">ID</span> = v</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">--DROP TABLE T</span></span><br></pre></td></tr></table></figure></div>
<p>上圖可以看到在<code>T</code>資料表中有兩筆資料，如果我們使用<code>NOT IN</code>和<code>NOT EXISTS</code>結果會不一樣，原因是使用<code>NOT IN</code>在判斷<code>NULL</code>時會造成<code>NULL&lt;&gt;</code>任何值,所以就撈不出任何資料，相反使用<code>NOT EXISTS</code>取得的結果就符合我們預期.</p>
<h2 id="避免在Where條件中對欄位進行操作運算"><a href="#避免在Where條件中對欄位進行操作運算" class="headerlink" title="避免在Where條件中對欄位進行操作運算"></a>避免在Where條件中對欄位進行操作運算</h2><h3 id="col-gt-‘’-替代-col-NOT-NULL-AND-lt-gt-‘’"><a href="#col-gt-‘’-替代-col-NOT-NULL-AND-lt-gt-‘’" class="headerlink" title="@col &gt; ‘’ 替代 @col NOT NULL AND &lt;&gt; ‘’"></a>@col &gt; ‘’ 替代 @col NOT NULL AND &lt;&gt; ‘’</h3><p>我們會有一種需求須要判斷此</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> T(</span><br><span class="line">    <span class="keyword">Col</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> T</span><br><span class="line"><span class="keyword">SELECT</span> TOP <span class="number">100000</span> <span class="literal">NULL</span></span><br><span class="line"><span class="keyword">FROM</span> sys.all_columns c1</span><br><span class="line"><span class="keyword">CROSS</span> <span class="keyword">JOIN</span> sys.all_columns c2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> T <span class="keyword">VALUES</span> (<span class="string">'DANIEL'</span>)</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> T <span class="keyword">VALUES</span> (<span class="string">'DANIEL2'</span>)</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> T <span class="keyword">VALUES</span> (<span class="string">''</span>)</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> T <span class="keyword">VALUES</span> (<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">--CREATE INDEX</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> IX_Col <span class="keyword">on</span> dbo.T(</span><br><span class="line">    <span class="keyword">Col</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> dbo.T</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">col</span> &gt; <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> dbo.T</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">col</span> <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">AND</span> <span class="keyword">col</span> &lt;&gt; <span class="string">''</span></span><br><span class="line"><span class="comment">--DROP TABLE T</span></span><br></pre></td></tr></table></figure></div>
<p><strong>此文作者</strong>：Daniel Shih(石頭)<br><strong>此文地址</strong>： <a href="https://isdaniel.github.io/dbnote/">https://isdaniel.github.io/dbnote/</a> <br><strong>版權聲明</strong>：本博客所有文章除特別聲明外，均採用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC90dy8=" title="https://creativecommons.org/licenses/by-nc-sa/3.0/tw/">CC BY-NC-SA 3.0 TW<i class="fa fa-external-link"></i></span> 許可協議。轉載請註明出處！</p>
]]></content>
      <categories>
        <category>DataBase</category>
        <category>Turning</category>
      </categories>
      <tags>
        <tag>DataBase</tag>
        <tag>Turning</tag>
        <tag>sql-server</tag>
      </tags>
  </entry>
  <entry>
    <title>SqlServer資料表深入淺出</title>
    <url>/dbtable/</url>
    <content><![CDATA[<h2 id="前文"><a href="#前文" class="headerlink" title="前文"></a>前文</h2><p>本篇會跟大家對於<code>SQL-Server</code>資料表深入淺出的介紹.</p>
<h2 id="關於子頁層"><a href="#關於子頁層" class="headerlink" title="關於子頁層"></a>關於子頁層</h2><p>資料會存在子頁層中(page),一個<code>Page</code>大小為 8K/Page =&gt; 8092(8060 bytes)</p>
<blockquote>
<p>每個Page除了存取資料還會存放一些<code>MetaData</code>，我們可以先當作是每個Page大小是8K</p>
</blockquote>
<h2 id="Heap資料表"><a href="#Heap資料表" class="headerlink" title="Heap資料表"></a>Heap資料表</h2><p>如果一張資料表沒有<code>Clustered Index</code>就會為Heap資料表，這意味著<code>Heap</code>資料表的資料不會有排序一直把資料新增進資料表中，<code>Heap</code>資料表<code>Insert</code>資料快</p>
<blockquote>
<p>適合使用在Log資料表、Event資料表、稽核資料表….一直新增資料但比較少查詢表</p>
</blockquote>
<h3 id="IAM-index-allocation-map"><a href="#IAM-index-allocation-map" class="headerlink" title="IAM(index allocation map)"></a>IAM(index allocation map)</h3><p>當Heap資料表要搜尋資料<code>SQL-Server</code>透過IAM(index allocation map)去尋要掃描Page範圍，因為IAM會以範圍存在於檔案中的順序來表示它們，這代表循序的堆積掃描都將依檔案順序進行。</p>
<blockquote>
<p>使用IAM分頁設定掃描順序也表示堆積中的資料列通常不會依插入順序傳回</p>
</blockquote>
<p>IAM Page在讀取資料的示意圖</p>
<p>可以看到讀取Page中資料順序和新增資料順序不一樣.</p>
<p><img src="https://i.imgur.com/Qw8Kx1q.png" alt></p>
<h2 id="forwarding-pointer"><a href="#forwarding-pointer" class="headerlink" title="forwarding pointer"></a>forwarding pointer</h2><p>假如在Heap資料表更新欄位資料，就可能會造成<code>forwarding pointer</code></p>
<p>製造<code>forwarding pointer</code>是因為原本<code>Page</code>塞不下更新後資料就會先把資料搬到另一個新建立<code>Page</code>上並在原本<code>Page</code>建立一個類似指標東西指向它.</p>
<blockquote>
<p>這個指標會存在原本的Page大小是16 byte</p>
</blockquote>
<p><img src="https://i.imgur.com/5drfCFZ.png" alt></p>
<h3 id="forwarding-pointer-Demo"><a href="#forwarding-pointer-Demo" class="headerlink" title="forwarding pointer(Demo)"></a>forwarding pointer(Demo)</h3><p>一個Page大小是8k</p>
<p>我們建立一個<code>ForwardingPointers</code>資料表，並且新增3筆資料進去</p>
<blockquote>
<p>其中有一筆資料<code>replicate(&#39;2&#39;,7800)</code>佔據78xxBytes.</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> dbo.ForwardingPointers</span><br><span class="line">(</span><br><span class="line"> <span class="keyword">ID</span> <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line"> Val <span class="built_in">varchar</span>(<span class="number">8000</span>) <span class="literal">null</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dbo.ForwardingPointers(<span class="keyword">ID</span>,Val)</span><br><span class="line"><span class="keyword">values</span>(<span class="number">1</span>,<span class="literal">null</span>),(<span class="number">2</span>,<span class="keyword">replicate</span>(<span class="string">'2'</span>,<span class="number">7800</span>)),(<span class="number">3</span>,<span class="literal">null</span>);</span><br></pre></td></tr></table></figure></div>
<p>新增完後我們利用<code>DMV</code>查詢目前<code>ForwardingPointers</code>使用的Page數量可以看到只使用一頁</p>
<blockquote>
<p>因為目前資料大小可以放在同一個Page</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> page_count, avg_record_size_in_bytes, avg_page_space_used_in_percent</span><br><span class="line"> ,forwarded_record_count</span><br><span class="line"><span class="keyword">from</span> sys.dm_db_index_physical_stats(db_id(),object_id(N<span class="string">'dbo.ForwardingPointers'</span>),<span class="number">0</span></span><br><span class="line"> ,<span class="literal">null</span>,<span class="string">'DETAILED'</span>);</span><br></pre></td></tr></table></figure></div>
<p><img src="https://i.imgur.com/7F9Kmcg.png" alt></p>
<p>我們將<code>dbo.ForwardingPointers</code>另外兩個<br><code>Val IS NULL</code>更新成<code>replicate(&#39;2&#39;,7800)</code></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> dbo.ForwardingPointers</span><br><span class="line"><span class="keyword">SET</span> Val = <span class="keyword">replicate</span>(<span class="string">'2'</span>,<span class="number">7800</span>)</span><br><span class="line"><span class="keyword">WHERE</span> Val <span class="keyword">IS</span> <span class="literal">NULL</span></span><br></pre></td></tr></table></figure></div>
<p>再查詢一次<code>dbo.ForwardingPointers</code>使用Page，能發現已經使用了3個Page(因為已經觸發<code>forwarding pointer</code>)</p>
<p>已經把這次更新的資料搬到新Page上，因為更新後的資料大小已經超過目前Page可以負擔的大小</p>
<p><img src="https://i.imgur.com/ZcgdAhc.png" alt></p>
<h3 id="RID-Lookup"><a href="#RID-Lookup" class="headerlink" title="RID Lookup"></a>RID Lookup</h3><p>在<a href="https://isdaniel.github.io/DBIndex-1/">資料庫索引深入淺出(一)</a>有說，資料表沒有<code>Clustered Index</code>且使用<code>Index</code>所有查詢欄位不包含在<code>Converting Index</code>中就會透過<code>RID Lookup</code>查找確切Page上的Row(藉由Row-Id)</p>
<blockquote>
<p>此資料表是<code>Heap</code>資料表在<code>NonClustered Index</code>中會存放<code>Heap RID</code></p>
</blockquote>
<p><img src="https://i.imgur.com/e87YROd.png" alt></p>
<blockquote>
<p>記得在<code>DBCC IND</code>取得的PID是要找<code>PageType = 2</code></p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">DBCC traceon (3604);</span><br><span class="line">DBCC IND ([Your DataBase],T1,-1)</span><br><span class="line">DBCC PAGE([Your DataBase],1,[Your PID],3)</span><br></pre></td></tr></table></figure></div>
<p>透過<code>DBCC</code>可以看到查找資料表Page資料可以顯示如下結果集.</p>
<p>如果是Heap資料表會有一個欄位是<code>Heap RID(Key)</code>欄位.</p>
<blockquote>
<p>HEAP RID:0x40110F0001002900<br>大小 8 bytes</p>
<ul>
<li>FID（2 bytes）</li>
<li>PID（4 bytes）</li>
<li>SLOT（2 bytes）</li>
</ul>
</blockquote>
<p>可藉由下面的Script來拆解<code>Heap RID(Key)</code>資料</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--轉換RID為 FID:PID:slot格式</span></span><br><span class="line"><span class="keyword">declare</span> @Heaprid <span class="built_in">binary</span>(<span class="number">8</span>)</span><br><span class="line"><span class="keyword">set</span> @Heaprid = <span class="number">0x40110F0001002900</span></span><br><span class="line"><span class="keyword">select</span> [FID:PID:Slot]=      </span><br><span class="line">       <span class="keyword">CONVERT</span> (<span class="built_in">VARCHAR</span>(<span class="number">5</span>),</span><br><span class="line">       <span class="keyword">CONVERT</span>(<span class="built_in">INT</span>, <span class="keyword">SUBSTRING</span>(@Heaprid, <span class="number">6</span>, <span class="number">1</span>)</span><br><span class="line">       + <span class="keyword">SUBSTRING</span>(@Heaprid, <span class="number">5</span>, <span class="number">1</span>)))</span><br><span class="line">     + <span class="string">':'</span></span><br><span class="line">     + <span class="keyword">CONVERT</span>(<span class="built_in">VARCHAR</span>(<span class="number">10</span>),</span><br><span class="line">       <span class="keyword">CONVERT</span>(<span class="built_in">INT</span>, <span class="keyword">SUBSTRING</span>(@Heaprid, <span class="number">4</span>, <span class="number">1</span>)</span><br><span class="line">        + <span class="keyword">SUBSTRING</span>(@Heaprid, <span class="number">3</span>, <span class="number">1</span>)</span><br><span class="line">        + <span class="keyword">SUBSTRING</span>(@Heaprid, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">        + <span class="keyword">SUBSTRING</span>(@Heaprid, <span class="number">1</span>, <span class="number">1</span>)))</span><br><span class="line">     + <span class="string">':'</span></span><br><span class="line">          + <span class="keyword">CONVERT</span>(<span class="built_in">VARCHAR</span>(<span class="number">5</span>),</span><br><span class="line">          <span class="keyword">CONVERT</span>(<span class="built_in">INT</span>, <span class="keyword">SUBSTRING</span>(@Heaprid, <span class="number">8</span>, <span class="number">1</span>)</span><br><span class="line">          + <span class="keyword">SUBSTRING</span>(@Heaprid, <span class="number">7</span>, <span class="number">1</span>)))</span><br></pre></td></tr></table></figure></div>
<p>透過上面Script我們可以得到<code>1:987456:41</code></p>
<p>我們在透過</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">DBCC PAGE(AdventureWorks2012_Data,1,987456,3)</span><br></pre></td></tr></table></figure></div>
<p>就可以查找到我們要的資料在<code>PID = 987456</code>這個Page中.</p>
<h2 id="dbcc-page-語法"><a href="#dbcc-page-語法" class="headerlink" title="dbcc page 語法"></a>dbcc page 語法</h2><p>下面語法透過<code>dbcc page</code>可以了解資料表存取資訊</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 建立測試資料表 */</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> dbo.T;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> dbo.T</span><br><span class="line">(</span><br><span class="line">	<span class="keyword">Name</span>	<span class="keyword">nvarchar</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">	EmpID	<span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">	CouID	<span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">	<span class="keyword">Locate</span>	<span class="keyword">nchar</span>(<span class="number">2</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">	Dist	<span class="keyword">nchar</span>(<span class="number">1</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">	BDate	datetime <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">	Address	<span class="keyword">nvarchar</span>(<span class="number">100</span>) <span class="literal">null</span>,</span><br><span class="line">	CheckID	<span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span></span><br><span class="line">);</span><br><span class="line">go</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 寫入測試資料 */</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dbo.T</span><br><span class="line">	(<span class="keyword">Name</span>, EmpID, CouID, <span class="keyword">Locate</span>, Dist, BDate, Address, CheckID)</span><br><span class="line"><span class="keyword">values</span></span><br><span class="line">	(N<span class="string">'Daniel'</span>,<span class="number">1</span>,<span class="number">950</span>,N<span class="string">'TW'</span>,N<span class="string">'M'</span>,<span class="string">'2020-01-01 00:00:00'</span>,N<span class="string">'Taipei City'</span>,<span class="number">9</span>);</span><br><span class="line">go</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 先取得Page的位置 */</span></span><br><span class="line">dbcc ind ('DEMO','dbo.T', -1);</span><br><span class="line"><span class="comment">/* 16776 - 不會一樣, 依照產出的資料配置dbcc page */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 查看Page內容 */</span></span><br><span class="line">dbcc traceon (3604);</span><br><span class="line">dbcc page ('DEMO', 1, 16776, 3)</span><br><span class="line">dbcc traceoff (3604);</span><br></pre></td></tr></table></figure></div>
<p>PageType – the page type. Some common ones are:</p>
<ul>
<li>1 – data page</li>
<li>2 – index page</li>
<li>3 and 4 – text pages</li>
<li>8 – GAM page</li>
<li>9 – SGAM page</li>
<li>10 – IAM page</li>
<li>11 – PFS page</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">dbcc traceon (3604);</span><br><span class="line">DBCC IND ( &#123; ‘dbname’ | dbid &#125;, &#123; ‘objname’ | objid &#125;,&#123; nonclustered indid | 1 | 0 | -1 | -2 &#125; [, partition_number] )</span><br></pre></td></tr></table></figure>
<ul>
<li>第一個參數是數據庫名或數據庫ID。</li>
<li>第二個參數是數據庫中的對象名或對象ID，對象可以是表或者索引視圖。</li>
<li>第三個參數是一個非聚集索引ID或者 1, 0, 1, or 2. 值的含義：<ul>
<li>0: 只顯示對象的in-row data頁和 in-row IAM 頁。</li>
<li>1: 顯示對象的全部頁, 包含IAM 頁, in-row數據頁, LOB 數據頁row-overflow 數據頁 . 如果請求的對象含有聚集所以則索引頁也包括。</li>
<li>-1: 顯示全部IAM頁,數據頁, 索引頁 也包括 LOB 和row-overflow 數據頁。</li>
<li>-2: 顯示全部IAM頁。</li>
</ul>
</li>
</ul>
<p><strong>此文作者</strong>：Daniel Shih(石頭)<br><strong>此文地址</strong>： <a href="https://isdaniel.github.io/dbtable/">https://isdaniel.github.io/dbtable/</a> <br><strong>版權聲明</strong>：本博客所有文章除特別聲明外，均採用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC90dy8=" title="https://creativecommons.org/licenses/by-nc-sa/3.0/tw/">CC BY-NC-SA 3.0 TW<i class="fa fa-external-link"></i></span> 許可協議。轉載請註明出處！</p>
]]></content>
      <categories>
        <category>DataBase</category>
        <category>Turning</category>
      </categories>
      <tags>
        <tag>Sql-server</tag>
        <tag>DataBase</tag>
        <tag>Turning</tag>
      </tags>
  </entry>
  <entry>
    <title>(C#)裝飾者模式(Decorator Pattern)</title>
    <url>/decorator-pattern/</url>
    <content><![CDATA[<p>裝飾者模式是一個很精美且優雅的模式</p>
<p>本篇範例 文字內容-&gt;AES加密-&gt;Zip檔附加密碼-&gt;輸出儲存</p>
<p><strong>情境</strong><br>有個需求要做</p>
<ul>
<li><p>文字內容-&gt;壓縮zip(附上密碼)-&gt;輸出儲存<br><em>又改成…</em></p>
</li>
<li><p>文字內容-&gt;AES加密-&gt;輸出儲存<br><em>需求又改成….</em></p>
</li>
<li><p>文字內容-&gt;AES加密-&gt;Zip檔附加密碼-&gt;輸出儲存</p>
</li>
</ul>
<p>可發現需求一直在對於<strong>文字內容</strong>操作順序做變化,但他們核心離不開對於<strong>文字內容</strong>的操作</p>
<p>這種情境很適合來使用 <strong>[裝飾者模式]</strong></p>
<p>裝飾者模式 有兩個主要角色 <strong>被裝飾物件(Decorated) &amp; 裝飾物件(Decorator)</strong></p>
<ol>
<li>被裝飾物件(Decorated)就像蛋糕的一樣, </li>
<li>裝飾物件(Decorator)就是上的水果,奶油,巧克力…等等裝飾物品</li>
</ol>
<p>一般先有蛋糕<strong>被裝飾物件(Decorated)</strong>,後再將裝飾物品加上去<strong>裝飾物件(Decorator)</strong></p>
<p>被裝飾物件(Decorated)如下圖  蛋糕的原型</p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/%E4%B9%9D%E6%A1%83/4bc56f03-a1e1-4504-bea3-7cb02a8aaa21/1522894727_00158.jpg" alt></p>
<p><span class="exturl" data-url="aHR0cDovL3d3dy5jaHV5aXh1ZXhpLmNvbS9jYWlwdS8yMDE2LzAyLzAxLzI4ODIwMi5odG1s" title="http://www.chuyixuexi.com/caipu/2016/02/01/288202.html">圖片來源<i class="fa fa-external-link"></i></span></p>
<ul>
<li>將物件有效的往上附加職責,不動到內部的程式碼, 在原來職責上附加額外的職責</li>
<li>裝飾者模式運作就像 俄羅斯娃娃一樣 一層包一層</li>
</ul>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/%E4%B9%9D%E6%A1%83/4bc56f03-a1e1-4504-bea3-7cb02a8aaa21/1522826815_28596.jpg" alt="https://dotblogsfile.blob.core.windows.net/user/%E4%B9%9D%E6%A1%83/4bc56f03-a1e1-4504-bea3-7cb02a8aaa21/1522826815_28596.jpg"></p>
<p><span class="exturl" data-url="aHR0cDovL3d3dy41MnRveXMuY29tL3Bvc3QvMTAwOTMwNi5odG1s" title="http://www.52toys.com/post/1009306.html">圖片來源<i class="fa fa-external-link"></i></span></p>
<hr>
<p>第一步 先找尋他們共同裝飾東西,因為是讀寫檔案 所以我們可以對於<strong>Byte</strong>下手</p>
<p>先做出 <strong>讀</strong> 跟 <strong>寫</strong> 介面簽章當作裝飾動作的統一介面</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IProcess</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">byte</span>[] <span class="title">Read</span>(<span class="params"><span class="keyword">string</span> path</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Write</span>(<span class="params"><span class="keyword">string</span> writePath, <span class="keyword">byte</span>[] buffer</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在創建一個 ProcessBase 給日後裝飾物品(Decorator)來繼承</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">ProcessBase</span> : <span class="title">IProcess</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 儲存被裝飾的物件</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">protected</span> IProcess _process;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">byte</span>[] <span class="title">Read</span>(<span class="params"><span class="keyword">string</span> path</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Write</span>(<span class="params"><span class="keyword">string</span> writePath, <span class="keyword">byte</span>[] buffer</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">SetDecorated</span>(<span class="params">IProcess process</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        _process = process;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>有兩點特別說明</p>
<ol>
<li><code>protected IProcess _process;</code>  儲存被裝飾的物件由 <code>SetDecorated</code> 方法來設置被裝飾的物件</li>
<li>就像俄羅斯娃娃只包裹一個娃娃,不管被包裹娃娃之前包含哪些娃娃</li>
</ol>
<hr>
<p>第二步 創建被裝飾物品(Decorated) </p>
<p>因為是檔案我們直接使用 </p>
<ul>
<li>File.ReadAllBytes 讀 檔案</li>
<li>File.WriteAllBytes 寫 檔案</li>
</ul>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 讀取檔案</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FileProcess</span> : <span class="title">IProcess</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">byte</span>[] <span class="title">Read</span>(<span class="params"><span class="keyword">string</span> path</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> File.ReadAllBytes(path);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Write</span>(<span class="params"><span class="keyword">string</span> writePath, <span class="keyword">byte</span>[] buffer</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        File.WriteAllBytes(writePath, buffer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第三步 創建裝飾物品(Decorator)</p>
<p>這次主要裝飾物品有兩個 </p>
<ol>
<li>加壓解壓ZIP檔</li>
<li>加解密</li>
</ol>
<p>加密裝飾器繼承<code>ProcessBase</code>並按照加解密重寫 <code>Write</code>和 <code>read</code> 方法</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> Aes 加密裝飾器</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AESCrypProcess</span> : <span class="title">ProcessBase</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> AesCryptoServiceProvider aes;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> AESKey &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="string">"1776D8E110124E75"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> AESIV &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="string">"B890E7F6BA01C273"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AESCrypProcess</span>(<span class="params"></span>) </span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        aes = <span class="keyword">new</span> AesCryptoServiceProvider();</span><br><span class="line">        aes.Key = Encoding.UTF8.GetBytes(AESKey);</span><br><span class="line">        aes.IV = Encoding.UTF8.GetBytes(AESIV);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">byte</span>[] <span class="title">Read</span>(<span class="params"><span class="keyword">string</span> path</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">byte</span>[] encryptBytes = _process.Read(path);</span><br><span class="line">        <span class="keyword">return</span> DecryptData(encryptBytes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 進行解密</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="encryptBytes"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">byte</span>[] <span class="title">DecryptData</span>(<span class="params"><span class="keyword">byte</span>[] encryptBytes</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">byte</span>[] outputBytes = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">using</span> (MemoryStream memoryStream = <span class="keyword">new</span> MemoryStream(encryptBytes))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">using</span> (CryptoStream decryptStream = <span class="keyword">new</span> CryptoStream(memoryStream, aes.CreateDecryptor(), CryptoStreamMode.Read))</span><br><span class="line">            &#123;</span><br><span class="line">                MemoryStream outputStream = <span class="keyword">new</span> MemoryStream();</span><br><span class="line">                decryptStream.CopyTo(outputStream);</span><br><span class="line">                outputBytes = outputStream.ToArray();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> outputBytes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 裝飾者呼叫方法</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="path"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="data"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Write</span>(<span class="params"><span class="keyword">string</span> path, <span class="keyword">byte</span>[] data</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">byte</span>[] outputBytes = EncryptData(data);</span><br><span class="line">        _process.Write(path, outputBytes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">byte</span>[] <span class="title">EncryptData</span>(<span class="params"><span class="keyword">byte</span>[] data</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">byte</span>[] outputBytes = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">using</span> (MemoryStream memoryStream = <span class="keyword">new</span> MemoryStream())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">using</span> (CryptoStream encryptStream = <span class="keyword">new</span> CryptoStream(memoryStream, aes.CreateEncryptor(), CryptoStreamMode.Write))</span><br><span class="line">            &#123;</span><br><span class="line">                MemoryStream inputStream = <span class="keyword">new</span> MemoryStream(data);</span><br><span class="line">                inputStream.CopyTo(encryptStream);</span><br><span class="line">                encryptStream.FlushFinalBlock();</span><br><span class="line">                outputBytes = memoryStream.ToArray();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> outputBytes;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>這次讀寫zip使用 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2ljc2hhcnBjb2RlL1NoYXJwWmlwTGli" title="https://github.com/icsharpcode/SharpZipLib">SharpZipLib<i class="fa fa-external-link"></i></span> 開源第三方插件</p>
<p>ZIP裝飾器繼承<code>ProcessBase</code>並按照加解密重寫 <code>Write</code>和 <code>read</code> 方法</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 讀取Zip使用</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ZipProcess</span> : <span class="title">ProcessBase</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> PassWord &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> FileName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">byte</span>[] <span class="title">Read</span>(<span class="params"><span class="keyword">string</span> path</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">byte</span>[] buffer = _process.Read(path);</span><br><span class="line">        <span class="keyword">return</span> ZipReader(path, buffer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Write</span>(<span class="params"><span class="keyword">string</span> writePath, <span class="keyword">byte</span>[] data</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">byte</span>[] buffer = ZipWriter(data);</span><br><span class="line">        _process.Write(writePath, buffer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">byte</span>[] <span class="title">ZipWriter</span>(<span class="params"><span class="keyword">byte</span>[] buffer</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">using</span> (MemoryStream outputMemStream = <span class="keyword">new</span> MemoryStream())</span><br><span class="line">        <span class="keyword">using</span> (ZipOutputStream zipStream = <span class="keyword">new</span> ZipOutputStream(outputMemStream))</span><br><span class="line">        <span class="keyword">using</span> (MemoryStream memStreamIn = <span class="keyword">new</span> MemoryStream(buffer))</span><br><span class="line">        &#123;</span><br><span class="line">            zipStream.SetLevel(<span class="number">9</span>); </span><br><span class="line"></span><br><span class="line">            ZipEntry newEntry = <span class="keyword">new</span> ZipEntry(FileName);</span><br><span class="line">            newEntry.DateTime = DateTime.Now;</span><br><span class="line">            zipStream.Password = PassWord;</span><br><span class="line">            zipStream.PutNextEntry(newEntry);</span><br><span class="line"></span><br><span class="line">            StreamUtils.Copy(memStreamIn, zipStream, <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">4096</span>]);<span class="comment">//將zip流搬到memoryStream中</span></span><br><span class="line">            zipStream.CloseEntry();</span><br><span class="line"></span><br><span class="line">            zipStream.IsStreamOwner = <span class="literal">false</span>;   </span><br><span class="line">            zipStream.Close();                </span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> outputMemStream.ToArray();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 讀取zip檔</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="buffer"&gt;</span>zip檔案byte<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">byte</span>[] <span class="title">ZipReader</span>(<span class="params"><span class="keyword">string</span> filePath, <span class="keyword">byte</span>[] buffer</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">byte</span>[] zipBuffer = <span class="keyword">default</span>(<span class="keyword">byte</span>[]);</span><br><span class="line">        <span class="keyword">using</span> (MemoryStream memoryStream = <span class="keyword">new</span> MemoryStream(buffer))</span><br><span class="line">        &#123;</span><br><span class="line">            memoryStream.Seek(<span class="number">0</span>, SeekOrigin.Begin);</span><br><span class="line">            <span class="keyword">var</span> zip = <span class="keyword">new</span> ZipFile(memoryStream);</span><br><span class="line">            zip.Password = PassWord;</span><br><span class="line">            <span class="keyword">using</span> (MemoryStream streamWriter = <span class="keyword">new</span> MemoryStream())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">byte</span>[] bufferReader = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">4096</span>];</span><br><span class="line">                <span class="keyword">var</span> file = zip.GetEntry(FileName); <span class="comment">//設置要去得的檔名</span></span><br><span class="line">                <span class="comment">//如果有檔案</span></span><br><span class="line">                <span class="keyword">if</span> (file != <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">var</span> zipStream = zip.GetInputStream(file);</span><br><span class="line">                    StreamUtils.Copy(zipStream, streamWriter, bufferReader);</span><br><span class="line">                    zipBuffer = streamWriter.ToArray();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> zipBuffer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面就把我們要用的裝飾物品 (備料) 準備完成</p>
<hr>
<p>第四步 創建使用(開始擺盤)</p>
<p>創建一個 <code>DecorateFactory</code> 來當生產 裝飾產品的工廠</p>
<p>建構子傳入一個 被裝飾的物件(<code>FileProcess</code>) 之後可依照喜好一直疊加 裝飾物品(<code>ZipProcess</code>,<code>AESCrypProcess</code>…)</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DecorateFactory</span></span><br><span class="line">&#123;</span><br><span class="line">    IProcess _original;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DecorateFactory</span>(<span class="params">IProcess original</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        _original = original;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DecorateFactory <span class="title">SetProcess</span>(<span class="params">ProcessBase process</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        process.SetDecorated(_original);</span><br><span class="line">        _original = process;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IProcess <span class="title">GetProcess</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> _original;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>裝飾者模式 裝飾的順序是很重要的</strong></p>
</blockquote>
<p>為了方便讀者閱讀 我使用小畫家畫出 讀寫順序</p>
<p>如下圖</p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/%E4%B9%9D%E6%A1%83/4bc56f03-a1e1-4504-bea3-7cb02a8aaa21/1522828936_73575.png" alt></p>
<p>使用就可很清晰來用</p>
<p><code>DecorateFactory</code>來創建裝飾流程<br><code>factroy.GetProcess();</code> 方法取得完成後的產品</p>
<p>在簡單呼叫<strong>讀</strong>和<strong>寫</strong>方法</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">string</span> filePath = <span class="string">@"C:\Users\daniel.shih\Desktop\test.zip"</span>;</span><br><span class="line"><span class="keyword">string</span> content = <span class="string">$"你好 123456 12@()!@ <span class="subst">&#123;Environment.NewLine&#125;</span> fsfd嘻嘻哈哈!!"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//設置初始化的被裝飾者</span></span><br><span class="line">DecorateFactory factroy = <span class="keyword">new</span> DecorateFactory(<span class="keyword">new</span> FileProcess());</span><br><span class="line"></span><br><span class="line"><span class="comment">//設置裝飾的順序</span></span><br><span class="line">factroy.SetProcess(<span class="keyword">new</span> AESCrypProcess())</span><br><span class="line">        .SetProcess(<span class="keyword">new</span> ZipProcess() &#123; FileName = <span class="string">"1.txt"</span>,PassWord =<span class="string">"1234567"</span>&#125;);</span><br><span class="line"></span><br><span class="line">IProcess process = factroy.GetProcess();</span><br><span class="line"></span><br><span class="line"><span class="keyword">byte</span>[] data_buffer = Encoding.UTF8.GetBytes(content);</span><br><span class="line">process.Write(filePath, data_buffer);</span><br><span class="line"></span><br><span class="line"><span class="keyword">byte</span>[] buffer = process.Read(filePath);</span><br><span class="line">Console.WriteLine(Encoding.UTF8.GetString(buffer));</span><br></pre></td></tr></table></figure>
<p>日後不管需求是改成</p>
<ul>
<li>文字內容-&gt;壓縮zip(附上密碼)-&gt;輸出儲存</li>
<li>文字內容-&gt;AES加密-&gt;輸出儲存</li>
<li>文字內容-&gt;AES加密-&gt;Zip檔附加密碼-&gt;輸出儲存</li>
</ul>
<p>還是…..</p>
<p>我們都不怕因為我們把各種操作<code>封裝</code>和<code>多態</code></p>
<p>各個模組間都是獨立的很好映證 <code>高內聚低耦合</code> 的設計原則</p>
<p><strong>小結:</strong></p>
<p>裝飾者模式是一個很精美且優雅的模式 希望這篇文章可讓讀者對於此模式有更加了解</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2lzZGFuaWVsL0Rlc2lnblBhdHRlcm4vdHJlZS9tYXN0ZXIvRGVzaWduUGF0dGVybi9EZWNvcmF0ZVBhdHRlcm4=" title="https://github.com/isdaniel/DesignPattern/tree/master/DesignPattern/DecoratePattern">GitHub範例連結<i class="fa fa-external-link"></i></span></p>
<p><strong>此文作者</strong>：Daniel Shih(石頭)<br><strong>此文地址</strong>： <a href="https://isdaniel.github.io/decorator-pattern/">https://isdaniel.github.io/decorator-pattern/</a> <br><strong>版權聲明</strong>：本博客所有文章除特別聲明外，均採用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC90dy8=" title="https://creativecommons.org/licenses/by-nc-sa/3.0/tw/">CC BY-NC-SA 3.0 TW<i class="fa fa-external-link"></i></span> 許可協議。轉載請註明出處！</p>
]]></content>
      <categories>
        <category>C#</category>
        <category>DesignPattern</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>Design-Pattern</tag>
        <tag>Decorator-Pattern</tag>
      </tags>
  </entry>
  <entry>
    <title>發布自己的Nuget專案</title>
    <url>/deploy-ownnuget/</url>
    <content><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>前陣子在被面試官說：我有電子發票開源專案，是否有上到Nuget上</p>
<p>我回答:沒有.</p>
<p>我就突然想到我也可以把我的專案放到Nuget上讓更多人方便使用</p>
<p>我就查詢資料去了解整個上板流程,並打成文章跟大家分享</p>
<hr>
<h3 id="下載Nuget-Commandline-Tool"><a href="#下載Nuget-Commandline-Tool" class="headerlink" title="下載Nuget Commandline Tool"></a>下載Nuget Commandline Tool</h3><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubnVnZXQub3JnL2Rvd25sb2Fkcw==" title="https://www.nuget.org/downloads">下載Nuget Commandline Tool<i class="fa fa-external-link"></i></span></p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/九桃/a236f1fa-ad61-4d1e-a547-873093f89865/1543152784_97518.png" alt></p>
<p>之後你會取得 <code>nuget.exe</code> 這個檔案</p>
<p>把它放到你要打包Nuget的專案資料夾中</p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/九桃/a236f1fa-ad61-4d1e-a547-873093f89865/1543152541_67261.png" alt></p>
<p>之後打開cmd 並在專案資料夾打上 <code>nuget spce</code></p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/九桃/a236f1fa-ad61-4d1e-a547-873093f89865/1543152985_63932.png" alt></p>
<p>之後在你資料夾中會出現 <code>xxxx.nuspec</code>的XML檔案,這個檔案是描述你要打包的專案</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="XML"><figure class="iseeu highlight /xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">code</span> <span class="attr">class</span>=<span class="string">"language-xml"</span>&gt;</span><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> &gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">metadata</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">authors</span>&gt;</span><span class="tag">&lt;/<span class="name">authors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">owners</span>&gt;</span><span class="tag">&lt;/<span class="name">owners</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">licenseUrl</span>&gt;</span><span class="tag">&lt;/<span class="name">licenseUrl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">projectUrl</span>&gt;</span><span class="tag">&lt;/<span class="name">projectUrl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">iconUrl</span>&gt;</span><span class="tag">&lt;/<span class="name">iconUrl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">requireLicenseAcceptance</span>&gt;</span>false<span class="tag">&lt;/<span class="name">requireLicenseAcceptance</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>This is a AOP framework<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">releaseNotes</span>&gt;</span>Summary of changes made in this release of the package.<span class="tag">&lt;/<span class="name">releaseNotes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">copyright</span>&gt;</span>Copyright 2018<span class="tag">&lt;/<span class="name">copyright</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tags</span>&gt;</span>c# AOP<span class="tag">&lt;/<span class="name">tags</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">metadata</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<h3 id="必填欄位"><a href="#必填欄位" class="headerlink" title="必填欄位"></a>必填欄位</h3><ul>
<li>ID：不區分大小寫的套件識別碼，在整個 nuget.org 或套件所在的任何組件庫中都必須是唯一的。 識別碼可能不包含對 URL 而言無效的空格或字元，而且通常會遵循 .NET 命名空間規則。 如需指導方針，請參閱<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vemgtdHcvbnVnZXQvY3JlYXRlLXBhY2thZ2VzL2NyZWF0aW5nLWEtcGFja2FnZSNjaG9vc2luZy1hLXVuaXF1ZS1wYWNrYWdlLWlkZW50aWZpZXItYW5kLXNldHRpbmctdGhlLXZlcnNpb24tbnVtYmVy" title="https://docs.microsoft.com/zh-tw/nuget/create-packages/creating-a-package#choosing-a-unique-package-identifier-and-setting-the-version-number">選擇唯一的套件識別碼<i class="fa fa-external-link"></i></span>。</li>
<li>Version：套件版本，遵循 <em>major.minor.patch</em> 模式。 版本號碼可以包含預先發行版本的後置詞，如<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vemgtdHcvbnVnZXQvcmVmZXJlbmNlL3BhY2thZ2UtdmVyc2lvbmluZyNwcmUtcmVsZWFzZS12ZXJzaW9ucw==" title="https://docs.microsoft.com/zh-tw/nuget/reference/package-versioning#pre-release-versions">套件版本控制<i class="fa fa-external-link"></i></span>中所述。</li>
<li>Description：UI 顯示中的套件詳細描述。</li>
</ul>
<blockquote>
<p>Authors：以逗號分隔的套件作者清單，與 nuget.org 上的設定檔名稱相符。這些名稱會顯示在 nuget.org 的 NuGet 組件庫中，並用來交互參照相同作者的其他套件。</p>
</blockquote>
<h3 id="打包Nuget"><a href="#打包Nuget" class="headerlink" title="打包Nuget"></a>打包Nuget</h3><p>填完資料後就可以回到commandline 並打另一個指令<code>nuget pack</code>將專案打包成 <code>xxx.nupkg</code> 檔案 以提供上傳</p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/九桃/a236f1fa-ad61-4d1e-a547-873093f89865/1543153426_68079.png" alt></p>
<p>之後申辦一個Nuget帳號,並產生一個API Key</p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/九桃/a236f1fa-ad61-4d1e-a547-873093f89865/1543153601_8669.png" alt></p>
<p>產生完後在上面的選單選擇 <code>Upload</code> 按鈕</p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/九桃/a236f1fa-ad61-4d1e-a547-873093f89865/1543153522_96047.png" alt>之後按下Browse按鈕並上傳你的 <code>xxxx.nupkg</code>檔案,上傳完畢後就按下Submit按鈕 將此專案提交上去</p>
<p>上傳完畢後Nuget他會審核你的專案,等審核完後大家就可以下載使用你的專案摟^^</p>
<h3 id="石頭已經打包專案"><a href="#石頭已經打包專案" class="headerlink" title="石頭已經打包專案"></a>石頭已經打包專案</h3><p>這兩個是我已經發布的專案</p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cubnVnZXQub3JnL3BhY2thZ2VzL0F3ZXNvbWVQcm94eS5OZXQv" title="https://www.nuget.org/packages/AwesomeProxy.Net/">AwesomeProxy.Net<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cubnVnZXQub3JnL3BhY2thZ2VzL0VsZWN0cm9uaWNJbnZvaWNlX1RXLw==" title="https://www.nuget.org/packages/ElectronicInvoice_TW/">ElectronicInvoice_TW<i class="fa fa-external-link"></i></span></p>
<h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><p>如果要查nuget指令可以打 <code>nuget ?</code></p>
<h3 id="參考連結："><a href="#參考連結：" class="headerlink" title="參考連結："></a>參考連結：</h3><p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vemgtdHcvbnVnZXQvcmVmZXJlbmNlL251c3BlYw==" title="https://docs.microsoft.com/zh-tw/nuget/reference/nuspec">.nuspec 參考<i class="fa fa-external-link"></i></span></p>
<p><strong>此文作者</strong>：Daniel Shih(石頭)<br><strong>此文地址</strong>： <a href="https://isdaniel.github.io/deploy-ownnuget/">https://isdaniel.github.io/deploy-ownnuget/</a> <br><strong>版權聲明</strong>：本博客所有文章除特別聲明外，均採用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC90dy8=" title="https://creativecommons.org/licenses/by-nc-sa/3.0/tw/">CC BY-NC-SA 3.0 TW<i class="fa fa-external-link"></i></span> 許可協議。轉載請註明出處！</p>
]]></content>
      <categories>
        <category>C#</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>Nuget</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker深入淺出(一)</title>
    <url>/docker-deepknow-1/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h2><p>docker透過指令能快速建立相同執行環境並比起VM減少電腦資源消耗.</p>
<p>依照上面優點這就是為什麼docker可以在短時間內快速串紅.</p>
<blockquote>
<p>上圖來源<span class="exturl" data-url="aHR0cHM6Ly9waGlsaXB6aGVuZy5naXRib29rLmlvL2RvY2tlcl9wcmFjdGljZS9hcHBlbmRpeF9jb21tYW5kLw==" title="https://philipzheng.gitbook.io/docker_practice/appendix_command/">《Docker —— 從入門到實踐­》正體中文版<i class="fa fa-external-link"></i></span></p>
</blockquote>
<p>我在網路上找到很棒一個Docker操作流程圖,概括Docker操作時會用到的指令和動作關係.</p>
<p>因為外面有很多blog有對於Docker指令介紹本篇不著重在介紹指令,想要跟大家分享Docker其他細節.</p>
<h2 id="關於Window中的Docker"><a href="#關於Window中的Docker" class="headerlink" title="關於Window中的Docker"></a>關於Window中的Docker</h2><p>如果我們需要在Prod運行一個系統可能需要許多不同的程式架構和語言才能完成(甚至有OS限制),在傳統我們選擇使用VM來幫建立不同環境來承載不同程式架構，但VM會模擬OS導致非常肥大,安裝使用資源較大,而Container的Image可以依照我們需求來客製我們需要核心並且Container可以宿主核心達到效能較佳的利用</p>
<p>在Window10 我們可以利用HyperV來跑Docker,原因是HyperV類似一個虛擬機幫我們模擬Linux並且運行Docker Daemon來控管docker container.</p>
<blockquote>
<p>Docker需要在Linux中執行,Docker Daemon幫助Client透過命令來操作Docker,如果沒有Docker Daemon我們就無法執行Docker搂.</p>
</blockquote>
<h2 id="Image-amp-amp-Container"><a href="#Image-amp-amp-Container" class="headerlink" title="Image &amp;&amp; Container"></a>Image &amp;&amp; Container</h2><p>Image有點類似程式語言中的類別,Docker透過Image建立Container物件</p>
<p>Container類似程式語言中物件,透過Image(類別)建立出許多不同物件.</p>
<blockquote>
<p>可以透過<code>docker inspect {Container Id or name}</code>查看Container資訊</p>
</blockquote>
<ul>
<li>-f:此參數可以透過go template查看設定值</li>
<li>–link:此參數會在/etc/hosts 下加入網路資訊</li>
</ul>
<h2 id="UnionFS"><a href="#UnionFS" class="headerlink" title="UnionFS"></a>UnionFS</h2><p>Docker有一個<span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvVW5pb25GUw==" title="https://en.wikipedia.org/wiki/UnionFS">UnionFS<i class="fa fa-external-link"></i></span>概念共享Host Linux核心資源,不在建立新的OS層,docker會使用到bootfs和rootfs</p>
<ul>
<li>bootfs:包含了bootloader和Linux core。使用者是不能對這層作任何修改。</li>
<li>rootfs:包含了一般系统上的常見目錄結構，類似/dev, /proc, /bin等等以及一些基本的文件和命令。</li>
</ul>
<p>Image就像一個雞蛋核心是蛋黃，蛋白包覆蛋黃，最外層是蛋殼，雖然我們<code>docker pull redis</code>，但這個redis Image可能包含其他Image資訊(因為這樣才可以正常運行)</p>
<p><code>UnionFS</code>設計可以很好的讓我們來重複利用不同Image往上搭建出我們想要的環境.</p>
<p><img src="https://i.imgur.com/J8wyEQV.png" alt></p>
<blockquote>
<p>上圖來自網路上</p>
</blockquote>
<h3 id="scratch-Image"><a href="#scratch-Image" class="headerlink" title="scratch Image"></a>scratch Image</h3><p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZ2xvc3NhcnkvI2Jhc2VfaW1hZ2U=" title="https://docs.docker.com/glossary/#base_image">scratch<i class="fa fa-external-link"></i></span>是所有Image的Base(有點像是C# object class),所有Image基於scratch往上搭建.</p>
<blockquote>
<p>scratch Image只會包含最基本資訊可以跑起Container</p>
</blockquote>
<h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><p>Dockerfile用來建置描述，我們要建立Image資訊</p>
<p>下面是Dockerfile我認為比較重要幾個關鍵字.</p>
<ul>
<li>FROM:此Image是基於哪個Image</li>
<li>MAINTANER:維護作者</li>
<li>RUN:Container執行要跑的命令</li>
<li>EXPOSE:暴露port.</li>
<li>WORKDIR:Docker跑起來時,預設使用目錄</li>
<li>ENV:建立環境變數(環境變數可以當作後續命令參數使用)</li>
<li>ADD:Host主機目錄下複製檔案進Image且<strong>自動處理解壓tar壓縮包</strong>.</li>
<li>COPY:複製檔案從Host主機目錄到Image中.</li>
<li>VOLUME:保存Container數據資料持久化</li>
<li>CMD:指定容器Run時要使用的命令(只有最後一個CMD命令才會被執行,會被run最後執行命令覆蓋)</li>
<li>ENTRYPOINT:指定容器Run時要使用命令(不會被docker run覆蓋命令,他會追加執行命令)<blockquote>
<p>如果 Dockerfile 中如果存在多個ENTRYPOINT，只有最後一個才會生效</p>
</blockquote>
</li>
</ul>
<p>這裡有一點要注意Dockerfile使用關鍵字<strong>必須是大寫</strong>.</p>
<p>另外Dockerfile指令每執行一次都會在docker上新建一層。所以多過無意義層數，會造成Image膨脹過大。</p>
<h3 id="Dockerfile-Demo"><a href="#Dockerfile-Demo" class="headerlink" title="Dockerfile Demo"></a>Dockerfile Demo</h3><p>這是我的一個<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2lzZGFuaWVsL0RvY2tlckRlbW8vYmxvYi9tYXN0ZXIvU3FsU2VydmVyL0RvY2tlcmZpbGU=" title="https://github.com/isdaniel/DockerDemo/blob/master/SqlServer/Dockerfile">SqlServer<i class="fa fa-external-link"></i></span> Demo Image</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="DOCKERFILE"><figure class="iseeu highlight /dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment">#this image create from mssql-server-linux:latest</span></span><br><span class="line"><span class="keyword">FROM</span> microsoft/mssql-server-linux:latest</span><br><span class="line"><span class="comment">#who maintance this file.</span></span><br><span class="line">MAINTANER dog830228@gmail.com</span><br><span class="line"><span class="comment">#execute command in Linux</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update  \</span></span><br><span class="line"><span class="bash">	&amp;&amp; apt-get install -y curl \</span></span><br><span class="line"><span class="bash">	apt-transport-https</span></span><br><span class="line"><span class="comment">#set environment variable.</span></span><br><span class="line"><span class="keyword">ENV</span> BakDir=<span class="string">"/var/opt/mssql/backup"</span></span><br><span class="line"><span class="keyword">ENV</span> PATH=<span class="string">"/opt/mssql-tools/bin:$&#123;PATH&#125;"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> curl https://packages.microsoft.com/keys/microsoft.asc | apt-key add - \</span></span><br><span class="line"><span class="bash">    &amp;&amp; curl https://packages.microsoft.com/config/ubuntu/16.04/prod.list &gt; /etc/apt/sources.list.d/mssql-release.list</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get install -y locales \</span></span><br><span class="line"><span class="bash">    &amp;&amp; <span class="built_in">echo</span> <span class="string">"en_US.UTF-8 UTF-8"</span> &gt; /etc/locale.gen \</span></span><br><span class="line"><span class="bash">    &amp;&amp; locale-gen \</span></span><br><span class="line"><span class="bash">	&amp;&amp; apt-get -y install vim</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## copy host file ./script/ to image /var/opt/mssql/backup</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./script/ <span class="variable">$BakDir</span></span></span><br><span class="line"><span class="comment">## set default path /var/opt/mssql/backup when client into container</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> <span class="variable">$BakDir</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">## downland bak file from internet.</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir -p <span class="variable">$BakDir</span> \</span></span><br><span class="line"><span class="bash">	&amp;&amp; curl -L -o AdventureWorksDW2017.bak https://github.com/Microsoft/sql-server-samples/releases/download/adventureworks/AdventureWorksDW2017.bak</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## execute command after running.</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> /bin/bash <span class="string">"<span class="variable">$BakDir</span>/EntryPoint.sh"</span></span></span><br></pre></td></tr></table></figure></div>
<p>Dockerfile寫下註解，我們能了解到Dockerfile就一個描述Image的檔案.</p>
<p><strong>此文作者</strong>：Daniel Shih(石頭)<br><strong>此文地址</strong>： <a href="https://isdaniel.github.io/docker-deepknow-1/">https://isdaniel.github.io/docker-deepknow-1/</a> <br><strong>版權聲明</strong>：本博客所有文章除特別聲明外，均採用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC90dy8=" title="https://creativecommons.org/licenses/by-nc-sa/3.0/tw/">CC BY-NC-SA 3.0 TW<i class="fa fa-external-link"></i></span> 許可協議。轉載請註明出處！</p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Container</tag>
      </tags>
  </entry>
  <entry>
    <title>快速建立連接 MSSQL By Docker + VSCode</title>
    <url>/docker-vscode-connectsqlserver/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>如果我們在Local或測試環境需要建立一個連接MSSQL環境，傳統需要安裝MSSQL和SSMS</p>
<p>但現在有一個更快速輕便方法，就是使用Docker建立MSSQL環境 + VSCode Extension充當SSMS.</p>
<p>安裝時間不僅更快且需要花的空間更小,且可以在<code>Linux</code>使用</p>
<h2 id="Docker建立MSSQL"><a href="#Docker建立MSSQL" class="headerlink" title="Docker建立MSSQL"></a>Docker建立MSSQL</h2><p>相信大家都有聽過<span class="exturl" data-url="aHR0cHM6Ly93d3cuZG9ja2VyLmNvbS8=" title="https://www.docker.com/">Docker<i class="fa fa-external-link"></i></span>因為這篇是介紹如何運用Docker建立SSMS,這裡就不介紹太多Docker相關指令意思,有興趣可以自行google.</p>
<blockquote>
<p>Window 10才支援docker,因為docker daemon需要在<code>Linux</code>上運作,window需要透過<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vemgtdHcvdmlydHVhbGl6YXRpb24vaHlwZXItdi1vbi13aW5kb3dzL2Fib3V0Lw==" title="https://docs.microsoft.com/zh-tw/virtualization/hyper-v-on-windows/about/">Hyper-V<i class="fa fa-external-link"></i></span>來虛擬化<code>Linux</code>.</p>
</blockquote>
<p>如果你是使用Window我推薦下在<span class="exturl" data-url="aHR0cHM6Ly93d3cuZG9ja2VyLmNvbS9wcm9kdWN0cy9kb2NrZXItZGVza3RvcA==" title="https://www.docker.com/products/docker-desktop">Docker Desktop<i class="fa fa-external-link"></i></span>,使用UI呈現目前Container有的一些資訊.</p>
<p>如果下載並安裝完Docker可透過<code>docker info</code>命令可以查看,目前<code>Docker</code>使用資訊</p>
<p><img src="https://i.imgur.com/fyz6U56.png" alt></p>
<p>確認安裝好Docker後,我們就去Docker Hub 下載<span class="exturl" data-url="aHR0cHM6Ly9odWIuZG9ja2VyLmNvbS9fL21pY3Jvc29mdC1tc3NxbC1zZXJ2ZXI=" title="https://hub.docker.com/_/microsoft-mssql-server">microsoft-mssql-server<i class="fa fa-external-link"></i></span> image.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="DOCKER"><figure class="iseeu highlight /docker"><table><tr><td class="code"><pre><span class="line">docker pull mcr.microsoft.com/mssql/server</span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="DOCKER"><figure class="iseeu highlight /docker"><table><tr><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="bash"> -d --name dev-sqlserver -it -v D:/SO_DB:/var/opt/mssql/data -e <span class="string">'ACCEPT_EULA=Y'</span> -e <span class="string">'SA_PASSWORD=test.123'</span>  -e <span class="string">'MSSQL_PID=Enterprise'</span>  -p 1466:1433 mcr.microsoft.com/mssql/server:latest</span></span><br></pre></td></tr></table></figure></div>
<ul>
<li>name:(定義Container顯示名稱)</li>
<li>v：<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vc3RvcmFnZS92b2x1bWVzLw==" title="https://docs.docker.com/storage/volumes/">volume<i class="fa fa-external-link"></i></span>Docker映射Local路徑 (-v Host path:Container path  volume設定資料夾對應資訊) 這邊很重要,因為<code>/var/opt/mssql/data</code>對應SQLServer資料存放路徑,我們可以把要RestoreDB放到<code>D:/SO_DB</code>Docker會幫我們做映射(當然<code>D:/SO_DB</code>只是我sample放置位置你可以自行更改)</li>
<li>e:環境變數<ul>
<li>SA_PASSWORD：sa密碼</li>
<li>MSSQL_PID:SQL Server版本</li>
</ul>
</li>
<li>p：Container跟Local對外對應port(-p Host port:Container port)</li>
</ul>
<p>執行完上面command後,可以看到你的docker虛擬機已經跑起來了</p>
<p><img src="https://i.imgur.com/1DOeOHP.png" alt></p>
<h2 id="VsCode-SQL-Server-mssql"><a href="#VsCode-SQL-Server-mssql" class="headerlink" title="VsCode SQL Server (mssql)"></a>VsCode SQL Server (mssql)</h2><p>我們在VsCode安裝 SQL Server (mssql) Extesion</p>
<p><img src="https://i.imgur.com/RfAUNTT.png" alt></p>
<p>安裝完成後會在左邊部分看到一個新Sheet.</p>
<p><img src="https://i.imgur.com/agilh0R.png" alt></p>
<p>我們就可以添加新連接到Docker SQLServer Container中.</p>
<p>下圖是我查詢StackOverFlow sample資料庫結果</p>
<p><img src="https://i.imgur.com/rTVD1is.png" alt></p>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>透過Docker + VsCode我們可以快速做出簡化版SSMS連結DB,比起安裝一大堆東西來的方便.</p>
<p><strong>此文作者</strong>：Daniel Shih(石頭)<br><strong>此文地址</strong>： <a href="https://isdaniel.github.io/docker-vscode-connectsqlserver/">https://isdaniel.github.io/docker-vscode-connectsqlserver/</a> <br><strong>版權聲明</strong>：本博客所有文章除特別聲明外，均採用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC90dy8=" title="https://creativecommons.org/licenses/by-nc-sa/3.0/tw/">CC BY-NC-SA 3.0 TW<i class="fa fa-external-link"></i></span> 許可協議。轉載請註明出處！</p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>SSMS</tag>
        <tag>VSCode</tag>
      </tags>
  </entry>
  <entry>
    <title>(SQL Server)Dynamic pivot 動態樞紐分析</title>
    <url>/dynamic-pivot/</url>
    <content><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>之前有和大家分享使用<span class="exturl" data-url="aHR0cHM6Ly9kb3RibG9ncy5jb20udHcvZGFuaWVsLzIwMTgvMDUvMDkvMTcyODA0" title="https://dotblogs.com.tw/daniel/2018/05/09/172804">CASE WHEN 搭配聚合函數<i class="fa fa-external-link"></i></span>實現樞紐分析</p>
<p>但今天如果我們要轉換成行的列希望是動態依照目前資料庫的欄位要處理呢?</p>
<p>我們可以使用<code>Dynamic pivot</code></p>
<p><code></code>Dynamic pivot<code>核心概念其實是把我們要使用的</code>pivot SQL`語法動態產生出來</p>
<h3 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h3><pre><code>CREATE TABLE T(
    userName VARCHAR(100),
    Price int,
    Dt DATE
);

INSERT INTO T VALUES (&apos;Tom&apos;,100,&apos;2017-01-01&apos;);
INSERT INTO T VALUES (&apos;Amy&apos;,200,&apos;2017-01-02&apos;);
INSERT INTO T VALUES (&apos;Tom&apos;,1311,&apos;2017-01-03&apos;);
INSERT INTO T VALUES (&apos;Tom&apos;,122,&apos;2017-03-01&apos;);
INSERT INTO T VALUES (&apos;Tom&apos;,111,&apos;2017-04-01&apos;);
INSERT INTO T VALUES (&apos;Amy&apos;,232,&apos;2017-05-01&apos;);
INSERT INTO T VALUES (&apos;Tom&apos;,2312,&apos;2017-05-02&apos;);
INSERT INTO T VALUES (&apos;Tom&apos;,23,&apos;2017-05-03&apos;);

DECLARE @cols AS NVARCHAR(MAX),
        @query  AS NVARCHAR(MAX);

SET @SQL = STUFF((SELECT distinct &apos;,SUM(CASE WHEN Dt = &apos;&apos;&apos;+ CAST(Dt AS VARCHAR(10)) +&apos;&apos;&apos; THEN Price ELSE 0 END) AS &apos; + QUOTENAME(Dt)  
            FROM T 
            FOR XML PATH(&apos;&apos;), TYPE).value(&apos;.&apos;, &apos;NVARCHAR(MAX)&apos;) 
        ,1,1,&apos;&apos;);

SET @query = &apos;SELECT userName,&apos;+@cols+&apos; FROM T GROUP BY userName&apos; ;

EXECUTE sp_executesql @query
</code></pre><p>因為範例我們使用 <code>SQL SERVER</code></p>
<p>所以使用<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vemgtdHcvc3FsL3JlbGF0aW9uYWwtZGF0YWJhc2VzL3htbC9mb3IteG1sLXNxbC1zZXJ2ZXI/dmlldz1zcWwtc2VydmVyLTIwMTc=" title="https://docs.microsoft.com/zh-tw/sql/relational-databases/xml/for-xml-sql-server?view=sql-server-2017"> FOR XML PATH<i class="fa fa-external-link"></i></span> 語法將我們<span style="color:#FFA500;"><strong> CASE WHEN pivot SQL </strong></span>語法產生並把他附值給 <code>@cols</code> 變數</p>
<pre><code>SET @cols = STUFF((SELECT distinct &apos;,SUM(CASE WHEN Dt = &apos;&apos;&apos;+ CAST(Dt AS VARCHAR(10)) +&apos;&apos;&apos; THEN Price ELSE 0 END) AS &apos; + QUOTENAME(Dt)  
            FROM T 
            FOR XML PATH(&apos;&apos;), TYPE).value(&apos;.&apos;, &apos;NVARCHAR(MAX)&apos;) 
        ,1,1,&apos;&apos;)
</code></pre><p>因為<code>Dt</code>行會有重複的值,所以 <code>distinct</code> 來過濾</p>
<p>會產生如下的<code>SQL</code>語法</p>
<pre><code>,SUM(CASE WHEN Dt = &apos;2017-01-01&apos; THEN Price ELSE 0 END) AS [2017-01-01],SUM(CASE WHEN Dt = &apos;2017-01-02&apos; THEN Price ELSE 0 END) AS [2017-01-02],SUM(CASE WHEN Dt = &apos;2017-01-03&apos; THEN Price ELSE 0 END) AS [2017-01-03],SUM(CASE WHEN Dt = &apos;2017-03-01&apos; THEN Price ELSE 0 END) AS [2017-03-01],SUM(CASE WHEN Dt = &apos;2017-04-01&apos; THEN Price ELSE 0 END) AS [2017-04-01],SUM(CASE WHEN Dt = &apos;2017-05-01&apos; THEN Price ELSE 0 END) AS [2017-05-01],SUM(CASE WHEN Dt = &apos;2017-05-02&apos; THEN Price ELSE 0 END) AS [2017-05-02],SUM(CASE WHEN Dt = &apos;2017-05-03&apos; THEN Price ELSE 0 END) AS [2017-05-03]
</code></pre><p>在使用 <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vemgtdHcvc3FsL3Qtc3FsL2Z1bmN0aW9ucy9zdHVmZi10cmFuc2FjdC1zcWw/dmlldz1zcWwtc2VydmVyLTIwMTc=" title="https://docs.microsoft.com/zh-tw/sql/t-sql/functions/stuff-transact-sql?view=sql-server-2017">STUFF<i class="fa fa-external-link"></i></span> 將第一個 , 給移除掉</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kYmZpZGRsZS51ay8/cmRibXM9c3Fsc2VydmVyXzIwMTcmYW1wO2ZpZGRsZT05YzhkYTk1MGFjZWQxNmRlNDljNTkxNjI0YTdkNTMyYg==" title="https://dbfiddle.uk/?rdbms=sqlserver_2017&amp;fiddle=9c8da950aced16de49c591624a7d532b">sqlfiddle<i class="fa fa-external-link"></i></span></p>
<p>最後在把要使用的表和前面組的Pivot query串起來.</p>
<pre><code>SET @cols = STUFF((SELECT distinct &apos;,SUM(CASE WHEN Dt = &apos;&apos;&apos;+ CAST(Dt AS VARCHAR(10)) +&apos;&apos;&apos; THEN Price ELSE 0 END) AS &apos; + QUOTENAME(Dt)  
            FROM T 
            FOR XML PATH(&apos;&apos;), TYPE).value(&apos;.&apos;, &apos;NVARCHAR(MAX)&apos;) 
        ,1,1,&apos;&apos;);

SET @query = &apos;SELECT userName,&apos;+@cols+&apos; FROM T GROUP BY userName&apos; ;
SELECT @query;
</code></pre><p>最後產生：</p>
<pre><code>SELECT userName,
    SUM(CASE WHEN Dt = &apos;2017-01-01&apos; THEN Price ELSE 0 END) AS [2017-01-01],
    SUM(CASE WHEN Dt = &apos;2017-01-02&apos; THEN Price ELSE 0 END) AS [2017-01-02],
    SUM(CASE WHEN Dt = &apos;2017-01-03&apos; THEN Price ELSE 0 END) AS [2017-01-03],
    SUM(CASE WHEN Dt = &apos;2017-03-01&apos; THEN Price ELSE 0 END) AS [2017-03-01],
    SUM(CASE WHEN Dt = &apos;2017-04-01&apos; THEN Price ELSE 0 END) AS [2017-04-01],
    SUM(CASE WHEN Dt = &apos;2017-05-01&apos; THEN Price ELSE 0 END) AS [2017-05-01],
    SUM(CASE WHEN Dt = &apos;2017-05-02&apos; THEN Price ELSE 0 END) AS [2017-05-02],
    SUM(CASE WHEN Dt = &apos;2017-05-03&apos; THEN Price ELSE 0 END) AS [2017-05-03]
FROM T 
GROUP BY userName
</code></pre><p>有了上面<code>CASE WHEN pivot SQL</code> 語法,最後只需把剩下要用到Table sql語句給組出來在使用 <code>EXECUTE sp_executesql</code> 動態呼叫SQL語法</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kYmZpZGRsZS51ay8/cmRibXM9c3Fsc2VydmVyXzIwMTcmYW1wO2ZpZGRsZT00MDJkNGQxM2E2ZjY5NTQwNGQ1OTU1MjZiNjQ1NzE0ZA==" title="https://dbfiddle.uk/?rdbms=sqlserver_2017&amp;fiddle=402d4d13a6f695404d595526b645714d">sqlfiddle<i class="fa fa-external-link"></i></span></p>
<p><strong>此文作者</strong>：Daniel Shih(石頭)<br><strong>此文地址</strong>： <a href="https://isdaniel.github.io/dynamic-pivot/">https://isdaniel.github.io/dynamic-pivot/</a> <br><strong>版權聲明</strong>：本博客所有文章除特別聲明外，均採用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC90dy8=" title="https://creativecommons.org/licenses/by-nc-sa/3.0/tw/">CC BY-NC-SA 3.0 TW<i class="fa fa-external-link"></i></span> 許可協議。轉載請註明出處！</p>
]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>Dynamic-Pivot</tag>
        <tag>Pivot</tag>
      </tags>
  </entry>
  <entry>
    <title>.Net使用RabbitMq EasyNetQ介紹</title>
    <url>/easy-net-mq-introduce/</url>
    <content><![CDATA[<h2 id="前文"><a href="#前文" class="headerlink" title="前文"></a>前文</h2><p>現今越來越多系統使用MQ來達成非同步並來提升系統吞吐量，我今天想要介紹的是<span class="exturl" data-url="aHR0cHM6Ly9lYXN5bmV0cS5jb20v" title="https://easynetq.com/">EasyNetQ<i class="fa fa-external-link"></i></span>一個封裝RabbitMq Client .net框架</p>
<ul>
<li>小型DI容器</li>
<li>對於RabbitMq封裝</li>
<li>對於連接使用lazy connection連接RabbitMq</li>
</ul>
<blockquote>
<p>If the server disconnects for any reason (maybe a network fault, maybe the RabbitMQ server itself has been bounced), EasyNetQ will revert to polling the endpoint until it can reconnect.</p>
</blockquote>
<p>使用EasyNetQ來操作RabbitMq簡單很多，但在使用上有些地方需要注意</p>
<p>本篇會再跟大家分享</p>
<h2 id="RabbitMq-Client-vs-EasyNetQ程式碼比較"><a href="#RabbitMq-Client-vs-EasyNetQ程式碼比較" class="headerlink" title="RabbitMq Client vs EasyNetQ程式碼比較"></a>RabbitMq Client vs EasyNetQ程式碼比較</h2><p>我會使用之前使用RabbitMq Client寫的範例利用EasyNetQ來改寫一次.</p>
<p>程式原始碼 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2lzZGFuaWVsL0Jsb2dTYW1wbGUvdHJlZS9tYXN0ZXIvc3JjL1NhbXBsZXM=" title="https://github.com/isdaniel/BlogSample/tree/master/src/Samples">Sample Code<i class="fa fa-external-link"></i></span></p>
<h3 id="Publisher程式碼"><a href="#Publisher程式碼" class="headerlink" title="Publisher程式碼"></a>Publisher程式碼</h3><p>這是使用RabbitMq Client寫的版本</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//建立連接工廠</span></span><br><span class="line">ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory</span><br><span class="line">&#123;</span><br><span class="line">    UserName = <span class="string">"guest"</span>,</span><br><span class="line">    Password = <span class="string">"guest"</span>,</span><br><span class="line">    HostName = <span class="string">"localhost"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">string</span> exchangeName = <span class="string">"my.Exchange"</span>;</span><br><span class="line"><span class="keyword">string</span> routeKey = <span class="string">"my.routing"</span>;</span><br><span class="line"><span class="keyword">string</span> queueName = <span class="string">"my.queue"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> connection = factory.CreateConnection())<span class="comment">//创建通道</span></span><br><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> channel = connection.CreateModel())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">region</span> 如果在RabbitMq手動建立可以忽略這段程式</span></span><br><span class="line">    <span class="comment">//建立一個Queue</span></span><br><span class="line">    channel.QueueDeclare(queueName, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">    <span class="comment">//建立一個Exchange</span></span><br><span class="line">    channel.ExchangeDeclare(exchangeName, ExchangeType.Direct, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">    <span class="comment">//把Queue跟Exchange</span></span><br><span class="line">    channel.QueueBind(queueName, exchangeName, routeKey); </span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">    Console.WriteLine(<span class="string">"\nRabbitMQ連接成功,如需離開請按下Escape鍵"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">string</span> input = <span class="keyword">string</span>.Empty;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        input = Console.ReadLine();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> messageBytes = Encoding.UTF8.GetBytes(input);</span><br><span class="line">        channel.BasicPublish(exchange: exchangeName,</span><br><span class="line">                              routingKey: routeKey,</span><br><span class="line">                              body: messageBytes);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">while</span> (Console.ReadKey().Key != ConsoleKey.Escape);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我在利用EasyNetQ改寫後變的如下，是不是簡潔很多?</p>
<blockquote>
<p>因為EasyNetQ幫我們把一些程式封裝起來讓我們關注發送訊息</p>
</blockquote>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">string</span> exchangeName = <span class="string">"my.Exchange"</span>;</span><br><span class="line"><span class="keyword">string</span> routeKey = <span class="string">"my.routing"</span>;</span><br><span class="line"><span class="keyword">string</span> queueName = <span class="string">"my.queue"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> bus = RabbitHutch.CreateBus(<span class="string">"host=127.0.0.1;port=5672;username=guest;password=guest"</span>).Advanced)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> exchange = bus.ExchangeDeclare(exchangeName, ExchangeType.Direct);</span><br><span class="line">    <span class="keyword">var</span> queue = bus.QueueDeclare(queueName);</span><br><span class="line">    bus.Bind(exchange, queue, routeKey);</span><br><span class="line"></span><br><span class="line">    Console.WriteLine(<span class="string">"請輸入訊息!"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">string</span> input = Console.ReadLine();</span><br><span class="line"></span><br><span class="line">        bus.Publish(exchange, <span class="string">"my.routing"</span>, <span class="literal">false</span>, <span class="keyword">new</span> Message&lt;<span class="keyword">string</span>&gt;(input));</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">while</span> (Console.ReadKey().Key != ConsoleKey.Escape);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果你是用RabbitMQ Client可以正常收訊息EasyNetQ發送訊息，但如果使用EasyNetQ收RabbitMQ Client發送的訊息就會有問題是為什麼呢？</p>
<p>稍後會跟大家揭密.</p>
<h3 id="RabbitMQ-Consumer-程式碼"><a href="#RabbitMQ-Consumer-程式碼" class="headerlink" title="RabbitMQ Consumer 程式碼"></a>RabbitMQ Consumer 程式碼</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory</span><br><span class="line">&#123;</span><br><span class="line">    UserName = <span class="string">"guest"</span>,</span><br><span class="line">    Password = <span class="string">"guest"</span>,</span><br><span class="line">    HostName = <span class="string">"127.0.0.1"</span>,</span><br><span class="line">    Port = <span class="number">5672</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">string</span> queueName = <span class="string">"DirectQueue"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> connection = factory.CreateConnection())</span><br><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> channel = connection.CreateModel())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//channel.QueueBind</span></span><br><span class="line">    EventingBasicConsumer consumer = <span class="keyword">new</span> EventingBasicConsumer(channel);</span><br><span class="line">    channel.BasicQos(<span class="number">0</span>, <span class="number">1</span>, <span class="literal">false</span>);</span><br><span class="line">    <span class="comment">//接收到消息事件 consumer.IsRunning</span></span><br><span class="line">    consumer.Received += (ch, ea) =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> message = Encoding.UTF8.GetString(ea.Body);</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">$"Queue:<span class="subst">&#123;queueName&#125;</span>收到資料： <span class="subst">&#123;message&#125;</span>"</span>);</span><br><span class="line">        channel.BasicAck(ea.DeliveryTag, <span class="literal">false</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    channel.BasicConsume(queueName, <span class="literal">false</span>, consumer); </span><br><span class="line">    Console.WriteLine(<span class="string">"接收訊息"</span>);</span><br><span class="line">    Console.ReadKey();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我在利用EasyNetQ改寫後變如下</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">string</span> queueName = <span class="string">"my.queue"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> bus = RabbitHutch.CreateBus(<span class="string">"host=127.0.0.1;port=5672;username=guest;password=guest"</span>))</span><br><span class="line">&#123;</span><br><span class="line">    Task.Run(() =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            bus.SendReceive.Receive&lt;<span class="keyword">string</span>&gt;(queueName, (m) =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(m);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    Console.WriteLine(<span class="string">"開始接收訊息"</span>);</span><br><span class="line">    Console.ReadKey();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到EasyNetQ在API資料封裝幫我們做了些事情(原本RabbitMQ Client使用<code>byte[]</code>來傳輸資料，而EasyNetQ幫我們提供可以使用泛型或物件的方式傳遞)</p>
<blockquote>
<p>但EasyNetQ部分功能也不會平白產生，在MQ Header那邊有做些手腳.還記得我前面說的那個問題嗎?<br>如果你是用RabbitMQ Client可以正常收訊息EasyNetQ發送訊息，但如果使用EasyNetQ收RabbitMQ Client發送的訊息就會有問題是為什麼呢？</p>
</blockquote>
<h2 id="EasyNetQ小秘密"><a href="#EasyNetQ小秘密" class="headerlink" title="EasyNetQ小秘密"></a>EasyNetQ小秘密</h2><p>上面我有留一個問題</p>
<blockquote>
<p>如果你是用RabbitMQ Client可以正常收訊息EasyNetQ發送訊息，但如果使用EasyNetQ收RabbitMQ Client發送的訊息就會有問題是為什麼呢？</p>
</blockquote>
<p>如果你用EasyNetQ收RabbitMQ Client發送的訊息會發現Queue中會多出<code>EasyNetQ_Default_Error_Queue</code>(這個是收集<code>EasyNetQ</code>錯誤的Queue).</p>
<p>錯誤訊息如下圖</p>
<p><img src="https://i.imgur.com/FCB5JZp.png" alt></p>
<p>如果知道的小夥伴可以忽略此節，但如果不知道的人我推薦你要來了解一下</p>
<p>我們先利用EasyNetQ Publisher送一些訊息，再RabbitMq瀏覽畫面點選Queue</p>
<p><img src="https://i.imgur.com/aVgYaQg.png" alt></p>
<p>點選<strong>Get messages</strong>並按下Get Message按鈕，能看到<code>Properties</code>中有<code>type:System.String, System.Private.CoreLib</code>.</p>
<p><img src="https://i.imgur.com/5xoyQ0E.png" alt="https://i.imgur.com/5xoyQ0E.png"></p>
<p>聰明如你應該可以猜到原來EasyNetQ之所以可以在Publisher和Comsumer之間使用泛型是因為EasyNetQ在Property使用type來傳輸使用Type資訊.</p>
<p>在Comsumer可以利用這些資訊來組裝物件.</p>
<blockquote>
<p>這邊有點要注意，因為她是傳送Type資訊，假如你兩個lib都有一個<code>Person</code>類別且裡面<code>Property</code>名稱,類型都一樣，但Publisher和Comsumer之間利用泛型轉換會報錯<br>因為兩個lib的<code>Person</code>類別Type的metadata資訊不一樣</p>
</blockquote>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>有了EasyNetQ操作RabbitMq就簡單許多，但我個人覺得目前API還可以再加強多封裝些不一樣的情境，目前提供API有點少.</p>
<blockquote>
<p>目前如果要用特別一點的需求可以利用<code>IAdvancedBus</code>來完成</p>
</blockquote>
<p>另外EasyNetQ也有DI Container只是我還沒研究，等之後研究在跟大家分享</p>
<p><strong>此文作者</strong>：Daniel Shih(石頭)<br><strong>此文地址</strong>： <a href="https://isdaniel.github.io/easy-net-mq-introduce/">https://isdaniel.github.io/easy-net-mq-introduce/</a> <br><strong>版權聲明</strong>：本博客所有文章除特別聲明外，均採用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC90dy8=" title="https://creativecommons.org/licenses/by-nc-sa/3.0/tw/">CC BY-NC-SA 3.0 TW<i class="fa fa-external-link"></i></span> 許可協議。轉載請註明出處！</p>
]]></content>
      <categories>
        <category>javascript</category>
        <category>vue.js</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>vue.js</tag>
        <tag>Restcountries</tag>
      </tags>
  </entry>
  <entry>
    <title>Reflection在進化-淺談Expression表達式</title>
    <url>/expression-vs-reflection/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>稍微有經驗的.net工程師一定聽過或使用過Reflection,Reflection雖然好用(能動態處理很多事情)但對於效能會有些影響.</p>
<p>我能否擁有Reflection的動態彈性且兼顧效能呢?</p>
<p>有:就是我們這次要介紹的Expression.</p>
<h2 id="Expression-vs-Reflection-performace"><a href="#Expression-vs-Reflection-performace" class="headerlink" title="Expression vs Reflection performace"></a>Expression vs Reflection performace</h2><p>我會準備一個範例來比較<code>Expression</code>和<code>Reflection</code>效能差異</p>
<ul>
<li><code>Expression</code></li>
<li><code>Activator.CreateInstance</code></li>
</ul>
<h3 id="Activator-CreateInstance-Code"><a href="#Activator-CreateInstance-Code" class="headerlink" title="Activator.CreateInstance Code"></a>Activator.CreateInstance Code</h3><p><code>Activator.CreateInstance</code>沒甚麼好說就是一個靜態方法傳入<code>Type</code>動態產生一個物件</p>
<h3 id="Expression-code"><a href="#Expression-code" class="headerlink" title="Expression code"></a>Expression code</h3><p>Expression程式碼如下,能發現只是為了建立一個物件需要寫一大堆程式碼(但這些程式碼對於追求效能的你是必須的)</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delegate</span> T Func&lt;T&gt;(<span class="keyword">params</span> <span class="keyword">object</span>[] args);</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//get a lambda method to create new object.</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> Func&lt;T&gt; ExpressionCreator&lt;T&gt;()</span><br><span class="line">	&#123;</span><br><span class="line">		ConstructorInfo ctor = <span class="keyword">typeof</span>(T).GetConstructors().FirstOrDefault();</span><br><span class="line">		Type type = ctor.DeclaringType;</span><br><span class="line"></span><br><span class="line">		ParameterInfo[] paramsInfo = ctor.GetParameters();</span><br><span class="line"></span><br><span class="line">		ParameterExpression param =</span><br><span class="line">			Expression.Parameter(<span class="keyword">typeof</span>(<span class="keyword">object</span>[]), <span class="string">"args"</span>);</span><br><span class="line"></span><br><span class="line">		Expression[] argsExp =</span><br><span class="line">			<span class="keyword">new</span> Expression[paramsInfo.Length];</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; paramsInfo.Length; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			Expression index = Expression.Constant(i);</span><br><span class="line">			Type paramType = paramsInfo[i].ParameterType;</span><br><span class="line"></span><br><span class="line">			Expression paramAccessorExp =</span><br><span class="line">				Expression.ArrayIndex(param, index);</span><br><span class="line"></span><br><span class="line">			Expression paramCastExp =</span><br><span class="line">				Expression.Convert(paramAccessorExp, paramType);</span><br><span class="line"></span><br><span class="line">			argsExp[i] = paramCastExp;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		NewExpression newExp = Expression.New(ctor, argsExp);</span><br><span class="line"></span><br><span class="line">		LambdaExpression lambda = Expression.Lambda(<span class="keyword">typeof</span>(Func&lt;T&gt;), newExp, param);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> (Func&lt;T&gt;)lambda.Compile();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>產生出來Lambda程式碼如下,之後我們就可以透過此lambda來產生我們要物件摟</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">.Lambda <span class="meta">#Lambda1&lt;ConsoleWeb.Func`1[ConsoleWeb.A]&gt;(System.Object[] $args) &#123;</span></span><br><span class="line">    .New ConsoleWeb.A()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="BenchmarkDotNet分析"><a href="#BenchmarkDotNet分析" class="headerlink" title="BenchmarkDotNet分析"></a>BenchmarkDotNet分析</h2><p>Sample Project放在<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2lzZGFuaWVsL0Jsb2dTYW1wbGUvdHJlZS9tYXN0ZXIvc3JjL1NhbXBsZXMvRXhwcmVzc2lvblZzUmVmbGVjdGlvbg==" title="https://github.com/isdaniel/BlogSample/tree/master/src/Samples/ExpressionVsReflection">GitHub ExpressionVsReflection<i class="fa fa-external-link"></i></span></p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">delegate</span> T Func&lt;T&gt;(<span class="keyword">params</span> <span class="keyword">object</span>[] args);</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ObjectProvider</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> ConcurrentDictionary&lt;<span class="keyword">string</span>,Delegate&gt; _mapFunc = <span class="keyword">new</span> ConcurrentDictionary&lt;<span class="keyword">string</span>, Delegate&gt;();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> T ReflectionCreator&lt;T&gt;(<span class="keyword">params</span> <span class="keyword">object</span>[] args)</span><br><span class="line">		<span class="keyword">where</span> T : <span class="keyword">class</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> Activator.CreateInstance(<span class="keyword">typeof</span>(T), args) <span class="keyword">as</span> T;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> Func&lt;T&gt; ExpressionCreator&lt;T&gt;()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">var</span> key = <span class="keyword">typeof</span>(T).Name;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (!_mapFunc.TryGetValue(key, <span class="keyword">out</span> Delegate result))</span><br><span class="line">		&#123;</span><br><span class="line">			ConstructorInfo ctor = <span class="keyword">typeof</span>(T).GetConstructors().FirstOrDefault();</span><br><span class="line"></span><br><span class="line">			ParameterInfo[] paramsInfo = ctor.GetParameters();</span><br><span class="line"></span><br><span class="line">			ParameterExpression param =</span><br><span class="line">				Expression.Parameter(<span class="keyword">typeof</span>(<span class="keyword">object</span>[]), <span class="string">"args"</span>);</span><br><span class="line"></span><br><span class="line">			Expression[] argsExp =</span><br><span class="line">				<span class="keyword">new</span> Expression[paramsInfo.Length];</span><br><span class="line"></span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; paramsInfo.Length; i++)</span><br><span class="line">			&#123;</span><br><span class="line">				Expression index = Expression.Constant(i);</span><br><span class="line">				Type paramType = paramsInfo[i].ParameterType;</span><br><span class="line"></span><br><span class="line">				Expression paramAccessorExp =</span><br><span class="line">					Expression.ArrayIndex(param, index);</span><br><span class="line"></span><br><span class="line">				Expression paramCastExp =</span><br><span class="line">					Expression.Convert(paramAccessorExp, paramType);</span><br><span class="line"></span><br><span class="line">				argsExp[i] = paramCastExp;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			NewExpression newExp = Expression.New(ctor, argsExp);</span><br><span class="line"></span><br><span class="line">			LambdaExpression lambda = Expression.Lambda(<span class="keyword">typeof</span>(Func&lt;T&gt;), newExp, param);</span><br><span class="line"></span><br><span class="line">			result = lambda.Compile();</span><br><span class="line"></span><br><span class="line">			_mapFunc.GetOrAdd(key, result);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> (Func&lt;T&gt;)result;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">BenchmarkDotNet</span>=v0.<span class="number">12.1</span>, OS=Windows <span class="number">10.0</span>.<span class="number">18363.1440</span> (<span class="number">1909</span>/November2018Update/<span class="number">19</span>H2)</span><br><span class="line">Intel Core i7-9700 CPU 3.00GHz, 1 CPU, 8 logical and 8 physical cores</span><br><span class="line">  [Host]     : .NET Framework 4.8 (4.8.4250.0), X86 LegacyJIT DEBUG  [AttachedDebugger]</span><br><span class="line">  ShortRun   : .NET Framework 4.8 (4.8.4250.0), X86 LegacyJIT</span><br><span class="line">  Job-ZMUHMP : .NET Framework 4.8 (4.8.4250.0), X86 LegacyJIT</span><br><span class="line"></span><br><span class="line">|                            Method |         Mean |    StdDev |      Error |  Gen 0 | Gen 1 | Gen 2 | Allocated |</span><br><span class="line">|---------------------------------- |-------------:|----------:|-----------:|-------:|------:|------:|----------:|</span><br><span class="line">|  &amp;#39;ExpressionCreator no parameter&amp;#39; |     54.87 ns |  0.111 ns |   2.021 ns |      - |     - |     - |         - |</span><br><span class="line">| &amp;#39;ExpressionCreator had parameter&amp;#39; |     77.08 ns |  0.511 ns |   9.314 ns | 0.0076 |     - |     - |      40 B |</span><br><span class="line">|  &amp;#39;ReflectionCreator no parameter&amp;#39; |    463.32 ns |  2.229 ns |  40.667 ns | 0.0318 |     - |     - |     168 B |</span><br><span class="line">| &amp;#39;ReflectionCreator had parameter&amp;#39; |    604.89 ns | 13.413 ns | 244.710 ns | 0.0426 |     - |     - |     224 B |</span><br></pre></td></tr></table></figure>
<p>上面顯示使用Expression效能比起使用Reflection有明顯提升.</p>
<h3 id="Expression小提醒"><a href="#Expression小提醒" class="headerlink" title="Expression小提醒"></a>Expression小提醒</h3><blockquote>
<p>如果使用Expression或Emit技術時,產生的程式碼(委派)記得使用Cache存放起來,因為如果每次執行都運算Compile效能反而會比Reflection還要更差.</p>
</blockquote>
<p>如果沒有使用Cache來執行Expression效率就大大降低甚至比Reflection還要差.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GHERKIN"><figure class="iseeu highlight /gherkin"><table><tr><td class="code"><pre><span class="line">|<span class="string">                            Method </span>|<span class="string">         Mean </span>|<span class="string">    StdDev </span>|<span class="string">       Error </span>|<span class="string">  Gen 0 </span>|<span class="string">  Gen 1 </span>|<span class="string"> Gen 2 </span>|<span class="string"> Allocated </span>|</span><br><span class="line">|<span class="string">---------------------------------- </span>|<span class="string">-------------:</span>|<span class="string">----------:</span>|<span class="string">------------:</span>|<span class="string">-------:</span>|<span class="string">-------:</span>|<span class="string">------:</span>|<span class="string">----------:</span>|</span><br><span class="line">|<span class="string">  &amp;#39;ReflectionCreator no parameter&amp;#39; </span>|<span class="string">     464.3 ns </span>|<span class="string">   5.30 ns </span>|<span class="string">    96.70 ns </span>|<span class="string"> 0.0318 </span>|<span class="string">      - </span>|<span class="string">     - </span>|<span class="string">     168 B </span>|</span><br><span class="line">|<span class="string"> &amp;#39;ReflectionCreator had parameter&amp;#39; </span>|<span class="string">     586.2 ns </span>|<span class="string">   0.40 ns </span>|<span class="string">     7.25 ns </span>|<span class="string"> 0.0426 </span>|<span class="string">      - </span>|<span class="string">     - </span>|<span class="string">     224 B </span>|</span><br><span class="line">|<span class="string"> &amp;#39;ReflectionCreator had parameter&amp;#39; </span>|<span class="string">  10,000.0 ns </span>|<span class="string">   0.00 ns </span>|<span class="string">          NA </span>|<span class="string">      - </span>|<span class="string">      - </span>|<span class="string">     - </span>|<span class="string">         - </span>|</span><br><span class="line">|<span class="string">  &amp;#39;ReflectionCreator no parameter&amp;#39; </span>|<span class="string">  11,500.0 ns </span>|<span class="string">   0.00 ns </span>|<span class="string">          NA </span>|<span class="string">      - </span>|<span class="string">      - </span>|<span class="string">     - </span>|<span class="string">         - </span>|</span><br><span class="line">|<span class="string">  &amp;#39;ExpressionCreator no parameter&amp;#39; </span>|<span class="string">  45,225.3 ns </span>|<span class="string">  64.40 ns </span>|<span class="string"> 1,174.88 ns </span>|<span class="string"> 0.4883 </span>|<span class="string"> 0.4069 </span>|<span class="string">     - </span>|<span class="string">    2909 B </span>|</span><br><span class="line">|<span class="string"> &amp;#39;ExpressionCreator had parameter&amp;#39; </span>|<span class="string">  67,297.9 ns </span>|<span class="string"> 522.99 ns </span>|<span class="string"> 9,541.35 ns </span>|<span class="string"> 0.5697 </span>|<span class="string"> 0.4883 </span>|<span class="string">     - </span>|<span class="string">    3324 B </span>|</span><br><span class="line">|<span class="string"> &amp;#39;ExpressionCreator had parameter&amp;#39; </span>|<span class="string"> 339,900.0 ns </span>|<span class="string">   0.00 ns </span>|<span class="string">          NA </span>|<span class="string">      - </span>|<span class="string">      - </span>|<span class="string">     - </span>|<span class="string">         - </span>|</span><br><span class="line">|<span class="string">  &amp;#39;ExpressionCreator no parameter&amp;#39; </span>|<span class="string"> 352,500.0 ns </span>|<span class="string">   0.00 ns </span>|<span class="string">          NA </span>|<span class="string">      - </span>|<span class="string">      - </span>|<span class="string">     - </span>|<span class="string">         - </span>|</span><br></pre></td></tr></table></figure></div>
<h3 id="常用Expression解說"><a href="#常用Expression解說" class="headerlink" title="常用Expression解說"></a>常用Expression解說</h3><p>透過上面範例,能發現Expression核心概念是用來產生Delegate程式碼並呼叫使用.</p>
<blockquote>
<p>因為動作最小單位是<strong>方法</strong>,委派可以視做<strong>方法</strong></p>
</blockquote>
<ul>
<li>Expression.Call 呼叫委派方法<ul>
<li>Note:如果呼叫static方法第一個參數是null</li>
</ul>
</li>
<li>Expression.Assign 對於Expression給值 ex: expression1 = expression2</li>
<li>Expression.Block  大括號區域 ex:<code>{}</code></li>
<li>Expression.Convert 轉型</li>
<li>Expression.Multiply 乘法</li>
<li>Expression.Bind 綁定物件屬性,成員</li>
<li>Expression.MemberInit 建構子成員初始化</li>
<li>(BinaryExpression)<ul>
<li>Expression.GreaterThanOrEqual:大於等於</li>
<li>Expression.GreaterThan:大於</li>
<li>Expression.LessThanOrEqual:小於等於</li>
<li>Expression.LessThan:小於</li>
</ul>
</li>
<li>Expression.Lambda 封裝成方法</li>
<li>Expression.New 建立New語法</li>
</ul>
<h4 id="ArrayAccess-vs-ArrayIndex"><a href="#ArrayAccess-vs-ArrayIndex" class="headerlink" title="ArrayAccess vs ArrayIndex"></a>ArrayAccess vs ArrayIndex</h4><ul>
<li>ArrayIndex 是只讀Index</li>
<li>ArrayAccess 可讀可寫</li>
</ul>
<blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTQ5NzM4MTMvYXJyYXlhY2Nlc3MtdnMtYXJyYXlpbmRleC1pbi1leHByZXNzaW9uLXRyZWU=" title="https://stackoverflow.com/questions/14973813/arrayaccess-vs-arrayindex-in-expression-tree">https://stackoverflow.com/questions/14973813/arrayaccess-vs-arrayindex-in-expression-tree<i class="fa fa-external-link"></i></span></p>
</blockquote>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>Expression和Emit雖然難寫,但寫的好可以讓程式碼更有彈性且比Reflection更有效能,Expression在許多知名架構都有使用(包含微軟MVC框架也是使用Reflection + Expression來優化),舉一個例子動態代理就很適合使用<code>Expression</code>或<code>Emit</code>來優化.</p>
<blockquote>
<p>知名動態代理框架<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2Nhc3RsZXByb2plY3QvQ29yZQ==" title="https://github.com/castleproject/Core">castle<i class="fa fa-external-link"></i></span>有使用到Emit.</p>
</blockquote>
<p>Emit想要解決的問題和Expression類似,只是Emit提供更多底層API讓我們呼叫(比Expression可以控制更多細節)</p>
<blockquote>
<p>Emit可以寫類似IL程式語法</p>
</blockquote>
<p>想必然Emit寫起來也更繁瑣更容易出錯.</p>
<p>所以了解Expression是前往.net進階工程師必經之路.</p>
<p><strong>此文作者</strong>：Daniel Shih(石頭)<br><strong>此文地址</strong>： <a href="https://isdaniel.github.io/expression-vs-reflection/">https://isdaniel.github.io/expression-vs-reflection/</a> <br><strong>版權聲明</strong>：本博客所有文章除特別聲明外，均採用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC90dy8=" title="https://creativecommons.org/licenses/by-nc-sa/3.0/tw/">CC BY-NC-SA 3.0 TW<i class="fa fa-external-link"></i></span> 許可協議。轉載請註明出處！</p>
]]></content>
      <categories>
        <category>C#</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>OOP</tag>
        <tag>Reflection</tag>
        <tag>Expression</tag>
      </tags>
  </entry>
  <entry>
    <title>為什麼 Float和Double會有誤差 (浮點數儲存原理)</title>
    <url>/float-double/</url>
    <content><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>大家都知道float和double會有誤差 </p>
<p>但原因是什麼呢? </p>
<p>今天就跟大家分享Float和Double會誤差的原因</p>
<h2 id="一-浮點數介紹"><a href="#一-浮點數介紹" class="headerlink" title="一. 浮點數介紹"></a>一. 浮點數介紹</h2><blockquote>
<p>一開始先對於float和double做身家調查</p>
</blockquote>
<h3 id="浮點類型的範圍"><a href="#浮點類型的範圍" class="headerlink" title="浮點類型的範圍"></a>浮點類型的範圍</h3><table>
<thead>
<tr>
<th>類型</th>
<th>最小值</th>
<th>最大值</th>
</tr>
</thead>
<tbody>
<tr>
<td>float</td>
<td>1.175494351 E – 38</td>
<td>3.402823466 E + 38</td>
</tr>
<tr>
<td>double</td>
<td>2.2250738585072014 E – 308</td>
<td>1.7976931348623158 E + 308</td>
</tr>
</tbody>
</table>
<h3 id="浮點類型"><a href="#浮點類型" class="headerlink" title="浮點類型"></a>浮點類型</h3><table>
<thead>
<tr>
<th>類型</th>
<th>有效數字</th>
<th>位元組數</th>
</tr>
</thead>
<tbody>
<tr>
<td>float</td>
<td>6 – 7</td>
<td>4</td>
</tr>
<tr>
<td>double</td>
<td>15 – 16</td>
<td>8</td>
</tr>
</tbody>
</table>
<h3 id="二-浮點數產生"><a href="#二-浮點數產生" class="headerlink" title="二. 浮點數產生"></a>二. 浮點數產生</h3><p>以<code>float</code>來說可以儲存4 byte  = 32 bit  是說最多可以存32個 0 or 1</p>
<p>但 <code>float</code> 和 <code>int</code>都是 32 bit 使用方式卻完全不一樣</p>
<p>浮點數計算方式是由 <span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSUVFRV83NTQ=" title="https://en.wikipedia.org/wiki/IEEE_754">IEEE 754<i class="fa fa-external-link"></i></span> 進位浮點數算術標準創立</p>
<p>他把浮點數分成三部分 <code>Sign(符號)</code>, <code>Exponent(指數)</code>, <code>Mantissa(尾數)</code> 來表示他的值**</p>
<blockquote>
<p>表示方式 <span style="color:#FF0000;">1</span><span style="color:#0000CD;">111 1111 1</span><span style="color:#8B4513;">111 1111 1111 1111 1111 1111</span></p>
</blockquote>
<ol>
<li><p>Sign(符號)  第1個 bit ​ (紅色)</p>
<ol>
<li>0 = 正數</li>
<li>1 = 負數</li>
</ol>
</li>
<li><p>Exponent(指數) 第2個  ~ 第9個 bit (藍色)</p>
<ol>
<li>總共8 bit 最大值 255 (二進至值)</li>
<li>127 為中間值原點 </li>
</ol>
</li>
<li><p>Mantissa(尾數) 第10個  ~ 第32個 bit (棕色)</p>
<ol>
<li>計算之後的尾數</li>
</ol>
</li>
</ol>
<p>到目前因該是有看沒有懂XD</p>
<p>等等帶個範例大家就會比較清楚了</p>
<h3 id="三-實例解說"><a href="#三-實例解說" class="headerlink" title="三. 實例解說"></a>三. 實例解說</h3><blockquote>
<p>後面看到 X 代表等待計算的值</p>
</blockquote>
<p>12.5f 為例子 如何計算出 32 bit 如何儲存這個值?</p>
<ol>
<li><p>判斷是正數還是負數決定Sign(符號)</p>
<ol>
<li>因為12.5f是正數  <code>0XXX XXXX XXXX XXXX XXXX XXXX XXXX XXXX</code></li>
</ol>
</li>
<li><p>計算Exponent(指數)​​ </p>
<ol>
<li>將12.5f轉成二進制 <strong>12.5f  = 1100.1</strong></li>
<li><span style="color:#FF0000;"><span style="color:#FF0000;"><strong>將數值底數變成 </strong></span><strong>1&lt;底數&lt;2   </strong></span><strong>1100.1​ = 1.1001 * 2 ^ 3 </strong></li>
<li><strong>2^3 二的三次方就是  </strong>指數​要加的值  127 + 3 = 130 (<strong><span style="color:#0000CD;">1000 0010</span></strong>)</li>
</ol>
<ul>
<li>*1<span style="color:#0000CD;">011 1111 1</span>XXX XXXX XXXX XXXX XXXX XXXX </li>
<li>*0<span style="color:#0000CD;">000 0001 1</span>XXX XXXX XXXX XXXX XXXX XXXX  </li>
<li>*———————————————————————–</li>
<li>*1<span style="color:#0000CD;"></span><span style="color:#0000CD;">100 0001 0</span><span style="color:#0000CD;"></span>XXX XXXX XXXX XXXX XXXX XXXX </li>
</ul>
</li>
<li><p>Mantissa(尾數)​ 計算​</p>
<ol>
<li>最後將 <code>1.1001</code> 小數點後的值 <code>.1001</code>追加到(指數​)後面</li>
</ol>
<ul>
<li><strong>   ​1100 0001 0000 0000 0000 0000 0000 0000 ​​</strong></li>
<li><strong>+ 0000 0000 0<span style="color:#FF0000;">100 1</span>000 0000 0000 0000 0000 ​</strong></li>
<li><strong>—————————————————————</strong></li>
<li><strong> 0100 0001 0100 1000 0000 0000 0000 0000</strong></li>
</ul>
</li>
</ol>
<blockquote>
<p>所以我們可以得出 12.5f 在 32bit 中是</p>
</blockquote>
<div class="note note--normal">0100 0001 0100 1000 0000 0000 0000 0000</div>

<p>這裡有個工具 <span class="exturl" data-url="aHR0cDovL3d3dy5iaW5hcnljb252ZXJ0LmNvbS9yZXN1bHRfZmxvYXQuaHRtbD9kZWNpbWFsPTA0OTA1MDA0NjA1Mw==" title="http://www.binaryconvert.com/result_float.html?decimal=049050046053"> <strong>Float (IEEE754 Single precision 32-bit)</strong><i class="fa fa-external-link"></i></span> 可以方便我們來驗算值是否正確</p>
<p>他很貼心幫我們列出 <strong> Sign(符號), Exponent(</strong>指數<strong>), Mantissa(</strong>尾數<strong>) </strong> 位置給我們對應</p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/%E4%B9%9D%E6%A1%83/5645fb7b-dab2-478f-b703-5fc7ffbc3ecf/1541866994_04424.png" alt></p>
<h3 id="四-為什麼會不精準"><a href="#四-為什麼會不精準" class="headerlink" title="四,為什麼會不精準"></a>四,為什麼會不精準</h3><p>現在我們知道計算 <code>Exponent(指數)</code>​​ 需要將值轉成二進制 ,但如果是12.53f 轉成二進制會變成這樣<code>1100.100000111100111.......</code> 極限值就會和原本的值出現誤差</p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/%E4%B9%9D%E6%A1%83/5645fb7b-dab2-478f-b703-5fc7ffbc3ecf/1541867579_90869.png" alt></p>
<p>如圖 我們可以看到 <code>12.53f</code> 其實會變成 <code>1.252999973297119140625E1</code>  這就是float不準確的原因</p>
<p>float介紹完了 double和float概念一樣只是儲存空間更大而已^^</p>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>因為為了節省空間浮點數 使用特別儲存方式來節省空間,有一好沒兩好這樣就少了精準度</p>
<p><strong>此文作者</strong>：Daniel Shih(石頭)<br><strong>此文地址</strong>： <a href="https://isdaniel.github.io/float-double/">https://isdaniel.github.io/float-double/</a> <br><strong>版權聲明</strong>：本博客所有文章除特別聲明外，均採用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC90dy8=" title="https://creativecommons.org/licenses/by-nc-sa/3.0/tw/">CC BY-NC-SA 3.0 TW<i class="fa fa-external-link"></i></span> 許可協議。轉載請註明出處！</p>
]]></content>
      <categories>
        <category>C#</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>float</tag>
        <tag>double</tag>
        <tag>number</tag>
      </tags>
  </entry>
  <entry>
    <title>建立自己Blog系列(一) 介紹 Github (hosting) + Hexo (Blog) + Appveyor(CICD)</title>
    <url>/github-hexo-appveyor/</url>
    <content><![CDATA[<h2 id="前文："><a href="#前文：" class="headerlink" title="前文："></a>前文：</h2><p>網路上已經有許多Blog託管平台 例如:Google Blog，痞客邦….為何我還要自己寫這篇跟大家分享?</p>
<p>因為上面提供的平台固然好用，但我並無法100%的去修改我想要的樣式或版面.</p>
<p>如果我想要有100%彈性修改我的Blog我就必須建立自己的網站.</p>
<p>但要給別人Hosting需要另外花一筆費用…</p>
<p>就有本次系列文 <code>Github (hosting) + Hexo (Blog) + Appveyor(CICD)</code>．</p>
<p>這個搭配有幾個優點：</p>
<ol>
<li>完全免費</li>
<li>使用MarkDown撰寫Blog就是爽.</li>
<li>練習使用CICD線上工具.</li>
<li>Hexo有許多不一樣絢麗的Theme可以更換且更換方式簡單</li>
</ol>
<p>撰寫發布流程大概如下圖</p>
<p><img src="/images/blog_init.PNG" alt="img"></p>
<h3 id="流程解說："><a href="#流程解說：" class="headerlink" title="流程解說："></a>流程解說：</h3><ol>
<li>使用<code>Hexo</code>樣板撰寫<code>MarkDown</code> Blog</li>
<li>寫完後<code>commit</code>和<code>push</code>至Github Blog Code Repository</li>
<li><code>Appveyor(CI)</code>線上工具會偵測到我們有<code>code commit</code>並執行後續Blog佈版動作</li>
<li>使用<code>Hexo-cli</code>將MarkDown build成html靜態檔案(因為github page只能Hosting靜態頁面)</li>
<li><code>Appveyor(CI)</code> commit並push到hosting Repository.</li>
</ol>
<p>此流程的優點是只需在Code Repository上撰寫完Blog並commit就可以自動發佈到github page上.</p>
<hr>
<h2 id="GitHub-Hosting"><a href="#GitHub-Hosting" class="headerlink" title="GitHub (Hosting)"></a>GitHub (Hosting)</h2><p>GitHub並創建一個名為<strong>username</strong>.github.io Repository，其中username是您在GitHub上的用戶名（或組織名稱）。</p>
<p>例如我的Github帳戶是isdaniel 就建立一個Repository 叫<br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2lzZGFuaWVsL2lzZGFuaWVsLmdpdGh1Yi5pbw==" title="https://github.com/isdaniel/isdaniel.github.io">isdaniel.github.io<i class="fa fa-external-link"></i></span> 只要裡面有版控Html靜態頁面Github page 就可幫我們進行託管.</p>
<p><a href="https://isdaniel.github.io/">https://isdaniel.github.io/</a> 這個網站的進入點在此Repository的index.html頁面.</p>
<p>Note :</p>
<blockquote>
<p>GitHub有個設定，就是每個專案的gh-pages分支可以通過user-domain /項目名來訪問。</p>
</blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9wYWdlcy5naXRodWIuY29tLw==" title="https://pages.github.com/">詳細資料<i class="fa fa-external-link"></i></span></p>
<h2 id="Hexo-Blog"><a href="#Hexo-Blog" class="headerlink" title="Hexo (Blog)"></a>Hexo (Blog)</h2><p><code>Hexo</code> 是一個快速、簡單且強大的網誌框架。Hexo 使用 <code>Markdown</code>（或其他渲染引擎）解析您的文章，並在幾秒鐘內，透過漂亮的主題產生靜態檔案</p>
<p>透過<code>Hexo-cli</code>可以簡單速建立一個blog page,而且<code>Hexo</code>社群活躍且文件支援中文.</p>
<p><code>Hexo</code>提供豐富的插件程式來給使用者,甚至您如果懂Js css Html也可建立自己的Blog樣式或自行擴充.</p>
<h2 id="Appveyor-CICD"><a href="#Appveyor-CICD" class="headerlink" title="Appveyor(CICD)"></a>Appveyor(CICD)</h2><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuYXBwdmV5b3IuY29tLw==" title="https://www.appveyor.com/">appveyor<i class="fa fa-external-link"></i></span>是一個支援Winodws&amp;Linux相關的持續部屬服務</p>
<p>目前免費使用，可透過Github綁定Repository快速建立一套屬於自己的CICD流程.</p>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>這篇跟大家簡單介紹一下會使用到的工具和撰寫blog佈署流程.</p>
<p>日後會有其他篇文章來詳細說明細節.</p>
<ul>
<li><a href="/hexo-github-setting/" title="建立自己Blog系列(二) github Setting">建立自己Blog系列(二) github Setting</a></li>
<li><a href="/hexo-blog-theme/" title="建立自己Blog系列(三) Hexo next theme 介紹">建立自己Blog系列(三) Hexo next theme 介紹</a></li>
<li>建立自己Blog系列(四) Appveyor 介紹 yaml.</li>
</ul>
<p><strong>此文作者</strong>：Daniel Shih(石頭)<br><strong>此文地址</strong>： <a href="https://isdaniel.github.io/github-hexo-appveyor/">https://isdaniel.github.io/github-hexo-appveyor/</a> <br><strong>版權聲明</strong>：本博客所有文章除特別聲明外，均採用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC90dy8=" title="https://creativecommons.org/licenses/by-nc-sa/3.0/tw/">CC BY-NC-SA 3.0 TW<i class="fa fa-external-link"></i></span> 許可協議。轉載請註明出處！</p>
]]></content>
      <categories>
        <category>WebDesign</category>
      </categories>
      <tags>
        <tag>WebDesign</tag>
        <tag>Blog</tag>
        <tag>Github</tag>
        <tag>CICD</tag>
      </tags>
  </entry>
  <entry>
    <title>Appveyor搭配Github自動化上傳Nuget</title>
    <url>/github-with-nugetdeploy/</url>
    <content><![CDATA[<h2 id="前文"><a href="#前文" class="headerlink" title="前文"></a>前文</h2><p>現在CICD越來越普遍,如要提高開發效率和自動化部屬跟Deploy系統有密不可分關係.</p>
<p>今天跟大家分享我開源專案<span class="exturl" data-url="aHR0cHM6Ly93d3cubnVnZXQub3JnL3BhY2thZ2VzL0VsZWN0cm9uaWNJbnZvaWNlX1RXLw==" title="https://www.nuget.org/packages/ElectronicInvoice_TW/">ElectronicInvoice_TW<i class="fa fa-external-link"></i></span>如何利用<br>Github + Appveyor 來完成自動Deploy Package至Nuget上.</p>
<h2 id="關於Appveyor"><a href="#關於Appveyor" class="headerlink" title="關於Appveyor"></a>關於Appveyor</h2><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuYXBwdmV5b3IuY29tL2RvY3Mv" title="https://www.appveyor.com/docs/">Appveyor<i class="fa fa-external-link"></i></span>是一個CI平台,可以透過Github Webhock來觸發一列動作來完成自動化部屬和建置</p>
<blockquote>
<p>甚至Appveyor也有提供Nuget平台提供給開發人員.</p>
</blockquote>
<p>使用GitHub帳號登入後,我們透過<code>NEW PROJECT</code>建立一個CI Job.</p>
<p><img src="https://i.imgur.com/YPKBuFQ.png" alt></p>
<p>選擇我們要建立CICD專案.</p>
<p><img src="https://i.imgur.com/FW4Pd0j.png" alt></p>
<p>最後會在Project頁看到你剛剛新建立Project.</p>
<p><img src="https://i.imgur.com/vA6DIjh.png" alt></p>
<h2 id="建立Appveyor-pipline"><a href="#建立Appveyor-pipline" class="headerlink" title="建立Appveyor pipline"></a>建立Appveyor pipline</h2><p>在Appveyor有兩種方式可以來產生建置專案的pipline</p>
<ul>
<li>透過UI來操作設定</li>
<li>透過appveyor.yml設定(專案root目錄)</li>
</ul>
<p>本文章我會介紹如何<strong>透過appveyor.yml設定</strong></p>
<p>我使用我的開源專案<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2lzZGFuaWVsL0VsZWN0cm9uaWNJbnZvaWNlX1RX" title="https://github.com/isdaniel/ElectronicInvoice_TW">ElectronicInvoice_TW<i class="fa fa-external-link"></i></span>來當作這次範例.</p>
<h3 id="appveyor-yml"><a href="#appveyor-yml" class="headerlink" title="appveyor.yml"></a>appveyor.yml</h3><p>這裡介紹幾個yml重要的屬性</p>
<ul>
<li>image：指定Build的IDE VS版本.</li>
<li>before_build：建置專案前要執行步驟</li>
<li>build_script：建置專案時要執行步驟</li>
<li>after_build：建置專案完成執行步驟</li>
<li>deploy：將你建置完artifact deploy到某個地方</li>
<li>artifacts：存放artifact位置</li>
<li>environment：設定環境變數</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="YML"><figure class="iseeu highlight /yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">image:</span> <span class="string">Visual</span> <span class="string">Studio</span> <span class="number">2019</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">build</span> <span class="string">'&#123;build&#125;'</span></span><br><span class="line"><span class="attr">configuration:</span> <span class="string">Release</span></span><br><span class="line"><span class="attr">platform:</span> <span class="string">Any</span> <span class="string">CPU</span></span><br><span class="line"><span class="attr">before_build:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">cmd:</span> <span class="string">nuget</span> <span class="string">restore</span> <span class="string">src\ElectronicInvoice.sln</span></span><br><span class="line"></span><br><span class="line"><span class="attr">environment:</span></span><br><span class="line">  <span class="attr">my_variable:</span></span><br><span class="line">    <span class="attr">secure:</span> <span class="string">GWztiV993airUIgYQa/8Yp0jZuZ9IWVjAJDxwBRTOvN2C5pBqlArgsUY4uqrGujp</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">build:</span></span><br><span class="line">  <span class="attr">publish_nuget:</span> <span class="literal">true</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">build_script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">dotnet</span> <span class="string">build</span> <span class="string">src\ElectronicInvoice.sln</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">dotnet</span> <span class="string">test</span>  <span class="string">src\ElectronicInvoiceTests</span></span><br><span class="line"><span class="attr">after_build:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">dotnet</span> <span class="string">pack</span> <span class="string">src\ElectronicInvoice.Produce</span></span><br><span class="line"></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">provider:</span> <span class="string">NuGet</span></span><br><span class="line">    <span class="attr">api_key:</span></span><br><span class="line">      <span class="attr">secure:</span> <span class="string">GWztiV993airUIgYQa/8Yp0jZuZ9IWVjAJDxwBRTOvN2C5pBqlArgsUY4uqrGujp</span></span><br><span class="line">    <span class="attr">on:</span></span><br><span class="line">        <span class="attr">branch:</span> <span class="string">master</span></span><br><span class="line">    <span class="attr">artifact:</span> <span class="string">/.*(\.|\.s)nupkg/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">nuget:</span></span><br><span class="line">  <span class="attr">project_feed:</span> <span class="literal">true</span></span><br><span class="line">        </span><br><span class="line"><span class="attr">artifacts:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">'**\*.nupkg'</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">'**\*.snupkg'</span></span><br></pre></td></tr></table></figure></div>
<p><code>deploy</code> Propert決定建置完成後要如何發布artifacts<br>對於Nuget中有幾個重要成員屬性</p>
<ul>
<li>provider：NuGet(Bj4)</li>
<li>api_key：<ul>
<li><code>secure</code>是Deploy Nuget使用API Key(需要透過appveyor加密稍後會跟大家說如何完成)</li>
</ul>
</li>
<li>branch：只有哪個Branch觸發Job才需要上傳檔案.</li>
<li>artifact：查找需要上傳檔案資訊</li>
</ul>
<p>這個YML設定檔有下面流程</p>
<ol>
<li>nuget restore.</li>
<li>build .net core專案</li>
<li>執行unit test</li>
<li>發布package到Nuget(只限於master)</li>
</ol>
<blockquote>
<p>有沒有發現除了寫code和commit code剩下都是由自動化幫我們處理(目前merge request也可以跑自動化,但不會上傳nuget)</p>
</blockquote>
<h3 id="api-key的secure"><a href="#api-key的secure" class="headerlink" title="api_key的secure"></a>api_key的secure</h3><p>在Appveyor設定頁面有個Encrypt YAML頁面,這個頁面很重要可以幫你把重要資料加密起來,所以在Github上看到api_key的secure是我們加密過的.</p>
<p><img src="https://i.imgur.com/VRbUO5i.png" alt></p>
<p>最後就把我們寫好的YML檔案放到專案根目錄,Appveyor預設會在根目錄查找YML檔案並執行腳本.</p>
<p>這是之前跑ElectronicInvoice_TW專案<span class="exturl" data-url="aHR0cHM6Ly9jaS5hcHB2ZXlvci5jb20vcHJvamVjdC9pc2RhbmllbC9lbGVjdHJvbmljaW52b2ljZS10dy9idWlsZHMvMzcxMTg5ODU=" title="https://ci.appveyor.com/project/isdaniel/electronicinvoice-tw/builds/37118985">紀錄<i class="fa fa-external-link"></i></span>歷程</p>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>透過Appveyor我們可以建立一套完整CICD開發上板流程,只要Commit Code並Merge進master就可以自動化發布程式碼跟Nuget.</p>
<p>參考連結：<span class="exturl" data-url="aHR0cHM6Ly93d3cuYXBwdmV5b3IuY29tL2RvY3MvbnVnZXQv" title="https://www.appveyor.com/docs/nuget/">https://www.appveyor.com/docs/nuget/<i class="fa fa-external-link"></i></span></p>
<p><strong>此文作者</strong>：Daniel Shih(石頭)<br><strong>此文地址</strong>： <a href="https://isdaniel.github.io/github-with-nugetdeploy/">https://isdaniel.github.io/github-with-nugetdeploy/</a> <br><strong>版權聲明</strong>：本博客所有文章除特別聲明外，均採用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC90dy8=" title="https://creativecommons.org/licenses/by-nc-sa/3.0/tw/">CC BY-NC-SA 3.0 TW<i class="fa fa-external-link"></i></span> 許可協議。轉載請註明出處！</p>
]]></content>
      <categories>
        <category>CICD</category>
        <category>netcore</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>CICD</tag>
        <tag>Appveyor</tag>
        <tag>.netcore</tag>
      </tags>
  </entry>
  <entry>
    <title>建立自己Blog系列(三) Hexo next theme 介紹</title>
    <url>/hexo-blog-theme/</url>
    <content><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>為何我會選用Hxeo來當作Blog框架?</p>
<p>有下面幾個原因:</p>
<ol>
<li>因為建立於本地端，所以可以更方便離線進行編輯</li>
<li>使用 <code>Markdown</code> 語法撰寫Blog，更方便、通用、容易上手</li>
<li>搭配線上<code>CICD</code>工具部署於 <code>Github</code> 上，完全零成本</li>
<li>中文文件資源多</li>
<li>支援多樣不同樣板，可隨心所欲切換風格</li>
<li>開源社群活躍</li>
<li><strong>基於NodeJs擁有豐富的差件</strong></li>
</ol>
<h2 id="建立自己的Hexo"><a href="#建立自己的Hexo" class="headerlink" title="建立自己的Hexo"></a>建立自己的Hexo</h2><h3 id="安裝-Node-js"><a href="#安裝-Node-js" class="headerlink" title="安裝 Node.js"></a>安裝 Node.js</h3><p>首先先安裝 <span class="exturl" data-url="aHR0cHM6Ly9ub2RlanMub3JnL2VuLw==" title="https://nodejs.org/en/">Node.js 官網下載安裝<i class="fa fa-external-link"></i></span></p>
<p>安裝完後使用<code>CMD</code></p>
<blockquote>
<p>　node -v \<br>npm -v</p>
</blockquote>
<p>查看是否安裝成功.</p>
<h3 id="安裝-Hexo-cli"><a href="#安裝-Hexo-cli" class="headerlink" title="安裝 Hexo-cli"></a>安裝 Hexo-cli</h3><p>使用 <code>npm</code> 來安裝 hexo (須先安裝 Node.js)</p>
<blockquote>
<p>npm install hexo-cli -g</p>
</blockquote>
<p>因為我們之前就有建立一個Code Blog Repository.</p>
<p>我們使用<code>CMD</code> 的 <code>CD</code> 命令進入此資料夾目錄中</p>
<p>在使用<code>hexo cli</code>幫助我們快速建立Blog相關檔案</p>
<blockquote>
<p>hexo init blog       # 初始化 blog</p>
<p>npm install          # 安裝相關套件</p>
</blockquote>
<p>如果要把Hexo deploy到Github上面，需要先安裝</p>
<blockquote>
<p>　npm install hexo-deployer-git –save</p>
</blockquote>
<h2 id="Hexo-config-yml-設定說明"><a href="#Hexo-config-yml-設定說明" class="headerlink" title="Hexo config.yml 設定說明"></a>Hexo config.yml 設定說明</h2><p><code>Hexo</code> 是使用yml檔案格式來當設定檔.</p>
<blockquote>
<p>hexo init blog       # 初始化 blog</p>
</blockquote>
<p>資料夾檔案結構如下圖：</p>
<p><img src="/images/github_hexo_theme1.PNG" alt="img"></p>
<p>當在Blog Code Repository 中建立完<code>Hexo</code>資料檔後會有一個<code>_config.yml</code>檔案,就是<code>Hexo</code>的設定檔案.</p>
<h2 id="解說-config-yml-設定檔"><a href="#解說-config-yml-設定檔" class="headerlink" title="解說 config.yml 設定檔"></a>解說 config.yml 設定檔</h2><h3 id="預設頁面："><a href="#預設頁面：" class="headerlink" title="預設頁面："></a>預設頁面：</h3><pre><code>title: 石頭的coding之路   #網站標題
subtitle: 
description: 好點子沒價值，有價值的是把好點子實現 #網站描述
keywords:
author: Daniel Shih #您的名字
language: zh-tw  #語系
timezone:        #時差

# Header
menu:
Home: /
Archives: /archives
About: /about.html
Tags: /tags
Categories: /categories
</code></pre><h3 id="路由設定："><a href="#路由設定：" class="headerlink" title="路由設定："></a>路由設定：</h3><pre><code># URL
url: https://isdaniel.github.io/ #網站的網址
root: /  #網站的根目錄
permalink: :year/:month/:day/:title/
permalink_defaults:
</code></pre><h3 id="資料檔設定："><a href="#資料檔設定：" class="headerlink" title="資料檔設定："></a>資料檔設定：</h3><pre><code># Directory
source_dir: source #原始檔案資料夾，這個資料夾用於存放您的內容 預設值 source
public_dir: public #使用Hexo g 產生靜態檔案資料夾名稱
tag_dir: tags #標籤資料夾名稱
archive_dir: archives #彙整資料夾名稱
category_dir: categories #分類資料夾名稱
code_dir: downloads/code
i18n_dir: :lang #語言資料夾名稱
skip_render:
</code></pre><h3 id="文章設定"><a href="#文章設定" class="headerlink" title="文章設定"></a>文章設定</h3><pre><code>new_post_name: :title.md #新文章的檔案名稱
default_layout: post #預設佈局資料夾
titlecase: false # Transform title into titlecase
external_link: true # Open external links in new tab
filename_case: 0
render_drafts: false
post_asset_folder: false
relative_link: false
future: true
highlight:
enable: true
line_number: true
auto_detect: false
tab_replace:
</code></pre><h3 id="配置index2-generator"><a href="#配置index2-generator" class="headerlink" title="配置index2 generator"></a>配置index2 generator</h3><pre><code>index2_generator:
per_page: 10
order_by: -date
include:
    - category Web 
exclude:
    - tag Hexo 
</code></pre><h3 id="Hexo-時間格式"><a href="#Hexo-時間格式" class="headerlink" title="Hexo 時間格式"></a>Hexo 時間格式</h3><pre><code># Date / Time format
## You can customize the date format as defined in
## http://momentjs.com/docs/#/displaying/format/
date_format: YYYY-MM-DD #日期格式
time_format: HH:mm:ss #時間格式    
</code></pre><h3 id="Hexo-主題設定"><a href="#Hexo-主題設定" class="headerlink" title="Hexo 主題設定"></a>Hexo 主題設定</h3><pre><code># Extensions
theme: next #使用主題名稱, 設為 false 表示關閉主題功能
</code></pre><h3 id="發佈資料設定"><a href="#發佈資料設定" class="headerlink" title="發佈資料設定"></a>發佈資料設定</h3><pre><code># Deployment
## Docs: https://hexo.io/docs/deployment.html
deploy:
type: git #發佈使用版控類別 使用git
repo: https://github.com/isdaniel/isdaniel.github.io.git #發佈到哪個Repository
branch: master #發佈使用的分支
</code></pre><h3 id="社群資料設定："><a href="#社群資料設定：" class="headerlink" title="社群資料設定："></a>社群資料設定：</h3><pre><code># Social Accounts
instagram_url: https://www.instagram.com/dn_shih/
github_url: https://github.com/isdaniel
email_url: dog830228@gmail.com
</code></pre><p>設定檔可以參考我的<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2lzZGFuaWVsL015QmxvZy9ibG9iL21hc3Rlci9fY29uZmlnLnltbA==" title="https://github.com/isdaniel/MyBlog/blob/master/_config.yml">_config.yml<i class="fa fa-external-link"></i></span>檔案</p>
<p>或是也可以<span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL3poLXR3L2RvY3MvY29uZmlndXJhdGlvbi5odG1s" title="https://hexo.io/zh-tw/docs/configuration.html">參考官網<i class="fa fa-external-link"></i></span></p>
<h2 id="Hexo推薦Theme-Next"><a href="#Hexo推薦Theme-Next" class="headerlink" title="Hexo推薦Theme [Next]"></a>Hexo推薦Theme [Next]</h2><p>Hexo有眾多Theme可以選擇，我們要切換使用的Theme只需要做幾個步驟.</p>
<ol>
<li>在網路上尋到想要使用的Hexo Theme.</li>
<li>把資料檔放在<code>/themes/</code>資料夾目錄下.</li>
</ol>
<p>這次想要跟大家介紹我使用的<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RoZW1lLW5leHQvaGV4by10aGVtZS1uZXh0" title="https://github.com/theme-next/hexo-theme-next">Next Theme<i class="fa fa-external-link"></i></span>，我會使用原因如下</p>
<ul>
<li>擁有眾多開源者貢獻</li>
<li>畫面乾淨又整潔</li>
</ul>
<h3 id="在Hexo使用Next"><a href="#在Hexo使用Next" class="headerlink" title="在Hexo使用Next"></a>在Hexo使用Next</h3><ol>
<li>我們把上面的Next Theme clone一份下來.<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RoZW1lLW5leHQvaGV4by10aGVtZS1uZXh0LmdpdA==" title="https://github.com/theme-next/hexo-theme-next.git">https://github.com/theme-next/hexo-theme-next.git<i class="fa fa-external-link"></i></span></li>
<li>在<code>/themes/</code> 建立一個 <code>next</code> 資料夾並把<code>Next Theme</code>所有檔案copy進去.</li>
<li>修改Hexo <code>_config.yml</code>檔案，把<code>theme</code>改成<code>next</code></li>
</ol>
<h2 id="Hexo推薦插件"><a href="#Hexo推薦插件" class="headerlink" title="Hexo推薦插件"></a>Hexo推薦插件</h2><p>下面是我推薦大家使用的<code>Hexo</code>插件，使用說明我就不一一跟大家解釋了網路上很多分享文.</p>
<ul>
<li>theme-next-reading-progress 閱讀進度.</li>
<li>hexo-symbols-count-time 閱讀次數</li>
<li>hexo-generator-index2  頁面分類</li>
<li>hexo-related-popular-posts 熱門文章</li>
<li>hexo-addlink 在文章最末添加永久鏈接及版權聲明</li>
</ul>
<p><strong>此文作者</strong>：Daniel Shih(石頭)<br><strong>此文地址</strong>： <a href="https://isdaniel.github.io/hexo-blog-theme/">https://isdaniel.github.io/hexo-blog-theme/</a> <br><strong>版權聲明</strong>：本博客所有文章除特別聲明外，均採用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC90dy8=" title="https://creativecommons.org/licenses/by-nc-sa/3.0/tw/">CC BY-NC-SA 3.0 TW<i class="fa fa-external-link"></i></span> 許可協議。轉載請註明出處！</p>
]]></content>
      <categories>
        <category>WebDesign</category>
      </categories>
      <tags>
        <tag>WebDesign</tag>
        <tag>Blog</tag>
        <tag>Github</tag>
        <tag>CICD</tag>
      </tags>
  </entry>
  <entry>
    <title>淺談-編碼(encoding) vs 加解密 vs 雜湊(Hash)</title>
    <url>/hash-encoding/</url>
    <content><![CDATA[<p>這一邊有三筆資料</p>
<ul>
<li>U2FsdGVkX19FJsgVyam+Gh2EwmGs4BEJjJJsWxCXHWw84gp3uHvozWsHY8gfAx0C</li>
<li>VG9kYXkgaXMgYSBnb29kIERheQ==</li>
<li>046a484a529ecfc7693753ee65802b5cfcafd548252d0e5f1bca845ad2208b91</li>
</ul>
<p>這三個東西看起來都是亂碼，但所代表含意完全不一樣</p>
<p>這邊會跟大家分享這三個東西特性和差異性</p>
<p>此文同步發布 Blog <span class="exturl" data-url="aHR0cHM6Ly9kb3RibG9ncy5jb20udHcvZGFuaWVsLzIwMTkvMDUvMDYvMjIzMDA0" title="https://dotblogs.com.tw/daniel/2019/05/06/223004">[淺談] 編碼(encoding) vs 加解密 vs 雜湊(Hash)<i class="fa fa-external-link"></i></span></p>
<h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>會想分享這篇文章是因為蠻多人把</p>
<ul>
<li>編碼(encoding)</li>
<li>加解密</li>
<li>雜湊(Hash) </li>
</ul>
<p>這三個東西搞混，尤其是把編碼當作加密….這是非常危險的事情. </p>
<pre><code>編碼!= 加密 兩個是完全不一樣的東西
編碼!= 加密 兩個是完全不一樣的東西
編碼!= 加密 兩個是完全不一樣的東西
</code></pre><p>很重要所以要說三次XD! </p>
<hr>
<h1 id="編碼"><a href="#編碼" class="headerlink" title="編碼"></a>編碼</h1><h2 id="說明："><a href="#說明：" class="headerlink" title="說明："></a>說明：</h2><p>這邊用<code>Base64</code>編碼來介紹，我們可以看到下圖資料轉換是雙向的．</p>
<pre><code>Hello Daniel　=&gt;  SGVsbG8gRGFuaWVs
</code></pre><p>如果我們想要把<code>SGVsbG8gRGFuaWVs</code> 變回 <code>Hello Daniel</code> 只需進行<code>Base64</code>解碼即可</p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/%E4%B9%9D%E6%A1%83/be1dd9ce-3ce4-4404-ac0a-fe66ae2c64c1/1557148998_19694.png" alt></p>
<p>編碼是將原本的資料經過一個運算轉換成另一組資料,如果要還原成原本資料解碼</p>
<h2 id="用途："><a href="#用途：" class="headerlink" title="用途："></a>用途：</h2><p>在網路傳輸會使用到編碼主要是資料在傳輸時有些特殊字元,有特殊用途(ex:Http 傳參數  &amp;….)</p>
<p>這時就可使用編碼將資料轉換成不會衝突到字串.</p>
<p>如果想要了解 Base64 原理和演算法的話可以看我另一篇<a href="/base64-principle/" title="【深入淺出】Base編碼 (Base64為例子)">【深入淺出】Base編碼 (Base64為例子)</a></p>
<hr>
<h1 id="加解密"><a href="#加解密" class="headerlink" title="加解密"></a>加解密</h1><h2 id="說明：-1"><a href="#說明：-1" class="headerlink" title="說明："></a>說明：</h2><p>這邊以<code>AES</code>來介紹，我們可以看到下圖資料轉換是雙向，但會透過一個Key來做轉換(這邊是和編碼最大的差別)</p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/%E4%B9%9D%E6%A1%83/be1dd9ce-3ce4-4404-ac0a-fe66ae2c64c1/1557149615_79307.png" alt></p>
<p>要還原成原始資料我們只能透過一樣的Key才可以達成，就像一個寶相只有唯一一把鑰匙可以打開一樣．</p>
<p>這邊補充一個簡單加密法(凱薩算法)，他是使用字元位移的數字來當作Key</p>
<p>如果位移數量是1 <code>ABCD =&gt; BCDE</code></p>
<p>如圖</p>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/2/2b/Caesar3.svg" alt></p>
<h2 id="用途：-1"><a href="#用途：-1" class="headerlink" title="用途："></a>用途：</h2><p>加密可以確保資料的安全性（只有相同的Key才可還原成原本資料）很適合用在機密資料且須要還原使用</p>
<hr>
<h1 id="雜湊-Hash"><a href="#雜湊-Hash" class="headerlink" title="雜湊(Hash)"></a>雜湊(Hash)</h1><h2 id="說明：-2"><a href="#說明：-2" class="headerlink" title="說明："></a>說明：</h2><p>這裡用<code>Sha256</code>來當作範例</p>
<p>Hash有幾個特點</p>
<ol>
<li>不管資料量多大經過SHA256運算字串長度都是一樣的</li>
<li><code>SHA256</code>的原因是運算完的資料大小一定是 <code>256 bit</code></li>
<li>她是一個不可逆的算法所以我們可以看到箭頭是單向.</li>
<li>相同的值用SHA運算過後值都是一樣的</li>
</ol>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/%E4%B9%9D%E6%A1%83/be1dd9ce-3ce4-4404-ac0a-fe66ae2c64c1/1557152092_14191.png" alt></p>
<p>一定會有小夥伴好奇,運算完都是固定長度 那會不會出現一個情況,原始資料不一樣但算完<code>Hash</code>結果是一樣的</p>
<pre><code>會 這個我們稱之為雜湊碰撞 這個機率很小
</code></pre><h2 id="用途：-2"><a href="#用途：-2" class="headerlink" title="用途："></a>用途：</h2><p>一般我們可以把使用者密碼經<code>Hash</code>運算存入資料庫中,當作使用唯一識別碼(像指紋)下次使用者登入用運一樣的<code>Hash</code>算法 再將值拿來比較辨識使用者合法性.</p>
<hr>
<h2 id="小結："><a href="#小結：" class="headerlink" title="小結："></a>小結：</h2><p>對於這邊有一個簡單的比較表格</p>
<ul>
<li>編碼(encoding)</li>
<li>加解密</li>
<li>雜湊(Hash) </li>
</ul>
<p><img src="https://ithelp.ithome.com.tw/upload/images/20190510/20096630rEP4mvVyso.png" alt="https://ithelp.ithome.com.tw/upload/images/20190510/20096630rEP4mvVyso.png"></p>
<p>加解密和編碼最常被大家誤會搞錯地方是以為使用<code>Base64</code>編碼就很安全(但有心人事取得你的資料只要知道你使用編碼就可以還原成原始資料)</p>
<p>如果要確保資料隱密性時可以使用加解密而不是編碼</p>
<p>所以別再把<code>Base64</code>編碼當作加密工具來使用.</p>
<p>這是很危險低</p>
<p><strong>此文作者</strong>：Daniel Shih(石頭)<br><strong>此文地址</strong>： <a href="https://isdaniel.github.io/hash-encoding/">https://isdaniel.github.io/hash-encoding/</a> <br><strong>版權聲明</strong>：本博客所有文章除特別聲明外，均採用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC90dy8=" title="https://creativecommons.org/licenses/by-nc-sa/3.0/tw/">CC BY-NC-SA 3.0 TW<i class="fa fa-external-link"></i></span> 許可協議。轉載請註明出處！</p>
]]></content>
      <categories>
        <category>WebDesign</category>
      </categories>
      <tags>
        <tag>Base64</tag>
        <tag>Encoding</tag>
        <tag>AES</tag>
        <tag>SHA256</tag>
        <tag>Hash</tag>
      </tags>
  </entry>
  <entry>
    <title>建立自己Blog系列(二) github Setting</title>
    <url>/hexo-github-setting/</url>
    <content><![CDATA[<p>在Github這邊要先建立兩個Repository</p>
<ol>
<li>Blog Code</li>
<li>Blog Hosting</li>
</ol>
<h2 id="Blog-Code"><a href="#Blog-Code" class="headerlink" title="Blog Code"></a>Blog Code</h2><p>這個Repository是利用Hexo cli樣板來撰寫Blog.</p>
<p>像我目前使用的<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2lzZGFuaWVsL015QmxvZw==" title="https://github.com/isdaniel/MyBlog">MyBlog<i class="fa fa-external-link"></i></span></p>
<p>建立完自己的Code Repository後.</p>
<p>將他clone到自己電腦上面.</p>
<p>執行下面幾個步驟</p>
<ol>
<li>打開此Repository資料夾</li>
<li>打開<code>CMD</code>並進入此資料夾</li>
<li>利用<code>NodeJS NPM</code> 打 <code>npm install hexo -g</code> 就會開始下載 <img src="/images/github_hosting1.PNG" alt="img"></li>
<li>執行完第三步後再打<code>Hexo init</code>指令,安裝看建立Hexo將檔案.</li>
</ol>
<h2 id="Blog-Hosting"><a href="#Blog-Hosting" class="headerlink" title="Blog Hosting"></a>Blog Hosting</h2><p>在建立另一個Repository來當html blog靜態託管使用.</p>
<p>就像石頭使用<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2lzZGFuaWVsL2lzZGFuaWVsLmdpdGh1Yi5pbw==" title="https://github.com/isdaniel/isdaniel.github.io">isdaniel.github.io<i class="fa fa-external-link"></i></span></p>
<p>執行下面幾個步驟</p>
<ol>
<li>建立一個Repository <img src="/images/github_hosting.PNG" alt="img">名子要取為 <strong>[username]</strong>.github.io，其中的<strong>[username]</strong>是您Github帳號.</li>
<li>進入此Repository中，並進入<code>Setting</code><img src="/images/github_hosting2.PNG" alt="img"></li>
<li>確認是否已經成功將此Repository Hosting在你的Github page上<br>如果成功呈現此圖<img src="/images/github_hosting3.PNG" alt="img"></li>
</ol>
<p>我們可以嘗試在這個Hosting Repository建立一個<code>index.html</code> 在上面打<code>Hello would</code>並<code>commit push</code></p>
<p>在訪問<code>https://[username].github.io/</code>應該就可以看到Hello Would文字.</p>
<ul>
<li><a href="/github-hexo-appveyor/" title="建立自己Blog系列(一) 介紹 Github (hosting) + Hexo (Blog) + Appveyor(CICD)">建立自己Blog系列(一) 介紹 Github (hosting) + Hexo (Blog) + Appveyor(CICD)</a></li>
<li><a href="/hexo-blog-theme/" title="建立自己Blog系列(三) Hexo next theme 介紹">建立自己Blog系列(三) Hexo next theme 介紹</a></li>
<li>建立自己Blog系列(四) Appveyor 介紹 yaml.</li>
</ul>
<p><strong>此文作者</strong>：Daniel Shih(石頭)<br><strong>此文地址</strong>： <a href="https://isdaniel.github.io/hexo-github-setting/">https://isdaniel.github.io/hexo-github-setting/</a> <br><strong>版權聲明</strong>：本博客所有文章除特別聲明外，均採用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC90dy8=" title="https://creativecommons.org/licenses/by-nc-sa/3.0/tw/">CC BY-NC-SA 3.0 TW<i class="fa fa-external-link"></i></span> 許可協議。轉載請註明出處！</p>
]]></content>
      <categories>
        <category>WebDesign</category>
      </categories>
      <tags>
        <tag>WebDesign</tag>
        <tag>Blog</tag>
        <tag>Github</tag>
        <tag>CICD</tag>
      </tags>
  </entry>
  <entry>
    <title>高併發系統系列-使用lock &amp; Interlocked CAS(compare and swap)</title>
    <url>/high-concurrency-atomic-cas-algorithm/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在之前我有寫一篇關於資料庫的<a href="https://isdaniel.github.io/acid/">ACID</a>分享RDBMS資料庫基本原則</p>
<p>假如我們系統是一個多執行續高併發系統也要注意Atomic不然會造成資料會有Data Racing導致bug產生..</p>
<p>本文使用範例在我github上<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2lzZGFuaWVsL0Jsb2dTYW1wbGUvdHJlZS9tYXN0ZXIvc3JjL1NhbXBsZXMvQ0FTX0xvY2s=" title="https://github.com/isdaniel/BlogSample/tree/master/src/Samples/CAS_Lock">CAS_Lock<i class="fa fa-external-link"></i></span>有興趣的人可以參考.</p>
<h2 id="沒有注意Atomic會導致的問題"><a href="#沒有注意Atomic會導致的問題" class="headerlink" title="沒有注意Atomic會導致的問題"></a>沒有注意Atomic會導致的問題</h2><p>我是我們公司擔任技術面試官之一，假如面試者說他實作過<strong>高併發系統</strong>。</p>
<p>我就會先問以下問題來辨別是否要更深入面試<strong>高併發系統</strong>相關問題.</p>
<p>下面Sample Code是這樣.</p>
<p>我用<code>Task</code>假裝高併發，下面有一個<code>Member</code>類別預設給100000元的Balance</p>
<p>有一個<code>UpdateBalance</code>每呼叫一次就扣10元，我透過<code>For</code>跑10000次</p>
<p>理論上我預期在跑完下面顯示Balance會員餘額是0 (因為 10000*10 = 100000).</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>	&#123;</span><br><span class="line">		Member member = <span class="keyword">new</span> Member() &#123; Balance = <span class="number">100000</span> &#125;;</span><br><span class="line">		List&lt;Task&gt; tasks = <span class="keyword">new</span> List&lt;Task&gt;();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			tasks.Add(Task.Run(() =&gt; member.UpdateBalance()));</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		Task.WaitAll(tasks.ToArray());</span><br><span class="line"></span><br><span class="line">		Console.WriteLine(<span class="string">$"member remaining balance is <span class="subst">&#123;member.Balance&#125;</span>"</span>);</span><br><span class="line">		Console.ReadKey();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Member</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">decimal</span> Balance &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">UpdateBalance</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>	&#123;</span><br><span class="line">		Balance -= <span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://i.imgur.com/44M2Jr7.png" alt></p>
<p>但執行後蠻常會是不等於0!!</p>
<p>這時我會問面試者兩個問題</p>
<ul>
<li>為什麼會不等於0</li>
<li>如果要解決你會怎麼解決這個問題?</li>
</ul>
<p>如果知道的人可以跳到CAS部分，如果不知原因我下面會跟大家分享</p>
<h3 id="為什麼會不等於0"><a href="#為什麼會不等於0" class="headerlink" title="為什麼會不等於0"></a>為什麼會不等於0</h3><p>這個問題牽扯到Thread是如何對於變數操作的，Thread在操作變數之前會把資料複製一份進Thread Context中在操作我們要步驟</p>
<p>所以在<code>Balance -= 10;</code>這段程式碼會拆成下面動作</p>
<ol>
<li>將執行個體變數中的值載入至register。</li>
<li>將載入值減10</li>
<li>將異動後值放回原本值的Memory。</li>
</ol>
<p>因為以上步驟，假如同一時間有兩個不同的Thread取到的Balance都是1000，並個別對於Balance減10元，我們原本預期這是兩個操作（預期資料為980）</p>
<p>但因為取的瞬間都是1000-10=990把數值放回變數中就導致少扣一個10元…</p>
<p>概念如下圖.</p>
<p><img src="https://i.imgur.com/zXprOIe.png" alt></p>
<p>知道原因了要解決就簡單了.</p>
<h3 id="使用Lock解決"><a href="#使用Lock解決" class="headerlink" title="使用Lock解決"></a>使用Lock解決</h3><p>因為這段程式碼遇到Data Raceing在同一個時間有兩個不同的Thread對於資料競爭</p>
<p>如果要避免競爭lock是一個比較方便的方式，他可以保證一瞬間只有一個Thread(Session)來執行某段程式碼(通常會放在異動資料那部分)來保證Isolation.</p>
<p>下面是使用lock版本的程式碼，能看到我在<code>Balance -= 10;</code>這一段使用lock來確保每一個瞬間只有一個Thread可以異動資料，其他的Thread需要blocking等他完成</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">object</span> _lock = <span class="keyword">new</span> <span class="keyword">object</span>();</span><br><span class="line">	<span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>	&#123;</span><br><span class="line">		Member member = <span class="keyword">new</span> Member() &#123; Balance = <span class="number">100000</span> &#125;;</span><br><span class="line">		List&lt;Task&gt; tasks = <span class="keyword">new</span> List&lt;Task&gt;();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			tasks.Add(Task.Run(() =&gt; member.UpdateBalance()));</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		Task.WaitAll(tasks.ToArray());</span><br><span class="line"></span><br><span class="line">		Console.WriteLine(<span class="string">$"member remaining balance is <span class="subst">&#123;member.Balance&#125;</span>"</span>);</span><br><span class="line">		Console.ReadKey();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Member</span> &#123;</span><br><span class="line">	<span class="comment">//here</span></span><br><span class="line">	<span class="keyword">object</span> _lock = <span class="keyword">new</span> <span class="keyword">object</span>();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">decimal</span> Balance &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">UpdateBalance</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>	&#123;</span><br><span class="line">		<span class="keyword">lock</span> (_lock)</span><br><span class="line">		&#123;</span><br><span class="line">			Balance -= <span class="number">10</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用lock之後能發現不管執行幾次資料都會如我們預期顯示.</p>
<p>使用lock執行概念圖如下.</p>
<p>在同一時間我們會把要執行程式 利用一個類似保護網的方式，確保同一時間只有一個Thread來做操作.</p>
<p>Thread2取得lock在操作Thread1就必須等待Thread2執行完,在取值=&gt;改值..等等動作</p>
<p><img src="https://i.imgur.com/BUCajHn.png" alt></p>
<blockquote>
<p>只是使用lock會降低些許吞吐量(但資料正確性是最重要的)，所以要注意使用lock範圍大小</p>
</blockquote>
<h2 id="CAS-compare-and-swap-提高效率"><a href="#CAS-compare-and-swap-提高效率" class="headerlink" title="CAS(compare and swap)提高效率"></a>CAS(compare and swap)提高效率</h2><p><span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLXR3LyVFNiVBRiU5NCVFOCVCRSU4MyVFNSVCOSVCNiVFNCVCQSVBNCVFNiU4RCVBMg==" title="https://zh.wikipedia.org/zh-tw/%E6%AF%94%E8%BE%83%E5%B9%B6%E4%BA%A4%E6%8D%A2">CAS<i class="fa fa-external-link"></i></span>是利用compare and swap來確保資料Atomic.</p>
<blockquote>
<p>因為CAS可以取得數值記憶體空間來比較給值並且他也是一條CPU原語具有原子性 <span class="exturl" data-url="aHR0cHM6Ly93d3cuaXRzZnVuLmNvbS50dy9DQVMvd2lraS01MTQ1NTQxLTQyNzA3MzE=" title="https://www.itsfun.com.tw/CAS/wiki-5145541-4270731">cpu 硬體同步原語<i class="fa fa-external-link"></i></span></p>
</blockquote>
<p>前面有說過在<code>Balance -= 10;</code>這段程式碼會拆成下面動作</p>
<ol>
<li>將執行個體變數中的值載入至register。</li>
<li>將載入值減10</li>
<li>將異動後值放回原本值的Memory。</li>
</ol>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">balance -= <span class="number">10</span>;</span><br></pre></td></tr></table></figure>
<p>會拆解成類似下面動作</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> temp = balance;</span><br><span class="line">temp = temp <span class="number">-10</span>;</span><br><span class="line">balance = temp;</span><br></pre></td></tr></table></figure>
<p>假如在取balance(附值給temp)跟把值重新寫入balance中間有其他Thread來操作，就會造成所謂Data Racing，因為對於我們來說上面後兩部有不可分割性(Atomic).</p>
<p>而這時候我們就可以使用CAS算法來幫我們解決問題，在C#如果我們想要達成變數修改的Atomic可以透過<code>Interlocked</code>類別</p>
<h3 id="使用Interlocked提高效率"><a href="#使用Interlocked提高效率" class="headerlink" title="使用Interlocked提高效率"></a>使用Interlocked提高效率</h3><p>在C#中我們可以使用<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vemgtdHcvZG90bmV0L2FwaS9zeXN0ZW0udGhyZWFkaW5nLmludGVybG9ja2VkP3ZpZXc9bmV0LTUuMA==" title="https://docs.microsoft.com/zh-tw/dotnet/api/system.threading.interlocked?view=net-5.0">Interlocked<i class="fa fa-external-link"></i></span>這個類別</p>
<p>對於<code>Int</code>,<code>Long</code>相關操作都有封裝成method.</p>
<p>下面這段虛擬碼解釋<code>balance -= 10;</code>CAS中類似下面效果</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//original</span></span><br><span class="line"><span class="keyword">int</span> temp = balance;</span><br><span class="line">temp = temp <span class="number">-10</span>;</span><br><span class="line">balance = temp;</span><br><span class="line"></span><br><span class="line"><span class="comment">//CAS </span></span><br><span class="line"><span class="keyword">int</span> oldValue = balance;</span><br><span class="line"><span class="keyword">int</span> newValue = oldValue - <span class="number">1</span>;</span><br><span class="line"><span class="comment">//compare value source and set</span></span><br><span class="line">Interlocked.CompareExchange(<span class="keyword">ref</span> balance,newValue,oldValue);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Interlocked.CompareExchange類似下面做法，但具有Atomic</span></span><br><span class="line"><span class="comment">//if(ref balance == oldValue)&#123;</span></span><br><span class="line"><span class="comment">//	balance = newValue;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure>
<p>主要是把compare value source and set這段包成一個不可分割區段達到Atomic.</p>
<p>＞ 我上面用<code>ref</code>來表示從記憶體位置取得<code>balance</code>原始資料</p>
<ul>
<li><code>Exchange</code>:把值改成另一個數值 具有Atomic</li>
<li><code>Decrement</code>:把數值– 具有Atomic</li>
<li><code>Increment</code>:把數值++ 具有Atomic</li>
</ul>
<p>除了上面我們還可以針對Reference Type做Atomic有興趣的人在自行了解</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">object</span> _lock = <span class="keyword">new</span> <span class="keyword">object</span>();</span><br><span class="line">	<span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>	&#123;</span><br><span class="line">		Stopwatch sw = <span class="keyword">new</span> Stopwatch();</span><br><span class="line">		<span class="keyword">int</span> balanceValue = <span class="number">10000000</span>;</span><br><span class="line">		Member member = <span class="keyword">new</span> Member() &#123; Balance = balanceValue &#125;;</span><br><span class="line">		List&lt;Task&gt; tasks = <span class="keyword">new</span> List&lt;Task&gt;();</span><br><span class="line">		sw.Start();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			tasks.Add(Task.Run(() =&gt; member.UpdateBalance()));</span><br><span class="line">		&#125;</span><br><span class="line">		Task.WaitAll(tasks.ToArray());</span><br><span class="line">		sw.Stop();</span><br><span class="line">		Console.WriteLine(<span class="string">"Lock Version"</span>);</span><br><span class="line">		Console.WriteLine(<span class="string">$"member remaining balance is <span class="subst">&#123;member.Balance&#125;</span>"</span>);</span><br><span class="line">		Console.WriteLine(<span class="string">$"Exec Time Cost : <span class="subst">&#123;sw.ElapsedMilliseconds&#125;</span>"</span>);</span><br><span class="line"></span><br><span class="line">		tasks.Clear();</span><br><span class="line">		member.Balance = balanceValue;</span><br><span class="line">		sw.Restart();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			tasks.Add(Task.Run(() =&gt; member.UpdateBalanceByInterlock()));</span><br><span class="line">		&#125;</span><br><span class="line">		Task.WaitAll(tasks.ToArray());</span><br><span class="line">		sw.Stop();</span><br><span class="line">		Console.WriteLine(<span class="string">"InterLocked Version:"</span>);</span><br><span class="line">		Console.WriteLine(<span class="string">$"member remaining balance is <span class="subst">&#123;member.Balance&#125;</span>"</span>);</span><br><span class="line">		Console.WriteLine(<span class="string">$"Exec Time Cost : <span class="subst">&#123;sw.ElapsedMilliseconds&#125;</span>"</span>);</span><br><span class="line"></span><br><span class="line">		Console.ReadKey();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Member</span> &#123;</span><br><span class="line">	<span class="keyword">object</span> _lock = <span class="keyword">new</span> <span class="keyword">object</span>();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">int</span> Balance &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">UpdateBalance</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>	&#123;</span><br><span class="line">		<span class="keyword">lock</span> (_lock)</span><br><span class="line">		&#123;</span><br><span class="line">			Balance -= <span class="number">10</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">UpdateBalanceByInterlock</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>	&#123;</span><br><span class="line">		<span class="keyword">int</span> val = <span class="number">0</span>;</span><br><span class="line">		Balance = Interlocked.Exchange(<span class="keyword">ref</span> val, Balance -= <span class="number">10</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下圖是比較兩者執行時間還有併發計算數值，能發現數值兩個都正確計算出0，但Interlocked執行時間少於lock版本.</p>
<p><img src="https://i.imgur.com/eMjYN6P.png" alt></p>
<p>Interlocked效率會比較高是因為block會造成Thread的blocking等待浪費,但Interlocked核心概念是在這段話Atomic<strong>取得資料跟原職比較(如果資料還沒改就把值修改進Memory中)</strong></p>
<p>所以效率就會比lock好很多</p>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>在有些情境適合使用Lock(例如許多操作需要有一致的Atomic)就比較適合.</p>
<p>Interlocked適合用在對於數值的Atomic.</p>
<p>在多執行緒的世界中要顧慮的點真的很多，稍有不甚就會造成很多錯誤.</p>
<p>因為多執行緒有許多地方需要注意,不然執行效率會不如單執行緒.</p>
<p>我慢慢可以理解為什麼Redis,Node.js一開始要使用sigel Thread來運作了…</p>
<p><strong>此文作者</strong>：Daniel Shih(石頭)<br><strong>此文地址</strong>： <a href="https://isdaniel.github.io/high-concurrency-atomic-cas-algorithm/">https://isdaniel.github.io/high-concurrency-atomic-cas-algorithm/</a> <br><strong>版權聲明</strong>：本博客所有文章除特別聲明外，均採用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC90dy8=" title="https://creativecommons.org/licenses/by-nc-sa/3.0/tw/">CC BY-NC-SA 3.0 TW<i class="fa fa-external-link"></i></span> 許可協議。轉載請註明出處！</p>
]]></content>
      <categories>
        <category>C#</category>
        <category>atomic</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>atomic</tag>
      </tags>
  </entry>
  <entry>
    <title>Asp.net HttpHandler vs HttpModule 詳細解說.</title>
    <url>/httphandler-httpmodule/</url>
    <content><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p><code>Asp.net</code> 是一個<code>pipeline</code>的模型</p>
<p>我覺得<code>.Net Web工程師</code>對於這個模型和<code>IHttpHanlder</code>,<code>IHttpModule</code> 要有基本的概念和理解.</p>
<p>理解這些管道除了可以讓我們節省許多不必要的資源浪費也可讓我們程式架構更加有條理.</p>
<p>就像我們在<code>Asp.net MVC</code>如果要寫權限驗證程式碼,雖然可以寫在<code>Controller</code>的<code>Action</code>中</p>
<p>但更好做法是我可以寫一個類別繼承<code>AuthorizeAttribute</code>並<code>override</code> <code>OnAuthorization</code>方法並掛上此標籤.</p>
<p>所以更了解這些原理可以讓我們寫程式事半功倍.</p>
<h2 id="Asp-net-Application-Event-生命週期"><a href="#Asp-net-Application-Event-生命週期" class="headerlink" title="Asp.net Application Event 生命週期"></a>Asp.net Application Event 生命週期</h2><p>前面我們知道Asp.net是一個請求處理響應的管道而這個管道中微軟有提供許多點可以讓我們進行客製化的擴充程式撰寫</p>
<blockquote>
<p>事件可藉由<code>IHttpModule</code>來擴充註冊</p>
</blockquote>
<h3 id="Event事件名稱："><a href="#Event事件名稱：" class="headerlink" title="Event事件名稱："></a>Event事件名稱：</h3><p>官網列出可用事件很多，下面列出我有用過的幾個事件和其功用.</p>
<ul>
<li>BeginRequest</li>
<li>AuthorizeRequest</li>
<li>PostResolveRequestCache</li>
<li>MapRequestHandler</li>
<li>AcquireRequestState</li>
<li>PreRequestHandlerExecute</li>
<li>PostRequestHandlerExecute</li>
<li>EndRequest</li>
</ul>
<h3 id="事件方法說明："><a href="#事件方法說明：" class="headerlink" title="事件方法說明："></a>事件方法說明：</h3><ul>
<li><code>BeginRequest</code>: 已經啟動要求。如果要在要求前執行某個動作 (例如, 在每頁頁首顯示廣告橫幅), 請同步處理這個事件。</li>
<li><code>AuthorizeRequest</code>: 您可以在內部使用這個事件, 以實作授權機制 (例如, 將存取控制清單 (ACL) 儲存在資料庫, 而非存入檔案系統)。您也可以覆寫這個事件, 但無此必要。</li>
<li><code>PostResolveRequestCache</code>：當 ASP.NET 略過目前事件處理常式的執行並允許快取模組從快取中服務要求時發生。</li>
<li><code>MapRequestHandler</code>：ASP.NET 基礎結構會使用事件來判斷目前要求的要求處理常式。 如需詳細資訊</li>
<li><code>AcquireRequestState</code>: 工作階段狀態是擷取自狀態儲存區。如果要建置自已的狀態管理模組, 則可以同步處理這個事件, 以便從狀態儲存區擷取「工作階段」狀態。</li>
<li><code>PreRequestHandlerExecute</code>: 這個事件會在執行 HTTP 處理常式之前產生。</li>
<li>在介於<code>PreRequestHandlerExecute</code>和<code>PostRequestHandlerExecute</code>事件之間會執行<code>HttpHandler</code>程式碼.</li>
<li><code>PostRequestHandlerExecute</code>: 這個事件會在執行 HTTP 處理常式之後產生。</li>
<li><code>EndRequest</code>: 要求已完成。您可能想要建置偵錯模組, 以便收集要求的全部資訊, 然後再將資訊寫入網頁中。</li>
</ul>
<h2 id="IHttpHandler-和-IHttpModule-關係"><a href="#IHttpHandler-和-IHttpModule-關係" class="headerlink" title="IHttpHandler 和 IHttpModule 關係"></a>IHttpHandler 和 IHttpModule 關係</h2><p>用一句話簡述<code>IHttpHandler</code>和<code>IHttpModule</code></p>
<p>如果把Http請求當作火車那</p>
<ul>
<li><code>IHttpHandler</code>是火車的終點</li>
<li><code>IHttpModule</code>是沿路經過的站點</li>
</ul>
<p><code>IHttpHandler</code>和<code>IHttpModule</code>關係如 <span class="exturl" data-url="aHR0cHM6Ly93d3cuY29kZXByb2plY3QuY29tL0FydGljbGVzLzMzNTk2OC9JbXBsZW1lbnRpbmctSFRUUEhhbmRsZXItYW5kLUhUVFBNb2R1bGUtaW4tQVNQLU5FVA==" title="https://www.codeproject.com/Articles/335968/Implementing-HTTPHandler-and-HTTPModule-in-ASP-NET">Implementing HTTPHandler and HTTPModule in ASP.NET<i class="fa fa-external-link"></i></span> 文章提到</p>
<p><img src="https://1.bp.blogspot.com/--nEyvA5pGLk/WXn6YudHYzI/AAAAAAACWLg/7N81JLv5SfYPMvYmGdUnNHg4_p3Shb5DACLcBGAs/s1600/overview.jpg" alt="img"></p>
<p>每個請求一定會通過所有被註冊的<code>IHttpModule</code>,而最終會執行一個<code>IHttpHandler</code>後進行返回.</p>
<p>我們常聽到的<code>Asp.net</code> <code>Webform</code>，<code>MVC</code>都是經過管道<code>Module</code>並執行相對應的<code>Handler</code>.</p>
<blockquote>
<p>所以HttpHanlder 和 HttpMoudule 搭配使用達到更強大的功能.</p>
</blockquote>
<h2 id="IHttpHandler"><a href="#IHttpHandler" class="headerlink" title="IHttpHandler"></a>IHttpHandler</h2><p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vemgtdHcvZG90bmV0L2FwaS9zeXN0ZW0ud2ViLmlodHRwaGFuZGxlcj92aWV3PW5ldGZyYW1ld29yay00Ljg=" title="https://docs.microsoft.com/zh-tw/dotnet/api/system.web.ihttphandler?view=netframework-4.8">MSDN<i class="fa fa-external-link"></i></span>說明</p>
<blockquote>
<p>您可以撰寫自訂的 HTTP 處理常式來處理特定的預先定義的任何 Common Language Specification (CLS) 標準的語言中的 HTTP 要求的類型。 可執行程式碼中定義HttpHandler類別，而不是傳統的 ASP 或 ASP.NET Web 網頁，這些特定的要求回應。 HTTP 處理常式提供您一種低層級的要求和回應服務的 IIS Web 伺服器互動，以及大部分 ISAPI 擴充程式類似，但使用簡單的程式設計模型提供的功能。</p>
</blockquote>
<p><code>IHttpHandler</code>是一個可以讓我們實現的介面<br>裡面包含：</p>
<p><strong>屬性:</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">bool</span> IsReusable &#123; <span class="keyword">get</span>; &#125;</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>取得值，指出另一個要求是否可以使用 <code>IHttpHandler</code> 執行個體。</p>
</blockquote>
<p><strong>方法:</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ProcessRequest</span>(<span class="params">HttpContext context</span>)</span></span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>以實作 IHttpHandler 介面的自訂 HttpHandler 來啟用 HTTP Web 要求的處理。</p>
</blockquote>
<h2 id="IHttpModule"><a href="#IHttpModule" class="headerlink" title="IHttpModule"></a>IHttpModule</h2><p><span class="exturl" data-url="aHR0cHM6Ly9zdXBwb3J0Lm1pY3Jvc29mdC5jb20vZW4tdXMvaGVscC8zMDc5ODUvaW5mby1hc3AtbmV0LWh0dHAtbW9kdWxlcy1hbmQtaHR0cC1oYW5kbGVycy1vdmVydmlldw==" title="https://support.microsoft.com/en-us/help/307985/info-asp-net-http-modules-and-http-handlers-overview">MSDN<i class="fa fa-external-link"></i></span>說明</p>
<blockquote>
<p>Modules are called before and after the handler executes. Modules enable developers to intercept, participate in, or modify each individual request. Modules implement the IHttpModule interface, which is located in the System.Web namespace.</p>
</blockquote>
<p>處理常式 (Handler) 在執行前後，會呼叫模組 (Module)。 模組可以讓開發人員攔截、參與或修改每個要求。</p>
<p>更印證了</p>
<blockquote>
<p>　如果把Http請求當作火車那</p>
<ul>
<li><code>IHttpHandler</code>是火車的終點</li>
<li><code>IHttpModule</code>是沿路經過的站點</li>
</ul>
</blockquote>
<p>要查看有哪寫<code>IHttpModule</code>或<code>IHttpHandler</code>被註冊可以看<code>applicationhost.config</code>檔案</p>
<blockquote>
<p>路徑：C:\Users[user]\Documents\IISExpress\config\applicationhost.config</p>
</blockquote>
<h2 id="自己建立一個-IHttpHandler"><a href="#自己建立一個-IHttpHandler" class="headerlink" title="自己建立一個 IHttpHandler"></a>自己建立一個 IHttpHandler</h2><p>在前面有說到每個Http請求的最終是為了給一個<code>HttpHander</code>來執行處理.</p>
<p>像我們常看到的</p>
<ul>
<li>ASP.NET page (*.aspx)</li>
<li>Web service (*.asmx)</li>
<li>Generic Web  (*.ashx)</li>
</ul>
<p>甚至是<code>MVC (MvcHandler)</code>都是實現於<code>IHttpHander</code>介面</p>
<p>這邊介紹如果要如何建立自己<code>HttpHander</code>.</p>
<h3 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h3><p>使用<code>IHttpHandler</code>須完成幾個步驟:</p>
<ol>
<li>建立一個類別實現<code>IHttpHander</code></li>
<li><code>Web.Config</code>註冊上面撰寫的<code>IHttpHandler</code></li>
</ol>
<h4 id="建立一個類別實現IHttpHander"><a href="#建立一個類別實現IHttpHander" class="headerlink" title="建立一個類別實現IHttpHander"></a>建立一個類別實現<code>IHttpHander</code></h4><p>繼承完<code>IHttpHandler</code>我們會實現兩個方法.</p>
<ol>
<li><code>ProcessRequest(HttpContext context)</code> 執行此次請求動作.</li>
<li><code>bool IsReusable { get; }</code> 是否要將此次請求加入快取中重用.</li>
</ol>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyHttpHandler</span> : <span class="title">IHttpHandler</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ProcessRequest</span>(<span class="params">HttpContext context</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        context.Response.ContentType = <span class="string">"text/html"</span>;</span><br><span class="line">        context.Response.Write(<span class="string">"==================&lt;br/&gt;"</span>);</span><br><span class="line">        context.Response.Write(<span class="string">"Hello World&lt;br/&gt;"</span>);</span><br><span class="line">        context.Response.Write(<span class="string">"==================&lt;br/&gt;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">bool</span> IsReusable &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h4 id="Web-Config註冊上面撰寫的IHttpHandler"><a href="#Web-Config註冊上面撰寫的IHttpHandler" class="headerlink" title="Web.Config註冊上面撰寫的IHttpHandler"></a><code>Web.Config</code>註冊上面撰寫的<code>IHttpHandler</code></h4><p>我們要在<code>Web.Config</code>中設定我們撰寫的<code>HttpHandler</code></p>
<p>這是一個範例:</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="XML"><figure class="iseeu highlight /xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">system.webServer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">handlers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">add</span> <span class="attr">verb</span>=<span class="string">"*"</span> <span class="attr">name</span>=<span class="string">"MyHttpHandler"</span> <span class="attr">path</span>=<span class="string">"*.cspx"</span>  <span class="attr">type</span>=<span class="string">"HttpHandler_HttpModule.MyHttpHandler"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">handlers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">system.webServer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<p>把<code>handlers</code>加入在<code>system.webServer</code>結點中.</p>
<p>裡面有幾個<code>Attribute</code></p>
<ul>
<li><code>verb</code>：請求動作 <code>GET,POST,PUT...</code>如果是<code>*</code>代表全部請請動作都合用.</li>
<li><code>path</code>：請求那些副檔名會執行此<code>HttpHandler</code></li>
<li><code>type</code>：註冊的<code>HttpHandler</code>類型.</li>
</ul>
<p>其中最要注意的是type Attribute.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="XML"><figure class="iseeu highlight /xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">add</span> <span class="attr">verb</span>=<span class="string">"*"</span> <span class="attr">name</span>=<span class="string">"MyHttpHandler"</span> <span class="attr">path</span>=<span class="string">"*.cspx"</span>  <span class="attr">type</span>=<span class="string">"(namespace).(classname)"</span>/&gt;</span></span><br></pre></td></tr></table></figure></div>
<p>最後我們就可以請求 <code>http://xxxx/Mypage.cspx</code> 來試試看我們的結果.</p>
<h2 id="自己建立一個-IHttpModule"><a href="#自己建立一個-IHttpModule" class="headerlink" title="自己建立一個 IHttpModule"></a>自己建立一個 IHttpModule</h2><p>每個被註冊的<code>HttpModule</code>是Http請求必經之路.</p>
<ul>
<li><code>Asp.net MVC</code> 是透過<code>System.Web.Routing.UrlRoutingModule</code> 這個<code>HttpModule</code>來完成切入的.</li>
</ul>
<p>使用<code>IHttpModule</code>須完成幾個步驟:</p>
<ol>
<li>建立一個類別實現<code>IHttpModule</code></li>
<li><code>Web.Config</code>註冊上面撰寫的<code>IHttpModule</code></li>
</ol>
<h4 id="建立一個類別實現IHttpModule"><a href="#建立一個類別實現IHttpModule" class="headerlink" title="建立一個類別實現IHttpModule"></a>建立一個類別實現<code>IHttpModule</code></h4><p>這個範例會在頁面上顯示 IIS Pipeline Event的執行順序.</p>
<ol>
<li><code>public void Init(HttpApplication context)</code> 把 <code>HttpApplication</code> 中的event做擴充.</li>
</ol>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyHttpModule</span>:<span class="title">IHttpModule</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Init</span>(<span class="params">HttpApplication context</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        context.BeginRequest += (sender, args) =&gt; ShowStep(sender, <span class="string">"BeginRequest"</span>);</span><br><span class="line"></span><br><span class="line">        context.AuthorizeRequest += (sender, args) =&gt; ShowStep(sender, <span class="string">"AuthorizeRequest"</span>);</span><br><span class="line"></span><br><span class="line">        context.PostResolveRequestCache += (sender, args) =&gt; ShowStep(sender, <span class="string">"PostResolveRequestCache"</span>);</span><br><span class="line"></span><br><span class="line">        context.MapRequestHandler += (sender, args) =&gt; ShowStep(sender, <span class="string">"MapRequestHandler"</span>);</span><br><span class="line"></span><br><span class="line">        context.AcquireRequestState += (sender, args) =&gt; ShowStep(sender, <span class="string">"AcquireRequestState"</span>);</span><br><span class="line"></span><br><span class="line">        context.PreRequestHandlerExecute += (sender, args) =&gt; ShowStep(sender, <span class="string">"PreRequestHandlerExecute"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//這中間執行IHttpHandler.</span></span><br><span class="line"></span><br><span class="line">        context.PostRequestHandlerExecute += (sender, args) =&gt; ShowStep(sender, <span class="string">"PostRequestHandlerExecute"</span>);</span><br><span class="line"></span><br><span class="line">        context.EndRequest += (sender, args) =&gt; ShowStep(sender, <span class="string">"EndRequest"</span>);</span><br><span class="line"></span><br><span class="line">        context.PreSendRequestHeaders += (sender, args) =&gt; ShowStep(sender, <span class="string">"PreSendRequestHeaders"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ShowStep</span>(<span class="params"><span class="keyword">object</span> app,<span class="keyword">string</span> eventName</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">var</span> http = (HttpApplication)app;</span><br><span class="line">        http.Response.Write(<span class="string">$"Step <span class="subst">&#123;eventName&#125;</span>&lt;br/&gt;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Dispose</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h4 id="Web-Config註冊上面撰寫的IHttpModule"><a href="#Web-Config註冊上面撰寫的IHttpModule" class="headerlink" title="Web.Config註冊上面撰寫的IHttpModule"></a><code>Web.Config</code>註冊上面撰寫的<code>IHttpModule</code></h4><p>註冊方法和<code>IHttpHander</code>很類似,一樣在<code>system.webServer</code>節點下加入<code>modules</code></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="XML"><figure class="iseeu highlight /xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">system.webServer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">add</span> <span class="attr">name</span>=<span class="string">"MyHttpModule"</span> <span class="attr">type</span>=<span class="string">"HttpHandler_HttpModule.MyHttpModule"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">system.webServer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<hr>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2lzZGFuaWVsL0h0dHBIYW5sZGVyX1ZzX0h0dHBNb2R1bGU=" title="https://github.com/isdaniel/HttpHanlder_Vs_HttpModule">範例原始碼下載<i class="fa fa-external-link"></i></span></p>
<h2 id="參考資料："><a href="#參考資料：" class="headerlink" title="參考資料："></a>參考資料：</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvcHJldmlvdXMtdmVyc2lvbnMvYXNwbmV0L2JiMzk4OTg2KHY9dnMuMTAwKSNGZWF0dXJlcw==" title="https://docs.microsoft.com/en-us/previous-versions/aspnet/bb398986(v=vs.100)#Features">https://docs.microsoft.com/en-us/previous-versions/aspnet/bb398986(v=vs.100)#Features<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9zdXBwb3J0Lm1pY3Jvc29mdC5jb20vemgtdHcvaGVscC8zMDc5ODUvaW5mby1hc3AtbmV0LWh0dHAtbW9kdWxlcy1hbmQtaHR0cC1oYW5kbGVycy1vdmVydmlldw==" title="https://support.microsoft.com/zh-tw/help/307985/info-asp-net-http-modules-and-http-handlers-overview">https://support.microsoft.com/zh-tw/help/307985/info-asp-net-http-modules-and-http-handlers-overview<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuY29kZXByb2plY3QuY29tL0FydGljbGVzLzMzNTk2OC9JbXBsZW1lbnRpbmctSFRUUEhhbmRsZXItYW5kLUhUVFBNb2R1bGUtaW4tQVNQLU5FVA==" title="https://www.codeproject.com/Articles/335968/Implementing-HTTPHandler-and-HTTPModule-in-ASP-NET">https://www.codeproject.com/Articles/335968/Implementing-HTTPHandler-and-HTTPModule-in-ASP-NET<i class="fa fa-external-link"></i></span></li>
</ul>
<p><strong>此文作者</strong>：Daniel Shih(石頭)<br><strong>此文地址</strong>： <a href="https://isdaniel.github.io/httphandler-httpmodule/">https://isdaniel.github.io/httphandler-httpmodule/</a> <br><strong>版權聲明</strong>：本博客所有文章除特別聲明外，均採用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC90dy8=" title="https://creativecommons.org/licenses/by-nc-sa/3.0/tw/">CC BY-NC-SA 3.0 TW<i class="fa fa-external-link"></i></span> 許可協議。轉載請註明出處！</p>
]]></content>
      <categories>
        <category>C#</category>
        <category>Asp.net</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>Asp.net</tag>
        <tag>IHttpHanlder</tag>
        <tag>IHttpModule</tag>
      </tags>
  </entry>
  <entry>
    <title>【財政部查詢類電子發票API】框架解說 C#</title>
    <url>/invoicetw-framework/</url>
    <content><![CDATA[<p>小弟之前有分享過串接【財政部查詢類電子發票API】小框架使用文</p>
<p>使用文連結 <span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDE4MzkwNA==" title="https://ithelp.ithome.com.tw/articles/10183904">快速使用財政部電子發票API 使用 C#<i class="fa fa-external-link"></i></span><br>串接文件下載 <span class="exturl" data-url="aHR0cHM6Ly93d3cuZWludm9pY2UubmF0Lmdvdi50dy9ob21lL0Rvd25Mb2FkP2ZpbGVOYW1lPTE0NzY4NTUzODc0NTVfMC40LjQucGRm" title="https://www.einvoice.nat.gov.tw/home/DownLoad?fileName=1476855387455_0.4.4.pdf">電子發票查詢API 1.4.4<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2lzZGFuaWVsL0VsZWN0cm9uaWNJbnZvaWNlX1RX" title="https://github.com/isdaniel/ElectronicInvoice_TW">程式原始碼連結<i class="fa fa-external-link"></i></span></p>
<p>這次想跟大家分享我做出此框架的歷程..</p>
<hr>
<p>框架目的：希望可以做出方便日後維護擴展的API。</p>
<p>串接API時發現他們有幾個共同之處</p>
<ol>
<li>API請求參數名稱需降冪排列</li>
<li>請求參數最後會加上簽章</li>
<li>都有時間戳記</li>
<li>回應資料格式都是Json</li>
<li>都是使用Http (Get or Post) </li>
</ol>
<p>我就想到可以使用 <strong>工廠模式來實作這系列產品</strong> (工廠模式主要是切割產品的使用和生產)</p>
<h2 id="產品解說"><a href="#產品解說" class="headerlink" title="產品解說"></a>產品解說</h2><p>因為他們都有共同的能力<strong>傳入一組參數回傳一串Json </strong><br>我就先寫出一個API共同的介面簽章  <code>IApiRunner</code><br>這個介面為基礎來撰寫後面的程式碼</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 執行api的介面</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IApiRunner</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 執行api</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="model"&gt;</span>傳入的參數<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>回傳資料<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">string</span> <span class="title">ExcuteApi</span>(<span class="params"><span class="keyword">object</span> model</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我在中間多一個抽象泛型類別 ApiBase<t> (用泛型是為了給子類決定傳入參數的Model)<br>原因:</t></p>
<ol>
<li>中間使用泛型抽象類別讓子類決定要傳入哪組參數</li>
<li>可以將一些共通的方法寫在裡面</li>
<li>子類別只需要知道要提供哪些動作，所以在ApiBase中提供兩個方法來override<ul>
<li>請求URL   目前預設讀取Config (GetApiURL)</li>
<li>參數的組合 (SetParamter)</li>
</ul>
</li>
</ol>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 子類繼承提供參數</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">string</span> <span class="title">SetParamter</span>(<span class="params">T model</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 取得api的Url路徑</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">virtual</span> <span class="keyword">string</span> <span class="title">GetApiURL</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">string</span> apiname = <span class="keyword">this</span>.GetType().Name;</span><br><span class="line">    <span class="keyword">if</span> (!ConfigurationManager.AppSettings.AllKeys.Contains(apiname))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="keyword">string</span>.Format(<span class="string">"請確認Config的appsetting有無此參數 &#123;0&#125;"</span>,</span><br><span class="line">            apiname));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ConfigurationManager.AppSettings[apiname];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 執行Api</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="model"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">string</span> <span class="title">ExcuteApi</span>(<span class="params"><span class="keyword">object</span> model</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//建立所需參數</span></span><br><span class="line">    <span class="keyword">string</span> result = <span class="keyword">string</span>.Empty;</span><br><span class="line">    <span class="keyword">string</span> postData = <span class="keyword">string</span>.Empty;</span><br><span class="line">    <span class="keyword">string</span> posturl = GetApiURL();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> data = ObjectToModel(model);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//取得加密後的參數</span></span><br><span class="line">    postData = GetInvoiceParamter(SetParamter(data));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        ServicePointManager.ServerCertificateValidationCallback</span><br><span class="line">            = HttpTool.ValidateServerCertificate;</span><br><span class="line">        result = HttpTool.HttpPost(posturl, postData);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        result = GetSysErrorMsg();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>目前產品部分已經建構好了。</p>
<h2 id="工廠解說"><a href="#工廠解說" class="headerlink" title="工廠解說"></a>工廠解說</h2><p>工廠部分這次我選擇使用【反射方式來實現工廠】</p>
<p>工廠類別 <code>MoblieInvoiceApiFactroy</code> 其實最主要是使用GetInstance方法<br><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 提供api的工廠</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> Model和Api命名要相關</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 例如:testModel 對 testApi</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="model"&gt;</span>Model參數<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IApiRunner <span class="title">GetInstace</span>(<span class="params"><span class="keyword">object</span> model</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (model == <span class="literal">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="string">"不能傳空的參數"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">string</span> modelName = model.GetType().Name;</span><br><span class="line">    <span class="keyword">return</span> (IApiRunner)Activator.CreateInstance</span><br><span class="line">        (GetInstanceType(model), <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>其中我把決定使用哪個組API的決定權交給Model並寫在標籤上(Attirbute)<br>在執行時他可獲取此參數Model所註冊參數的型別，來動態產生產品</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 反射取得綁定Model上綁定的API型別</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="model"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Type <span class="title">GetInstanceType</span>(<span class="params"><span class="keyword">object</span> model</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> modelType = model.GetType();</span><br><span class="line">    <span class="keyword">var</span> attr = modelType.GetCustomAttribute(<span class="keyword">typeof</span>(ApiTypeAttribute)) <span class="keyword">as</span> ApiTypeAttribute;</span><br><span class="line">    <span class="keyword">if</span> (attr != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> GetApiType(attr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"Model尚未賦予ApiTypeAttribute"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>EX:查詢中獎號碼API Model 可以很清楚知道這個Model隸屬於哪個API </p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">[<span class="meta">ApiType(ApiType = typeof(QryWinningListApi), MockApiType = typeof(QryWinningListMockApi))</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">QryWinningListModel</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> invTerm &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>值得一提的是它有多一個MockApiType 為什麼會有這個?<br>原因：如果財政部伺服器連不到我們可以改成假資料或是模擬資料(讀取資料庫或是其他方式)。</p>
<p>以上就是此框架的解說</p>
<p>外部只需要呼叫工廠的GetInstance方法並傳入參數Model就會回傳相對應的產品API類別<br>這樣就降低執行和產生產品的耦合度，因為外部不是直接強耦合於Api類別而是透過工廠<br>日後如需增加API產品只需擴展新的類別 <strong>符合OCP(開放封閉原則)</strong><br>已經達到目的：希望可以做出方便日後維護擴展的API。</p>
<p>Ps:這次我除了使用 <strong>工廠模式,也有用到樣板模式,代理模式</strong> 剩下兩個模式讓大家來找看看吧^^</p>
<blockquote>
<p>一般來說很少只用一個模式就可以解決一個問題的，通常都是配合使用</p>
</blockquote>
<p><strong>此文作者</strong>：Daniel Shih(石頭)<br><strong>此文地址</strong>： <a href="https://isdaniel.github.io/invoicetw-framework/">https://isdaniel.github.io/invoicetw-framework/</a> <br><strong>版權聲明</strong>：本博客所有文章除特別聲明外，均採用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC90dy8=" title="https://creativecommons.org/licenses/by-nc-sa/3.0/tw/">CC BY-NC-SA 3.0 TW<i class="fa fa-external-link"></i></span> 許可協議。轉載請註明出處！</p>
]]></content>
      <categories>
        <category>C#</category>
        <category>SourceCode</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>Asp.net</tag>
        <tag>Design-Pattern</tag>
        <tag>Open-Source</tag>
        <tag>OOP</tag>
      </tags>
  </entry>
  <entry>
    <title>IOC(控制反轉)，DI(依賴注入) 深入淺出~~</title>
    <url>/ioc-di/</url>
    <content><![CDATA[<p><code>IOC</code>是一個oop重要的程式設計思想。</p>
<p>學一個技術或思想前我們先了解，這個技術或思想為我們解決怎樣問題。</p>
<p><code>Ioc—Inversion of Control</code> 控制反轉<br>控制反轉是一個設計思想 ，把對於某個物件的控制權移轉給第三方容器</p>
<h2 id="簡單解釋"><a href="#簡單解釋" class="headerlink" title="簡單解釋"></a>簡單解釋</h2><p>A物件程式內部需要使用B物件 A,B物件中有依賴的成份</p>
<p>控制反轉是把原本A對B控制權移交給第三方容器</p>
<p>降低A對B物件的耦合性，讓雙方都倚賴第三方容器。</p>
<ul>
<li>反轉概念如下圖</li>
</ul>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/%E4%B9%9D%E6%A1%83/493ce9d9-64bd-4343-a145-16ab21f3c695/1555312814_72597.png" alt="pic"></p>
<blockquote>
<p>我們可發現有兩點差異</p>
</blockquote>
<ol>
<li><p>使用者原本直接耦合於A，但使用IoC容器使用者就直接對容器而不是A 至於A關連於誰由容器決定<br>原本A直接控制於B,C，但透過一個IoC容器我們控制權反轉給了容器</p>
</li>
<li><p>IoC經典實現對象設計法則　好萊塢法則：“別找我們，我們找你”<br>系統中模組建議依賴抽象，因為各個模組間不需要知道對方太多細節（實作），知道越多耦合越強。<br>DI—Dependency Injection 依賴注入</p>
</li>
</ol>
<blockquote>
<p>把被依賴物件注入被動接收物件中</p>
</blockquote>
<h2 id="案例解釋："><a href="#案例解釋：" class="headerlink" title="案例解釋："></a>案例解釋：</h2><p>小明是個愛乾淨的人，但他工作時常加班導致</p>
<p>學一個技術或思想前我們必須先了解，這個技術或思想可為我們解決什麼問題。</p>
<p><code>Ioc(Inversion of Control)</code>控制反轉</p>
<p><strong>控制反轉是一個設計思想</strong></p>
<p>簡單解釋</p>
<p>A物件程式內部需要使用B物件 A,B物件中有依賴的成份</p>
<p>控制反轉把原本A對B直接控制權移交給由第三方容器</p>
<p>降低A對B物件的耦合程度，並讓雙方都倚賴抽象。</p>
<blockquote>
<p>IoC經典實現對象設計法則　好萊塢法則：“別找我們，我們找你”</p>
</blockquote>
<blockquote>
<p>系統中模組建議依賴抽象，因為各個模組間不需要知道對方太多細節（實作），知道越多耦合越強。</p>
</blockquote>
<hr>
<p>DI—Dependency Injection 依賴注入</p>
<p>把<strong>被依賴物件</strong>注入<strong>被動接收物件</strong>中</p>
<p>案例解釋：</p>
<p>小明是個愛乾淨的人，但他工作時常加班導致房間雜亂，他不能忍受此狀況，所以小明去找一個清潔阿姨每天幫忙他打掃家裡</p>
<p>哪天阿姨哪天有事不能打掃，小明就必須要再去找人來幫忙打掃，由此可知小明耦合阿姨</p>
<hr>
<p>如果今天是….</p>
<p>小明把他要的條件給「打掃仲介公司」，仲介公司幫他尋找有沒有符合小明需求的打掃阿姨，假如今天A阿姨請假了，仲介公司會自動找另一個符合需求B阿姨幫忙打掃…</p>
<p>原本小明需耦合於打掃阿姨，現在被「仲介公司」做了控制反轉讓「仲介公司」來提供打掃阿姨。</p>
<p>小明不用管是否今天有人會來打掃，「仲介公司」會幫小明找到一個掃地阿姨。</p>
<ul>
<li>「仲介公司」可看作 依賴注入容器</li>
<li>「小明」可看作 被動接收物件</li>
</ul>
<p>「打掃阿姨」可看作 被依賴物件</p>
<p>在使用IOC容器前需先了解雙方的依賴關係(誰依賴誰?)</p>
<p>上述還有一個很重要的觀念是，依賴和被接收對象要倚賴抽象。</p>
<hr>
<p>範例使用：VS2015</p>
<p>IOC容器：AutoFac</p>
<p>下面範例來說明上面的例子</p>
<p>小明自己依賴於掃地阿姨<br>依賴程式碼寫在小明類別內部日後要更改只能動內部程式碼。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 小明直接依賴 Aunt 不是依賴抽象</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 日後要改必須動內部</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Mine</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> Aunt aunt = <span class="keyword">new</span> Aunt();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Room</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        aunt.Swapping();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>呼叫使用時</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">Mine mine = <span class="keyword">new</span> Mine();</span><br><span class="line">mine.Room();</span><br></pre></td></tr></table></figure>
<p>小明找仲介公司</p>
<p><strong>仲介公司(Ioc容器)</strong></p>
<p>在仲介公司內註冊需求，讓仲介公司日後幫你找人（註冊的類別）</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 仲介公司</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> IContainer <span class="title">MiddleCompany</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ContainerBuilder builder = <span class="keyword">new</span> ContainerBuilder();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在仲介公司裡寫需求人申請單</span></span><br><span class="line">    builder.RegisterType&lt;MineWithMiddle&gt;();</span><br><span class="line">    <span class="comment">//小明所需打掃阿姨需求</span></span><br><span class="line">    builder.RegisterType&lt;Aunt&gt;().As&lt;ISwapable&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> builder.Build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用起來</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">IContainer middleCompany = MiddleCompany();</span><br><span class="line"><span class="comment">//仲介公司(IOC AutoFac)自動幫小明注入一個打掃阿姨</span></span><br><span class="line">MineWithMiddle mineWithMiddle = middleCompany.Resolve&lt;MineWithMiddle&gt;();</span><br><span class="line"></span><br><span class="line">mineWithMiddle.Room();</span><br></pre></td></tr></table></figure>
<p>總結：</p>
<p>雖然上面程式碼執行結果一樣，但內部結構和日後擴展性卻截然不同</p>
<blockquote>
<p>重點：系統中模組建議依賴抽象，因為各個模組間不需要知道對方太多細節（實作），知道越多耦合越強。</p>
</blockquote>
<p>像網頁瀏覽器和伺服器是依賴<strong>Http</strong>協議，用戶端不管是手機.電腦,平板，伺服器端php,asp.net,java都可互相交信，依賴<strong>Http</strong>協議共用的合約</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2lzZGFuaWVsL0lPQ19TYW1wbGU=" title="https://github.com/isdaniel/IOC_Sample">範例原始碼<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cDovL3d3dy5jbmJsb2dzLmNvbS94ZHAtZ2FjbC9wLzQyNDk5MzkuaHRtbA==" title="http://www.cnblogs.com/xdp-gacl/p/4249939.html">參考連結<i class="fa fa-external-link"></i></span></p>
<p><strong>此文作者</strong>：Daniel Shih(石頭)<br><strong>此文地址</strong>： <a href="https://isdaniel.github.io/ioc-di/">https://isdaniel.github.io/ioc-di/</a> <br><strong>版權聲明</strong>：本博客所有文章除特別聲明外，均採用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC90dy8=" title="https://creativecommons.org/licenses/by-nc-sa/3.0/tw/">CC BY-NC-SA 3.0 TW<i class="fa fa-external-link"></i></span> 許可協議。轉載請註明出處！</p>
]]></content>
      <categories>
        <category>C#</category>
        <category>IOC</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>IOC</tag>
        <tag>Autofac</tag>
        <tag>Design-Pattern</tag>
      </tags>
  </entry>
  <entry>
    <title>(開賽)Http 請求 Asp.net IIS伺服器架構 (第1天)</title>
    <url>/ithelp-day1/</url>
    <content><![CDATA[<h1 id="Agenda"><a href="#Agenda" class="headerlink" title="Agenda"></a>Agenda<!-- omit in toc --></h1><ul>
<li><a href="#%e9%96%8b%e8%b3%bd%e5%89%8d%e8%a8%80">開賽前言：</a><ul>
<li><a href="#%e7%82%ba%e4%bb%80%e9%ba%bc%e6%83%b3%e8%a6%81%e9%81%b8%e6%93%87%e6%ad%a4%e4%b8%bb%e9%a1%8c">為什麼想要選擇此主題</a></li>
<li><a href="#%e9%96%b1%e8%ae%80%e6%99%82%e5%bb%ba%e8%ad%b0%e4%ba%8b%e9%a0%85">閱讀時建議事項</a></li>
<li><a href="#%e6%96%87%e7%ab%a0%e6%94%b6%e7%a9%ab">文章收穫</a></li>
</ul>
</li>
<li><a href="#%e9%80%b2%e5%85%a5%e4%b8%bb%e9%a1%8c">進入主題</a><ul>
<li><a href="#%e7%80%8f%e8%a6%bd%e5%99%a8%e8%ab%8b%e6%b1%82iis%e6%b5%81%e7%a8%8b">瀏覽器請求IIS流程</a></li>
<li><a href="#%e5%a6%82%e4%bd%95%e8%be%a8%e5%88%a5%e6%98%af%e5%90%a6%e7%82%ba%e9%9d%9c%e6%85%8b%e6%aa%94%e6%a1%88">如何辨別是否為靜態檔案?</a></li>
<li><a href="#net-clr-httpmodule--httphandler-%e6%a0%b8%e5%bf%83%e6%a8%a1%e7%b5%84">.Net CLR Httpmodule &amp; Httphandler 核心模組</a></li>
<li><a href="#w3wp%e6%87%89%e7%94%a8%e7%a8%8b%e5%bc%8f">W3WP應用程式</a></li>
</ul>
</li>
<li><a href="#%e5%b0%8f%e7%b5%90">小結</a></li>
</ul>
<h2 id="開賽前言："><a href="#開賽前言：" class="headerlink" title="開賽前言："></a>開賽前言：</h2><p>三十篇文章架構基本遵循:</p>
<ol>
<li><strong>前言:</strong>前情提要，閱讀此文建議使用工具或知識.</li>
<li>標出大主題(大字體+錨點)之後在細項列出要說明的細節</li>
<li>小結：每篇都有一個小結快速總結今天重點</li>
</ol>
<h3 id="為什麼想要選擇此主題"><a href="#為什麼想要選擇此主題" class="headerlink" title="為什麼想要選擇此主題"></a>為什麼想要選擇此主題</h3><p>選擇這個主題主要原因是</p>
<ol>
<li>沒有人整理一套較完整的Asp.net執行原始碼解析文章(從<code>Http</code>請求<code>IIS Server</code>,進入<code>CLR</code>前置動作),<strong>asp.net mvc</strong>原始碼解析</li>
<li>台灣大部分的文章都是分享如何使用，很少文章有介紹如何運作．</li>
<li>利用微軟開原後站在巨人肩膀上可以看更遠，理解<strong>MVC</strong>框架如何去設計具有一定的彈性.</li>
<li>了解核心運作流程，更好改善或擴充現有專案架構（讓系統變得更有條理）</li>
</ol>
<h3 id="閱讀時建議事項"><a href="#閱讀時建議事項" class="headerlink" title="閱讀時建議事項"></a>閱讀時建議事項</h3><p>我在文章中會盡量寫出我看到精華部分,但此系列文可能對於<strong>MVC</strong>新手不太容易閱讀,因為<strong>MVC</strong>框架中運用到許多設計模式和OOP觀念(當初我在閱讀上也花了不少功夫)</p>
<p>個人覺得OOP有很重要一個點是盡量用<strong>物件和物件關聯</strong>，資料狀態轉移來了解程式碼.</p>
<blockquote>
<p>簡白來說就是物件關聯和關係</p>
</blockquote>
<h3 id="文章收穫"><a href="#文章收穫" class="headerlink" title="文章收穫"></a>文章收穫</h3><p>我希望大家在閱讀完所有文章後可以獲得</p>
<ol>
<li><strong>Http</strong>對於<strong>IIS Server</strong>請求如何導向<strong>Asp.net MVC</strong>執行</li>
<li><strong>Asp.net MVC</strong>原始碼有基本了解和知道哪幾個重要類別,了解後能依照系統需要替換改寫.</li>
<li><strong>Asp.net MVC</strong>用到很多設計技巧(因為這是一個較大框架),希望大家能更了解設計模式如何運用在實戰中</li>
<li>閱讀第一個框架原始碼會花不少時間,了解一個大框架後在去看其他框架閱讀時間會越來越少</li>
</ol>
<h2 id="進入主題"><a href="#進入主題" class="headerlink" title="進入主題"></a>進入主題</h2><p><code>Asp.net</code>基於<code>.NET Framework</code>框架所提供，開發<strong>Web</strong>應用程式的類別庫，封裝在<code>System.Web.dll</code>檔案中，提供使用者開發網頁，ASP.NET運行在安裝了.NET Framework的<code>IIS(Internet Information Services)</code>伺服器上</p>
<p>微軟大大近幾年也投入<code>Open Source</code>行列讓我們可以更方便來窺探，Asp.net運作原理. 這個<span class="exturl" data-url="aHR0cHM6Ly9yZWZlcmVuY2Vzb3VyY2UubWljcm9zb2Z0LmNvbS8=" title="https://referencesource.microsoft.com/">連結 Reference Source<i class="fa fa-external-link"></i></span> 可以查看微軟核心的<code>DLL</code>程式碼(這個網站是我們第一階段追code的好朋友)</p>
<p><code>Asp.net</code>程式基本上是由<code>IIS</code>進行託管，介紹<code>Asp.net MVC</code>原始碼之前我們需要先了解<code>Asp.net</code>和<code>IIS</code>關係.</p>
<h3 id="瀏覽器請求IIS流程"><a href="#瀏覽器請求IIS流程" class="headerlink" title="瀏覽器請求IIS流程"></a>瀏覽器請求IIS流程</h3><p>Web基於Http協定，它是一個無狀態協定，每次請求都是新的且不會紀錄之前請求的東西<br>下圖我畫出一個對於IIS請求基本會跑的流程圖.</p>
<p><img src="https://raw.githubusercontent.com/isdaniel/MyBlog/master/source/images/IIS_Asp.net_Process.png" alt="瀏覽器請求IIS流程"></p>
<p>基本分為兩個區塊</p>
<ul>
<li>粉紅色是<code>IIS Server</code>領域<ul>
<li>會有一個<code>Http.sys</code>的程式在監聽所有<code>Http</code>請求並交由<code>W3WP.exe</code>並透過<code>aspnet_isapi</code>來此次請求是否為靜態檔案.</li>
</ul>
</li>
<li>藍色是<code>.Net CLR</code>領域由幾塊核心程式完成請求<ul>
<li>ISAPIRunTime</li>
<li>HttpRuntime</li>
<li>HttpApplicationFactory</li>
<li>HttpApplication</li>
</ul>
</li>
</ul>
<p>之後會陸續介紹他們.</p>
<ol>
<li>請求<strong>靜態檔案</strong>透過路徑找尋<strong>靜態檔案</strong>並回傳.</li>
<li>請求<strong>非靜態檔案</strong>透過<code>.Net CLR</code>執行返回結果.</li>
</ol>
<h3 id="如何辨別是否為靜態檔案"><a href="#如何辨別是否為靜態檔案" class="headerlink" title="如何辨別是否為靜態檔案?"></a>如何辨別是否為靜態檔案?</h3><p>如何辨別是否為靜態檔案,就需要談談<code>HttpHandler</code>的註冊表(後面有文章會說到)</p>
<p>基本上如果是請求<code>Html</code>,<code>css</code>,<code>js</code>…都會直接回傳不會在經過<code>.Net CLR</code></p>
<h3 id="Net-CLR-Httpmodule-amp-Httphandler-核心模組"><a href="#Net-CLR-Httpmodule-amp-Httphandler-核心模組" class="headerlink" title=".Net CLR Httpmodule &amp; Httphandler 核心模組"></a>.Net CLR Httpmodule &amp; Httphandler 核心模組</h3><p>Asp.net所有應用程式都離不開兩個核心模組<code>Httpmodule &amp; Httphandler</code>且最終會找到一個繼承於<code>IHttpHanlder</code>物件來處理請求.</p>
<p>在網路上看到一個很好地比喻<strong>HttpModule &amp; HttpHandler</strong></p>
<p><strong>Http</strong>請求像是一個旅客身上帶著行李拿著票來搭火車.</p>
<ul>
<li><code>HttpHandler</code> 是火車的終點站.</li>
<li><code>HttpModule</code> 是火車中途停靠的各站.</li>
</ul>
<p>這個比喻可以很清楚知道每個請求透過<code>CLR</code>就是要找到一個<code>HttpHandler</code>來執行.</p>
<p><img src="https://www.codeproject.com/KB/web-image/thumbnailer/thumbnailer_pipeline.gif" alt="圖片參考連結"></p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY29kZXByb2plY3QuY29tL0FydGljbGVzLzE2MTIwL1RodW1ibmFpbGVyLUhUVFAtSGFuZGxlcg==" title="https://www.codeproject.com/Articles/16120/Thumbnailer-HTTP-Handler">圖片參考連結<i class="fa fa-external-link"></i></span></p>
<h3 id="W3WP應用程式"><a href="#W3WP應用程式" class="headerlink" title="W3WP應用程式"></a>W3WP應用程式</h3><p>當<code>IIS</code>在執行處理Http請求時工作管理員有一個<code>w3wp</code>應用程式在監聽.</p>
<p>此應用程式會依照<code>aspnet_isapi</code>模組來判斷此次請求是否走入<code>.net CLR</code></p>
<p><img src="https://raw.githubusercontent.com/isdaniel/MyBlog/master/source/images/itHelp/1/w3wp.PNG" alt="w3wp.PNG"></p>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>今天我們了解到</p>
<ol>
<li>瀏覽器請求IIS基本流程</li>
<li>Asp.net核心模組<strong>Httpmodule &amp; Httphandler</strong></li>
<li>IIS有一個<code>Http.sys</code>程式在監聽所有<code>Http</code>請求</li>
<li>IIS透過一個<code>w3wp.exe</code>初步過濾判斷如何執行此請求.</li>
</ol>
<p>瀏覽器發出<strong>Http</strong>請求給IIS,IIS透過<code>Http.sys</code>來監聽請求並交給<code>w3wp.exe</code>這個應用程式來判斷是否要交由<code>.net</code>託管處理此次請求.</p>
<p>下篇我們會來詳細講述<code>Httpmodule &amp; Httphandler</code></p>
<p><strong>此文作者</strong>：Daniel Shih(石頭)<br><strong>此文地址</strong>： <a href="https://isdaniel.github.io/ithelp-day1/">https://isdaniel.github.io/ithelp-day1/</a> <br><strong>版權聲明</strong>：本博客所有文章除特別聲明外，均採用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC90dy8=" title="https://creativecommons.org/licenses/by-nc-sa/3.0/tw/">CC BY-NC-SA 3.0 TW<i class="fa fa-external-link"></i></span> 許可協議。轉載請註明出處！</p>
]]></content>
      <categories>
        <category>11th鐵人賽</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>Asp.net</tag>
        <tag>Asp.net-MVC</tag>
        <tag>SourceCode</tag>
        <tag>11th鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>透過MvcRouteHandler取得呼叫IHttphandler (第10天)</title>
    <url>/ithelp-day10/</url>
    <content><![CDATA[<h1 id="Agenda"><a href="#Agenda" class="headerlink" title="Agenda"></a>Agenda<!-- omit in toc --></h1><ul>
<li><a href="#%e5%89%8d%e8%a8%80">前言</a></li>
<li><a href="#mvc%e5%8f%96%e5%be%97%e4%bd%bf%e7%94%a8httphandler-ihttphandler">MVC取得使用HttpHandler (IHttpHandler)</a></li>
<li><a href="#mvc%e5%91%bc%e5%8f%ab%e7%9a%84httphandler-mvchandler">MVC呼叫的HttpHandler (MvcHandler)</a></li>
<li><a href="#%e5%b0%8f%e7%b5%90">小結</a></li>
</ul>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前一篇介紹路由封裝了Http請求路徑資訊可以讓我們找到相對應的<code>Action</code>和<code>Controller</code>並呼叫執行外，也可透過<code>MapPageRoute</code>來將請求教給<code>.aspx</code>實體檔案來處理請求.</p>
<p><code>Route</code>甚至可以讓我們自己客製化處理<code>HttpHandler</code> 在Route中建立處理客製化HttpHandler可謂很有彈性</p>
<p>本篇介紹<code>Route</code>物件建立<code>MvcRouteHandler</code>物件且如何取到<code>IHttpHandler</code>.</p>
<p>我有做一個可以針對於<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2lzZGFuaWVsL0FzcC5uZXQtTVZDLURlYnVnZXI=" title="https://github.com/isdaniel/Asp.net-MVC-Debuger">Asp.net MVC Debugger<i class="fa fa-external-link"></i></span>的專案，只要下中斷點就可輕易進入Asp.net MVC原始碼.</p>
<h2 id="MVC取得使用HttpHandler-IHttpHandler"><a href="#MVC取得使用HttpHandler-IHttpHandler" class="headerlink" title="MVC取得使用HttpHandler (IHttpHandler)"></a>MVC取得使用HttpHandler (IHttpHandler)</h2><p>之前說到我們透過<code>MapRoute</code>擴展方法加入一個<code>Route</code>物件給<code>RouteCollection</code><strong>全域路由集合</strong>.</p>
<p>在<code>Route</code>使用的<code>IRouteHandler</code>介面是由<code>MvcRouteHandler</code>來實現</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line">Route route = <span class="keyword">new</span> Route(url, <span class="keyword">new</span> MvcRouteHandler())</span><br><span class="line">&#123;</span><br><span class="line">    Defaults = CreateRouteValueDictionaryUncached(defaults),</span><br><span class="line">    Constraints = CreateRouteValueDictionaryUncached(constraints),</span><br><span class="line">    DataTokens = <span class="keyword">new</span> RouteValueDictionary()</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>
<p><code>IRouteHandler</code>最重要的是<code>IHttpHandler IRouteHandler.GetHttpHandler(RequestContext requestContext)</code>會取得一個<code>IHttpHandler</code>物件.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MvcRouteHandler</span> : <span class="title">IRouteHandler</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> IControllerFactory _controllerFactory;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MvcRouteHandler</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MvcRouteHandler</span>(<span class="params">IControllerFactory controllerFactory</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        _controllerFactory = controllerFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">virtual</span> IHttpHandler <span class="title">GetHttpHandler</span>(<span class="params">RequestContext requestContext</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="comment">//設置Session使用</span></span><br><span class="line">        requestContext.HttpContext.SetSessionStateBehavior(GetSessionStateBehavior(requestContext));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MvcHandler(requestContext);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">virtual</span> SessionStateBehavior <span class="title">GetSessionStateBehavior</span>(<span class="params">RequestContext requestContext</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">string</span> controllerName = (<span class="keyword">string</span>)requestContext.RouteData.Values[<span class="string">"controller"</span>];</span><br><span class="line">        <span class="keyword">if</span> (String.IsNullOrWhiteSpace(controllerName))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(MvcResources.MvcRouteHandler_RouteValuesHasNoController);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        IControllerFactory controllerFactory = _controllerFactory ?? ControllerBuilder.Current.GetControllerFactory();</span><br><span class="line">        <span class="keyword">return</span> controllerFactory.GetControllerSessionBehavior(requestContext, controllerName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">region</span> IRouteHandler Members</span></span><br><span class="line"></span><br><span class="line">    IHttpHandler IRouteHandler.GetHttpHandler(RequestContext requestContext)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> GetHttpHandler(requestContext);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>上面程式碼可以看到<strong>Mvc</strong>使用<code>IHttpHandler</code>是<code>MvcHandler</code></p>
<h2 id="MVC呼叫的HttpHandler-MvcHandler"><a href="#MVC呼叫的HttpHandler-MvcHandler" class="headerlink" title="MVC呼叫的HttpHandler (MvcHandler)"></a>MVC呼叫的HttpHandler (MvcHandler)</h2><p><code>MvcHandler</code>類別中主要核心的程式碼做了幾件事情.</p>
<ol>
<li>使用一個<code>Adapter</code>對於<code>HttpContext</code>物件把他轉成可以繼承於<code>HttpContextBase</code>的<code>HttpContextWrapper</code>類別.</li>
<li>透過<code>ProcessRequestInit</code>取得執行<code>controller</code>物件並且呼叫執行方法.</li>
<li>最後透過<code>ReleaseController</code>釋放之前使用過資源</li>
</ol>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">ProcessRequest</span>(<span class="params">HttpContext httpContext</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HttpContextBase httpContextBase = <span class="keyword">new</span> HttpContextWrapper(httpContext);</span><br><span class="line">    ProcessRequest(httpContextBase);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">internal</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">ProcessRequest</span>(<span class="params">HttpContextBase httpContext</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    IController controller;</span><br><span class="line">    IControllerFactory factory;</span><br><span class="line">    <span class="comment">//取得 控制器工廠(預設DefaultControllerFactory) 和 要執行的Controller</span></span><br><span class="line">    ProcessRequestInit(httpContext, <span class="keyword">out</span> controller, <span class="keyword">out</span> factory);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        controller.Execute(RequestContext);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span></span><br><span class="line">    &#123;</span><br><span class="line">        factory.ReleaseController(controller);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>今天我們知道MVC使用<code>HttpHandler</code>是<code>MvcHandler</code>透過並<code>MvcRouteHandler</code>物件來返回.</p>
<p>下圖簡單展現MVC使用的<code>HttpModule</code>和<code>HttpHandler</code>關係</p>
<p><img src="https://raw.githubusercontent.com/isdaniel/MyBlog/master/source/images/itHelp/10/relationship_pic.PNG" alt="relationship_pic.PNG"></p>
<ol>
<li>在<code>UrlRoutingMoudule</code>註冊事件.</li>
<li>取得符合Http請求<code>Route</code>物件</li>
<li>呼叫<code>MvcRouteHandler</code>取得<code>MvcHandler</code>物件</li>
<li>執行<code>MvcHandler</code>的<code>ProcessReqeust</code>方法</li>
</ol>
<p>下面會陸續介紹<strong>MVC</strong>是如何取得<code>Controller</code>物件</p>
<p><strong>此文作者</strong>：Daniel Shih(石頭)<br><strong>此文地址</strong>： <a href="https://isdaniel.github.io/ithelp-day10/">https://isdaniel.github.io/ithelp-day10/</a> <br><strong>版權聲明</strong>：本博客所有文章除特別聲明外，均採用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC90dy8=" title="https://creativecommons.org/licenses/by-nc-sa/3.0/tw/">CC BY-NC-SA 3.0 TW<i class="fa fa-external-link"></i></span> 許可協議。轉載請註明出處！</p>
]]></content>
      <categories>
        <category>11th鐵人賽</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>Asp.net</tag>
        <tag>Asp.net-MVC</tag>
        <tag>SourceCode</tag>
        <tag>11th鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>Asp.net MVC Controller是怎麼被建立 (第11天)</title>
    <url>/ithelp-day11/</url>
    <content><![CDATA[<h1 id="Agenda"><a href="#Agenda" class="headerlink" title="Agenda"></a>Agenda<!-- omit in toc --></h1><ul>
<li><a href="#%e5%89%8d%e8%a8%80">前言</a></li>
<li><a href="#%e5%8f%96%e5%be%97%e5%9f%b7%e8%a1%8ccontroller">取得執行Controller</a><ul>
<li><a href="#controllerbuilder">ControllerBuilder</a></li>
<li><a href="#icontrollerfactory%e4%bb%8b%e9%9d%a2">IControllerFactory介面</a></li>
<li><a href="#controllerfactorydefaultcontrollerfactorycs">ControllerFactory(DefaultControllerFactory.cs)</a></li>
</ul>
</li>
<li><a href="#%e5%bb%ba%e7%ab%8bcontroller%e7%9a%84icontrolleractivator">建立Controller的IControllerActivator</a></li>
<li><a href="#%e5%b0%8f%e7%b5%90">小結:</a></li>
</ul>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前篇介紹MVC使用<code>HttpHandler</code>是<code>MvcHandler</code>透過並<code>MvcRouteHandler</code>物件來返回.</p>
<p><img src="https://raw.githubusercontent.com/isdaniel/MyBlog/master/source/images/itHelp/10/relationship_pic.PNG" alt="relationship_pic.PNG"></p>
<p>我有做一個可以針對於<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2lzZGFuaWVsL0FzcC5uZXQtTVZDLURlYnVnZXI=" title="https://github.com/isdaniel/Asp.net-MVC-Debuger">Asp.net MVC Debugger<i class="fa fa-external-link"></i></span>的專案，只要下中斷點就可輕易進入Asp.net MVC原始碼.</p>
<p>大家介紹如何取得<code>Controller</code>執行物件</p>
<h2 id="取得執行Controller"><a href="#取得執行Controller" class="headerlink" title="取得執行Controller"></a>取得執行Controller</h2><p>在<code>ProcessRequest</code>方法是透過<code>ProcessRequestInit</code>取得執行<code>controller</code>物件,讓我們看看是這個方法如何<code>controller</code>物件.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ProcessRequestInit</span>(<span class="params">HttpContextBase httpContext, <span class="keyword">out</span> IController controller, <span class="keyword">out</span> IControllerFactory factory</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HttpContext currentContext = HttpContext.Current;</span><br><span class="line">    <span class="keyword">if</span> (currentContext != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">bool</span>? isRequestValidationEnabled = ValidationUtility.IsValidationEnabled(currentContext);</span><br><span class="line">        <span class="keyword">if</span> (isRequestValidationEnabled == <span class="literal">true</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ValidationUtility.EnableDynamicValidation(currentContext);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    AddVersionHeader(httpContext);</span><br><span class="line">    RemoveOptionalRoutingParameters();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get the controller type</span></span><br><span class="line">    <span class="keyword">string</span> controllerName = RequestContext.RouteData.GetRequiredString(<span class="string">"controller"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Instantiate the controller and call Execute</span></span><br><span class="line">    factory = ControllerBuilder.GetControllerFactory();</span><br><span class="line">    controller = factory.CreateController(RequestContext, controllerName);</span><br><span class="line">    <span class="keyword">if</span> (controller == <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(</span><br><span class="line">            String.Format(</span><br><span class="line">                CultureInfo.CurrentCulture,</span><br><span class="line">                MvcResources.ControllerBuilder_FactoryReturnedNull,</span><br><span class="line">                factory.GetType(),</span><br><span class="line">                controllerName));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>從上面程式碼可以得知我們執行<code>Controller</code>物件實現於<code>IController</code>介面，並會呼叫<code>IController.Execute</code>方法.</p>
<blockquote>
<p><code>IController</code>介面是同步的方式執行。為了支持非同步請求處理，<code>IController</code>介面非同步版本<code>System.Web.Mvc.IAsyncController</code>被定義出来。<code>IAsyncController</code>介面通過<code>BeginExecute/EndExecute</code>方法组合来完成。</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IController</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Execute</span>(<span class="params">RequestContext requestContext</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IAsyncController</span> : <span class="title">IController</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">IAsyncResult <span class="title">BeginExecute</span>(<span class="params">RequestContext requestContext, AsyncCallback callback, <span class="keyword">object</span> state</span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">EndExecute</span>(<span class="params">IAsyncResult asyncResult</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>透過<code>RouteData.GetRequiredString</code>取得執行<code>Controller</code>名稱，經由<code>RouteValueDictionary</code>查找之前註冊<code>Url</code>樣板並解析此次要使用<code>Controller</code>名稱</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">GetRequiredString</span>(<span class="params"><span class="keyword">string</span> valueName</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">object</span> obj;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.Values.TryGetValue(valueName, <span class="keyword">out</span> obj))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">string</span> str = obj <span class="keyword">as</span> <span class="keyword">string</span>;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">string</span>.IsNullOrEmpty(str))</span><br><span class="line">            <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="keyword">string</span>.Format((IFormatProvider) CultureInfo.CurrentUICulture, System.Web.SR.GetString(<span class="string">"RouteData_RequiredValue"</span>), <span class="keyword">new</span> <span class="keyword">object</span>[<span class="number">1</span>]</span><br><span class="line">    &#123;</span><br><span class="line">    (<span class="keyword">object</span>) valueName</span><br><span class="line">    &#125;));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="ControllerBuilder"><a href="#ControllerBuilder" class="headerlink" title="ControllerBuilder"></a>ControllerBuilder</h3><p><code>ControllerBuilder</code>類別定義一個<code>Current</code>靜態只讀屬性現在返回<code>ControllerBuilder</code>物件是一個全域物件。<code>SetControllerFactory</code>方法重載用於註冊<code>ControllerFactory</code>類型或物件，而<code>GetControllerFactory</code>方法返回一個具體<code>ControllerFactory</code>物件。</p>
<p>我們透過<code>GetControllerFactory</code>取得返回<code>Controller</code>工廠.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ControllerBuilder</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IControllerFactory <span class="title">GetControllerFactory</span>(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetControllerFactory</span>(<span class="params">Type controllerFactoryType</span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetControllerFactory</span>(<span class="params">IControllerFactory controllerFactory</span>)</span>;  </span><br><span class="line">    <span class="function">IControllerFactory <span class="title">GetControllerFactory</span>(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="keyword">public</span> HashSet&lt;<span class="keyword">string</span>&gt; DefaultNamespaces &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ControllerBuilder Current &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><code>GetControllerFactory</code>透過<code>private IResolver&lt;IControllerFactory&gt;</code>取得要執行的<code>ControllerFactory</code>.</p>
<p>一般來說沒有設置就是使用<code>DefaultControllerFactory</code>工廠來取得<code>Controller</code>物件</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> IControllerFactory <span class="title">GetControllerFactory</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> _serviceResolver.Current;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">internal</span> <span class="title">ControllerBuilder</span>(<span class="params">IResolver&lt;IControllerFactory&gt; serviceResolver</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">_serviceResolver = serviceResolver ?? <span class="keyword">new</span> SingleServiceResolver&lt;IControllerFactory&gt;(</span><br><span class="line">                () =&gt; _factoryThunk(),</span><br><span class="line">                <span class="keyword">new</span> DefaultControllerFactory &#123; ControllerBuilder = <span class="keyword">this</span> &#125;,</span><br><span class="line">                <span class="string">"ControllerBuilder.GetControllerFactory"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="IControllerFactory介面"><a href="#IControllerFactory介面" class="headerlink" title="IControllerFactory介面"></a>IControllerFactory介面</h3><p><code>IControllerFactory</code>介面有三個方法.</p>
<ol>
<li><code>CreateController</code>取得<code>Controller</code>物件(工廠模式最重要方法)</li>
<li><code>GetControllerSessionBehavior</code>取得<code>Session</code><ul>
<li>Default：使用預設<code>ASP.NET</code> Session狀態行為。</li>
<li>Required：使用完全的讀和寫Session狀態行為。</li>
<li>ReadOnly：使用只讀Session狀態。</li>
<li>Disabled：不使用Session狀態。</li>
</ul>
</li>
<li><code>ReleaseController</code>釋放使用資源</li>
</ol>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IControllerFactory</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">IController <span class="title">CreateController</span>(<span class="params">RequestContext requestContext, <span class="keyword">string</span> controllerName</span>)</span>;</span><br><span class="line">    <span class="function">SessionStateBehavior <span class="title">GetControllerSessionBehavior</span>(<span class="params">RequestContext requestContext, <span class="keyword">string</span> controllerName</span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ReleaseController</span>(<span class="params">IController controller</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="ControllerFactory-DefaultControllerFactory-cs"><a href="#ControllerFactory-DefaultControllerFactory-cs" class="headerlink" title="ControllerFactory(DefaultControllerFactory.cs)"></a>ControllerFactory(DefaultControllerFactory.cs)</h3><p>既然知道透過哪個工廠來產生<code>Controller</code>我們繼續追工廠是如何產生<code>Controller</code>物件</p>
<ol>
<li><code>GetControllerType</code>取得要執行<code>Controller</code>類型</li>
<li><code>GetControllerInstance</code>取得<code>Controller</code>物件並返回使用</li>
</ol>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> IController <span class="title">CreateController</span>(<span class="params">RequestContext requestContext, <span class="keyword">string</span> controllerName</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (requestContext == <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="string">"requestContext"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (String.IsNullOrEmpty(controllerName) &amp;&amp; !requestContext.RouteData.HasDirectRouteMatch())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(MvcResources.Common_NullOrEmpty, <span class="string">"controllerName"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Type controllerType = GetControllerType(requestContext, controllerName);</span><br><span class="line">    IController controller = GetControllerInstance(requestContext, controllerType);</span><br><span class="line">    <span class="keyword">return</span> controller;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><code>GetControllerInstance</code>通過反射（系統不會對建立的<code>Controller</code>進行快取</p>
<blockquote>
<p>使用<code>IControllerActivator</code>(預設<code>DefaultControllerActivator</code>) 來建立<code>Controller</code>物件</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">internal</span> <span class="keyword">virtual</span> IController <span class="title">GetControllerInstance</span>(<span class="params">RequestContext requestContext, Type controllerType</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (controllerType == <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> HttpException(<span class="number">404</span>,</span><br><span class="line">                                String.Format(</span><br><span class="line">                                    CultureInfo.CurrentCulture,</span><br><span class="line">                                    MvcResources.DefaultControllerFactory_NoControllerFound,</span><br><span class="line">                                    requestContext.HttpContext.Request.Path));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">typeof</span>(IController).IsAssignableFrom(controllerType))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(</span><br><span class="line">            String.Format(</span><br><span class="line">                CultureInfo.CurrentCulture,</span><br><span class="line">                MvcResources.DefaultControllerFactory_TypeDoesNotSubclassControllerBase,</span><br><span class="line">                controllerType),</span><br><span class="line">            <span class="string">"controllerType"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//使用IControllerActivator(預設DefaultControllerActivator) 來建立Controller物件</span></span><br><span class="line">    <span class="keyword">return</span> ControllerActivator.Create(requestContext, controllerType);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="建立Controller的IControllerActivator"><a href="#建立Controller的IControllerActivator" class="headerlink" title="建立Controller的IControllerActivator"></a>建立Controller的IControllerActivator</h2><p>上面說<code>GetControllerInstance</code>會透過一個<code>ControllerActivator</code>,而<code>ControllerActivator</code>預設其實是<code>DefaultControllerActivator</code>類別幫助我們建立<code>Controller</code>物件透過<code>Create</code>方法.</p>
<p>以下是<code>DefaultControllerActivator</code>程式碼</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title">DefaultControllerActivator</span> : <span class="title">IControllerActivator</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> Func&lt;IDependencyResolver&gt; _resolverThunk;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DefaultControllerActivator</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        : <span class="title">this</span>(<span class="params"><span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DefaultControllerActivator</span>(<span class="params">IDependencyResolver resolver</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (resolver == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            _resolverThunk = () =&gt; DependencyResolver.Current;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            _resolverThunk = () =&gt; resolver;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IController <span class="title">Create</span>(<span class="params">RequestContext requestContext, Type controllerType</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> (IController)(_resolverThunk().GetService(controllerType) ?? Activator.CreateInstance(controllerType));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(</span><br><span class="line">                String.Format(</span><br><span class="line">                    CultureInfo.CurrentCulture,</span><br><span class="line">                    MvcResources.DefaultControllerFactory_ErrorCreatingController,</span><br><span class="line">                    controllerType),</span><br><span class="line">                ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>能看到這邊依賴一個<code>IDependencyResolver</code>,這裡先埋個小伏筆後面幾篇會為各位解答.</p>
<blockquote>
<p><code>DefaultControllerActivator</code>透過<code>Activator.CreateInstance</code>產生<code>Controller</code>物件,使用無建構子參數的Create方式</p>
</blockquote>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結:"></a>小結:</h2><p>今天我們學到如何取得<code>Controller</code>執行物件</p>
<ol>
<li>透過一個<code>IControllerFactory</code>工廠物件取得<code>Controller</code>執行物件,對於外部提供可替換點.</li>
<li>利用<code>RouteData.GetRequiredString</code>取得執行的<code>Controller</code>名稱</li>
<li><code>DefaultControllerFactory</code>透過反射方式動態建立物件.</li>
</ol>
<p>工廠模式主要核心把如何使用物件跟如何建立物件中間解耦合，使用方不關心如何產生物件，只專注於此物件可執行的能力（介面）</p>
<p>下圖是本次介紹類別<code>UML</code>關係圖</p>
<p><img src="https://raw.githubusercontent.com/isdaniel/MyBlog/master/source/images/itHelp/11/mvchandler_uml.png" alt="mvchandler_uml.png"></p>
<p><code>MvcHandler</code>是<code>MVC</code>的核心類別,借由<code>ControllerBuilder</code>創件者來取得產生<code>Controller</code>的工廠(預設使用<code>DefaultControllerFactory</code>)，並呼叫<code>CreateController</code>方法來產生一個<code>Controller</code></p>
<p><strong>此文作者</strong>：Daniel Shih(石頭)<br><strong>此文地址</strong>： <a href="https://isdaniel.github.io/ithelp-day11/">https://isdaniel.github.io/ithelp-day11/</a> <br><strong>版權聲明</strong>：本博客所有文章除特別聲明外，均採用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC90dy8=" title="https://creativecommons.org/licenses/by-nc-sa/3.0/tw/">CC BY-NC-SA 3.0 TW<i class="fa fa-external-link"></i></span> 許可協議。轉載請註明出處！</p>
]]></content>
      <categories>
        <category>11th鐵人賽</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>Asp.net</tag>
        <tag>Asp.net-MVC</tag>
        <tag>SourceCode</tag>
        <tag>11th鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>談談Controller幾個重要成員 (第12天)</title>
    <url>/ithelp-day12/</url>
    <content><![CDATA[<h1 id="Agenda"><a href="#Agenda" class="headerlink" title="Agenda"></a>Agenda<!-- omit in toc --></h1><ul>
<li><a href="#%e5%89%8d%e8%a8%80">前言</a></li>
<li><a href="#controllerbasecontroller%e5%9f%ba%e7%a4%8e%e9%a1%9e%e5%88%a5">ControllerBase(Controller基礎類別)</a><ul>
<li><a href="#sessionstatetempdataprovider-%e6%8e%a7%e5%88%b6%e5%84%b2%e5%ad%98tempdata">SessionStateTempDataProvider 控制儲存TempData</a></li>
</ul>
</li>
<li><a href="#controllerbase-excute%e6%96%b9%e6%b3%95">ControllerBase Excute方法</a></li>
<li><a href="#controller">Controller</a><ul>
<li><a href="#executecore">ExecuteCore</a></li>
</ul>
</li>
<li><a href="#controllercontext">ControllerContext</a><ul>
<li><a href="#controllercontext-1">ControllerContext</a></li>
<li><a href="#authorizationcontext">AuthorizationContext</a></li>
</ul>
</li>
<li><a href="#%e5%b0%8f%e7%b5%90">小結：</a></li>
</ul>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上篇得知MVC預設透過<code>DefaultControllerFactory</code>反射方式動態建立<code>Controller</code>物件</p>
<p>本篇會分享我們常用到<code>Controller</code>基礎類別和相關物件.</p>
<blockquote>
<p>我有做一個可以針對於<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2lzZGFuaWVsL0FzcC5uZXQtTVZDLURlYnVnZXI=" title="https://github.com/isdaniel/Asp.net-MVC-Debuger">Asp.net MVC Debugger<i class="fa fa-external-link"></i></span>的專案，只要下中斷點就可輕易進入Asp.net MVC原始碼.</p>
</blockquote>
<h2 id="ControllerBase-Controller基礎類別"><a href="#ControllerBase-Controller基礎類別" class="headerlink" title="ControllerBase(Controller基礎類別)"></a>ControllerBase(Controller基礎類別)</h2><p><code>ControllerBase</code>具有如下幾個重要的屬性</p>
<ol>
<li><code>TempData</code>：將設置資料存於<code>Session</code>中,生命週期除了當下請求, 導頁後仍可續存.</li>
<li><code>ViewBag</code>：儲存<code>Controller</code>向<code>view</code>傳遞資料或變數 (型別<code>dynamic</code>)</li>
<li><code>ViewData</code>：儲存<code>Controller</code>向<code>view</code>傳遞資料或變數 (型別<code>ViewDataDictionary</code>)</li>
</ol>
<p>雖說<code>ViewBag</code>和<code>ViewData</code>看起來使用不同的物件,但從程式碼了解到其實<code>ViewBag</code>也是使用<code>ViewData</code>引用.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">ControllerBase</span> : <span class="title">IController</span></span><br><span class="line">&#123;   </span><br><span class="line">    <span class="keyword">public</span> ControllerContext ControllerContext &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> TempDataDictionary TempData</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (ControllerContext != <span class="literal">null</span> &amp;&amp; ControllerContext.IsChildAction)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> ControllerContext.ParentActionViewContext.TempData;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (_tempDataDictionary == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                _tempDataDictionary = <span class="keyword">new</span> TempDataDictionary();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> _tempDataDictionary;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123; _tempDataDictionary = <span class="keyword">value</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">dynamic</span> ViewBag</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (_dynamicViewDataDictionary == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                _dynamicViewDataDictionary = <span class="keyword">new</span> DynamicViewDataDictionary(() =&gt; ViewData);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> _dynamicViewDataDictionary;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> ViewDataDictionary ViewData &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="SessionStateTempDataProvider-控制儲存TempData"><a href="#SessionStateTempDataProvider-控制儲存TempData" class="headerlink" title="SessionStateTempDataProvider 控制儲存TempData"></a>SessionStateTempDataProvider 控制儲存TempData</h3><p>上面說到<code>TempData</code>字典集合生命週期除了當下請求, 導頁後仍可續存.原因是在<code>SessionStateTempDataProvider</code>將資料存在<code>Session</code>中</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line">controllerContext.HttpContext.Session[<span class="string">"__ControllerTempData"</span>]</span><br></pre></td></tr></table></figure></div>
<p>可以透過上面程式碼取得當前的<code>TempData</code>字典集合物件.</p>
<h2 id="ControllerBase-Excute方法"><a href="#ControllerBase-Excute方法" class="headerlink" title="ControllerBase Excute方法"></a>ControllerBase Excute方法</h2><p><code>ControllerBase</code>這個類別繼承<code>IController</code>,前篇說到在<strong>HttpHandler</strong> <code>ProcessRequest</code>方法會透過反射找到一個符合Http請求<code>IController</code>介面物件.<br>並呼叫其<code>Execute</code>方法</p>
<p>在<code>Execute</code>做了幾件事情.</p>
<ul>
<li>初始化<code>ControllerContext</code>物件,對於<code>RequestContext</code>簡易封裝.</li>
<li><code>ExecuteCore</code>呼叫<code>Hock</code>方法(<code>ExecuteCore</code>是一個抽象方法提供繼承他的物件實做,預設是<code>Controller</code>類別)</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Execute</span>(<span class="params">RequestContext requestContext</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (requestContext == <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="string">"requestContext"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (requestContext.HttpContext == <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(MvcResources.ControllerBase_CannotExecuteWithNullHttpContext, <span class="string">"requestContext"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    VerifyExecuteCalledOnce();</span><br><span class="line">    Initialize(requestContext);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">using</span> (ScopeStorage.CreateTransientScope())</span><br><span class="line">    &#123;</span><br><span class="line">        ExecuteCore();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> IController.Execute(RequestContext requestContext)</span><br><span class="line">&#123;</span><br><span class="line">    Execute(requestContext);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h2><p>在專案中<code>Controller</code>是我們預設使用繼承控制器類別，此類別中定義了很多的輔助方法和屬性讓撰寫控制器變得簡單。<br><code>Controller</code>類別除了直接繼承<code>ControllerBase</code>之外,<code>Controller</code>還顯式實現<code>IController</code>和<code>IAsyncController</code>介面，跟<code>ASP.NET MVC</code> 四大篩選器（<code>IAuthorizationFilter,IActionFilter、IResultFilter,IExceptionFilter</code>）的4個介面。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Controller</span> : </span><br><span class="line">	<span class="title">ControllerBase</span>, </span><br><span class="line">	<span class="title">IActionFilter</span>, </span><br><span class="line">	<span class="title">IAuthenticationFilter</span>, </span><br><span class="line">	<span class="title">IAuthorizationFilter</span>,</span><br><span class="line">	<span class="title">IDisposable</span>, </span><br><span class="line">	<span class="title">IExceptionFilter</span>,</span><br><span class="line">	<span class="title">IResultFilter</span>,</span><br><span class="line">	<span class="title">IAsyncController</span>, </span><br><span class="line">	<span class="title">IAsyncManagerContainer</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="ExecuteCore"><a href="#ExecuteCore" class="headerlink" title="ExecuteCore"></a>ExecuteCore</h3><p>在<code>Controller</code>重載實做<code>ExecuteCore</code>方法.</p>
<p>主要透過<code>GetActionName(RouteData)</code>取得執行的<code>Action</code>名稱,並透過<code>ActionInvoker</code>取得要Invoker的<code>ActionInvoker</code>.</p>
<ul>
<li><code>PossiblyLoadTempData</code>：建立載入<code>TempData</code></li>
<li><code>PossiblySaveTempData</code>：儲存<code>TempData</code>的資料</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">ExecuteCore</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// If code in this method needs to be updated, please also check the BeginExecuteCore() and</span></span><br><span class="line">    <span class="comment">// EndExecuteCore() methods of AsyncController to see if that code also must be updated.</span></span><br><span class="line">    PossiblyLoadTempData();</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">string</span> actionName = GetActionName(RouteData);</span><br><span class="line">        <span class="keyword">if</span> (!ActionInvoker.InvokeAction(ControllerContext, actionName))</span><br><span class="line">        &#123;</span><br><span class="line">            HandleUnknownAction(actionName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span></span><br><span class="line">    &#123;</span><br><span class="line">        PossiblySaveTempData();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="ControllerContext"><a href="#ControllerContext" class="headerlink" title="ControllerContext"></a>ControllerContext</h2><p>第一次初始話<code>ControllerContext</code>利用建構子</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ControllerContext</span>(<span class="params">RequestContext requestContext, ControllerBase controller</span>)</span></span><br></pre></td></tr></table></figure></div>
<p>在<code>ControllerBase.Initialize</code>方法對於<code>ControllerContext</code>初始化,這個上下文資料封裝了許多此次請求的資料.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Initialize</span>(<span class="params">RequestContext requestContext</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ControllerContext = <span class="keyword">new</span> ControllerContext(requestContext, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>後面對於繼承<code>ControllerContext</code>的<code>Context</code>傳入第一次初始化<code>ControllerContext</code>物件,<br>在建構子函數把傳入<code>ControllerContext</code>的<code>RequestContext</code>資料填入繼承<code>ControllerContext</code>物件中</p>
<p>下面是<strong>MVC</strong>有繼承<code>ControllerContext</code>類別</p>
<ul>
<li>AuthorizationContext</li>
<li>ExceptionContext</li>
<li>AuthenticationChallengeContext</li>
<li>ResultExecutedContext</li>
<li>ViewContext</li>
<li>ResultExecutingContext</li>
</ul>
<h3 id="ControllerContext-1"><a href="#ControllerContext-1" class="headerlink" title="ControllerContext"></a>ControllerContext</h3><p>在原始碼中可以看到<code>ControllerContext(ControllerContext controllerContext)</code>很巧妙把自身類別當作建構子方法參數傳入.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line">Controller = controllerContext.Controller;</span><br><span class="line">RequestContext = controllerContext.RequestContext;</span><br></pre></td></tr></table></figure></div>
<p>主要是要把<code>RequestContext</code>值給填充,之後就可以利用<code>RequestContext</code>取得理面一些資料.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ControllerContext</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">internal</span> <span class="keyword">const</span> <span class="keyword">string</span> ParentActionViewContextToken = <span class="string">"ParentActionViewContext"</span>;</span><br><span class="line">	<span class="keyword">private</span> HttpContextBase _httpContext;</span><br><span class="line">	<span class="keyword">private</span> RequestContext _requestContext;</span><br><span class="line">	<span class="keyword">private</span> RouteData _routeData;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// parameterless constructor used for mocking</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ControllerContext</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>	&#123;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="title">ControllerContext</span>(<span class="params">ControllerContext controllerContext</span>)</span></span><br><span class="line"><span class="function"></span>	&#123;</span><br><span class="line">		<span class="keyword">if</span> (controllerContext == <span class="literal">null</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="string">"controllerContext"</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		Controller = controllerContext.Controller;</span><br><span class="line">		RequestContext = controllerContext.RequestContext;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ControllerContext</span>(<span class="params">HttpContextBase httpContext, RouteData routeData, ControllerBase controller</span>)</span></span><br><span class="line"><span class="function">		: <span class="title">this</span>(<span class="params">new RequestContext(httpContext, routeData</span>), controller)</span></span><br><span class="line"><span class="function"></span>	&#123;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ControllerContext</span>(<span class="params">RequestContext requestContext, ControllerBase controller</span>)</span></span><br><span class="line"><span class="function"></span>	&#123;</span><br><span class="line">		<span class="keyword">if</span> (requestContext == <span class="literal">null</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="string">"requestContext"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (controller == <span class="literal">null</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="string">"controller"</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		RequestContext = requestContext;</span><br><span class="line">		Controller = controller;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="AuthorizationContext"><a href="#AuthorizationContext" class="headerlink" title="AuthorizationContext"></a>AuthorizationContext</h3><p>我們看一下<code>Authorization</code>filter用到的參數<code>AuthorizationContext</code>.</p>
<p>在<code>InvokeAuthorizationFilters</code>方法將<code>AuthorizationContext</code>初始化</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line">AuthorizationContext context = <span class="keyword">new</span> AuthorizationContext(controllerContext, actionDescriptor);</span><br></pre></td></tr></table></figure></div>
<p>其中傳入參數<code>controllerContext</code>是第一次透過<code>ControllerBase.Initialize</code>初始化<code>Context</code>.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AuthorizationContext</span> : <span class="title">ControllerContext</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// parameterless constructor used for mocking</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">AuthorizationContext</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>	&#123;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">AuthorizationContext</span>(<span class="params">ControllerContext controllerContext</span>)</span></span><br><span class="line"><span class="function">		: <span class="title">base</span>(<span class="params">controllerContext</span>)</span></span><br><span class="line"><span class="function"></span>	&#123;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">AuthorizationContext</span>(<span class="params">ControllerContext controllerContext, ActionDescriptor actionDescriptor</span>) : <span class="title">base</span>(<span class="params">controllerContext</span>)</span></span><br><span class="line"><span class="function"></span>	&#123;</span><br><span class="line">		<span class="keyword">if</span> (actionDescriptor == <span class="literal">null</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="string">"actionDescriptor"</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		ActionDescriptor = actionDescriptor;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">virtual</span> ActionDescriptor ActionDescriptor &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> ActionResult Result &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>之後再呼叫<code>base(controllerContext)</code>利用<code>ControllerContext</code>建構子把資料填充.</p>
<h2 id="小結："><a href="#小結：" class="headerlink" title="小結："></a>小結：</h2><p><code>Asp.net MVC</code>對於為了方便我們使用控制器所以對於<code>Controller</code>進行許多資料封裝,讓我們只要繼承<code>Controller</code>就可以方便使用許多屬性.</p>
<p>下圖是<code>Controller</code>核心類別關係圖.<code>Controller</code>類別左右兩側有本次沒介紹到類別(之後會介紹到)</p>
<p><img src="https://raw.githubusercontent.com/isdaniel/MyBlog/master/source/images/itHelp/12/controller_uml.png" alt="relationship_pic.PNG"></p>
<p>當我看到<code>ControllerContext</code>的設計時讓我驚艷的,因為他把<strong>MVC</strong>用到<code>Context</code>都關聯綁定到一個類別中.</p>
<p>因為在商業邏輯中會有許多<code>Model</code>類別,且這些類別資料存在一定的相關性,我覺得這個設計可以使用可以大大改善資料傳遞上的麻煩,讓程式寫起來更安全,簡單</p>
<p>之後我會把上面的<strong>UML</strong>圖慢慢畫出來,一步一步揭開<code>Asp.net MVC</code>面紗.</p>
<p><strong>此文作者</strong>：Daniel Shih(石頭)<br><strong>此文地址</strong>： <a href="https://isdaniel.github.io/ithelp-day12/">https://isdaniel.github.io/ithelp-day12/</a> <br><strong>版權聲明</strong>：本博客所有文章除特別聲明外，均採用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC90dy8=" title="https://creativecommons.org/licenses/by-nc-sa/3.0/tw/">CC BY-NC-SA 3.0 TW<i class="fa fa-external-link"></i></span> 許可協議。轉載請註明出處！</p>
]]></content>
      <categories>
        <category>11th鐵人賽</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>Asp.net</tag>
        <tag>Asp.net-MVC</tag>
        <tag>SourceCode</tag>
        <tag>11th鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>Asp.net MVC如何實現IOC解析器 (第13天)</title>
    <url>/ithelp-day13/</url>
    <content><![CDATA[<h1 id="Agenda"><a href="#Agenda" class="headerlink" title="Agenda"></a>Agenda<!-- omit in toc --></h1><ul>
<li><a href="#%e5%89%8d%e8%a8%80">前言</a></li>
<li><a href="#ioc%e4%bb%8b%e7%b4%b9">IOC介紹</a><ul>
<li><a href="#%e7%a8%8b%e5%bc%8f%e7%a2%bc%e4%bb%8b%e7%b4%b9ioc-by-autofac">程式碼介紹IOC by Autofac</a></li>
</ul>
</li>
<li><a href="#autofac-ioc%e5%ae%b9%e5%99%a8-%e5%92%8c-aspnet-mvc%e9%97%9c%e4%bf%82">AutoFac IOC容器 和 Asp.net mvc關係</a></li>
<li><a href="#dependencyresolver-%e6%8f%ad%e5%af%86">DependencyResolver 揭密</a></li>
<li><a href="#mvc-%e8%a3%a1idependencyresolver">MVC 裡IDependencyResolver</a></li>
<li><a href="#%e5%b0%8f%e7%b5%90">小結:</a></li>
</ul>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>IOC</code>依賴反轉是<code>oop</code>重要程式設計思想。</p>
<blockquote>
<p><code>Ioc—Inversion of Control</code> 控制反轉</p>
</blockquote>
<p>控制反轉是一個設計思想 ，把對於某個物件的控制權移轉給第三方容器.</p>
<p>詳細資訊可以查看小弟另一篇文章 <a href="https://isdaniel.github.io/ioc-di">IOC(控制反轉)，DI(依賴注入) 深入淺出~~</a></p>
<blockquote>
<p>有沒有人會很好奇說為什麼只需要透過<code>DependencyResolver.SetResolver</code>方法我就可以直接使用<code>AutoFac</code>或其他IOC容器?</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//....</span></span><br><span class="line"><span class="comment">// 建立相依解析器</span></span><br><span class="line">IContainer container = <span class="keyword">new</span> builder.Build();</span><br><span class="line">DependencyResolver.SetResolver(container);</span><br></pre></td></tr></table></figure></div>
<p>今天跟大家分享<code>Asp.net MVC</code>利用什麼設計技巧,讓外部<code>IOC</code>容器可以很方便融入系統中.</p>
<blockquote>
<p>我有做一個可以針對於<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2lzZGFuaWVsL0FzcC5uZXQtTVZDLURlYnVnZXI=" title="https://github.com/isdaniel/Asp.net-MVC-Debuger">Asp.net MVC Debugger<i class="fa fa-external-link"></i></span>的專案，只要下中斷點就可輕易進入Asp.net MVC原始碼.</p>
</blockquote>
<h2 id="IOC介紹"><a href="#IOC介紹" class="headerlink" title="IOC介紹"></a>IOC介紹</h2><blockquote>
<p>控制反轉是一個設計思想，把對於某個物件<strong>建立,生命週期</strong>控制權移轉給第三方統一管理<br>在設計模組時建議依賴抽象，因為各個模組間不需要知道對方太多細節（實作），知道越多耦合越強。</p>
</blockquote>
<p><code>A</code>物件內部有使用到<code>B</code>物件 <code>A</code>,<code>B</code>物件中有依賴的成份<br>控制反轉是把原本<code>A</code>對<code>B</code>控制權移交給第三方容器。<br>降低<code>A</code>對<code>B</code>物件的耦合性，讓雙方都倚賴第三方容器。</p>
<p>上面說明太抽象嗎? 可以看一下下面這張圖.</p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/九桃/493ce9d9-64bd-4343-a145-16ab21f3c695/1555312814_72597.png" alt="img"></p>
<blockquote>
<p>最後對於使用者來說,我只需要認識這個第三方容器並跟這個容器取得我要A物件,至於A物件和其他物件關係使用者不用瞭解</p>
</blockquote>
<p>IOC容器框架有很多種但基本上都有下面兩個功能</p>
<ol>
<li>掌控物件生命週期</li>
<li>設定物件關係的註冊表(取用時會依照此註冊關係建立物件並自動注入相依物件)</li>
</ol>
<h3 id="程式碼介紹IOC-by-Autofac"><a href="#程式碼介紹IOC-by-Autofac" class="headerlink" title="程式碼介紹IOC by Autofac"></a>程式碼介紹IOC by Autofac</h3><p>我們依照此圖做一個簡單範例<strong>by Autofac</strong></p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/九桃/493ce9d9-64bd-4343-a145-16ab21f3c695/1555312814_72597.png" alt="img"></p>
<p><code>A</code>物件會直接引用於<code>B</code>和<code>C</code>物件這導致<code>A</code><strong>掌控</strong><code>B</code>和<code>C</code>物件創建和銷毀</p>
<p>如下面程式碼,A物件需要掌控<code>B</code>和<code>C</code>生命週期和物件建立.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">A</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> B BObject &#123;<span class="keyword">get</span>;<span class="keyword">set</span>;&#125; =  <span class="keyword">new</span> B();</span><br><span class="line">    <span class="keyword">public</span> C CObject &#123;<span class="keyword">get</span>;<span class="keyword">set</span>;&#125; =  <span class="keyword">new</span> C();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>如果透過<code>IOC</code>容器我們就不用擔心物件如何建立和他所依賴<code>B</code>和<code>C</code>物件,因為我們會在容器註表中指定他的關係,使用時只需要關注如何使用此物件.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">A</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> B BObject &#123;<span class="keyword">get</span>;<span class="keyword">private</span> <span class="keyword">set</span>;&#125;</span><br><span class="line">    <span class="keyword">public</span> C CObject &#123;<span class="keyword">get</span>;<span class="keyword">private</span> <span class="keyword">set</span>;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">A</span>(<span class="params">B b,C c</span>)</span>&#123;</span><br><span class="line">		BObject = b;</span><br><span class="line">		CObject = c;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//autofac property injection</span></span><br><span class="line">ContainerBuilder builder = <span class="keyword">new</span> ContainerBuilder();</span><br><span class="line">builder.RegisterType&lt;B&gt;();</span><br><span class="line">builder.RegisterType&lt;C&gt;();</span><br><span class="line">builder.RegisterType&lt;A&gt;().PropertiesAutowired();</span><br><span class="line">IContainer container = builder.Build();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = container.Resolve&lt;A&gt;();</span><br></pre></td></tr></table></figure></div>
<p>這個程式碼是利用<code>Autofac</code>框架，比起上面多了一段註冊程式碼.主要告訴容器物件之間關係和如何掌控物件生命週期.</p>
<p>上面例子最後只需要利用<code>container.Resolve&lt;T&gt;</code>方法就可以跟容器來取想要的物件,至於引用的物件是如何注入或關係我們就不必關心.</p>
<h2 id="AutoFac-IOC容器-和-Asp-net-mvc關係"><a href="#AutoFac-IOC容器-和-Asp-net-mvc關係" class="headerlink" title="AutoFac IOC容器 和 Asp.net mvc關係"></a>AutoFac IOC容器 和 Asp.net mvc關係</h2><p>如果<code>Asp.net</code>沒有搭配<strong>IOC容器</strong>(預設使用<code>DefaultResolver</code>)<code>Asp.net MVC</code>對於使用物件必須寫死在<code>Controller</code>類別中</p>
<blockquote>
<p>無法使用建構子或屬性來決定使用哪個物件</p>
</blockquote>
<p>如下面程式碼</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">HomeController</span> : <span class="title">Controller</span></span><br><span class="line">&#123;</span><br><span class="line">    IUserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HomeController</span>(<span class="params">IUserService userService</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(userService == <span class="literal">null</span>)</span><br><span class="line">			userService = <span class="keyword">new</span> UserService();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ActionResult <span class="title">Index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> View();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//....</span></span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>如果在建構子使用參數會丟錯誤,在<span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDIxOTAyMA==" title="https://ithelp.ithome.com.tw/articles/10219020">[Day11] Asp.net MVC Controller是怎麼被建立<i class="fa fa-external-link"></i></span>談到建立<code>Controller</code>物件透過<code>DefaultControllerActivator</code>預設使用反射建立<code>Controller</code>物件呼叫無參數的建構子方法.</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/isdaniel/MyBlog/master/source/images/itHelp/13/Controller_Parameter.gif" alt="relationship_pic.PNG"></p>
<blockquote>
<p>因為<code>Asp.net MVC</code>建立<code>Controller</code>是透過<code>Activator.CreateInstance</code>方法，</p>
</blockquote>
<p>如果我們想在建構子傳入參數或是想要統一管理注入的物件，就可以使用<code>IOC</code>容器來幫我完成</p>
<hr>
<blockquote>
<p>為什麼<code>Asp.net MVC</code>使用<code>DependencyResolver.SetResolver</code>方法替換成<code>IOC</code>容器就可輕易替換使用容器?</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//....</span></span><br><span class="line"><span class="comment">// 建立相依解析器</span></span><br><span class="line">IContainer container = <span class="keyword">new</span> builder.Build();</span><br><span class="line">DependencyResolver.SetResolver(container);</span><br></pre></td></tr></table></figure></div>
<h2 id="DependencyResolver-揭密"><a href="#DependencyResolver-揭密" class="headerlink" title="DependencyResolver 揭密"></a>DependencyResolver 揭密</h2><p><code>DependencyResolver.SetResolver</code>提供一個替換<code>_current</code>欄位的機制</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 可將第三方IOC容器設置</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="resolver"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SetResolver</span>(<span class="params">IDependencyResolver resolver</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    _instance.InnerSetResolver(resolver);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SetResolver</span>(<span class="params"><span class="keyword">object</span> commonServiceLocator</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    _instance.InnerSetResolver(commonServiceLocator);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">InnerSetResolver</span>(<span class="params">IDependencyResolver resolver</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (resolver == <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="string">"resolver"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    _current = resolver;</span><br><span class="line">    _currentCache = <span class="keyword">new</span> CacheDependencyResolver(_current);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><code>Asp.net MVC</code> 提供一個介面 <code>IDependencyResolver</code> 讓第三方容器實現並擴充.<br><code>IDependencyResolver</code>介面有兩個方法</p>
<ol>
<li><code>GetService</code>返回一個物件</li>
<li><code>GetServices</code>返回一個物件集合</li>
</ol>
<p>主要透過這<code>GetService</code>方法取得使用<code>Controller</code>物件</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IDependencyResolver</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">object</span> <span class="title">GetService</span>(<span class="params">Type serviceType</span>)</span>;</span><br><span class="line">    <span class="function">IEnumerable&lt;<span class="keyword">object</span>&gt; <span class="title">GetServices</span>(<span class="params">Type serviceType</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="MVC-裡IDependencyResolver"><a href="#MVC-裡IDependencyResolver" class="headerlink" title="MVC 裡IDependencyResolver"></a>MVC 裡IDependencyResolver</h2><p><code>Asp.net MVC</code>依賴<code>DependencyResolver.Current</code>來幫我們建立一個<code>Controller</code>物件</p>
<p>這邊介紹一下在<code>MVC</code>中三個<code>IDependencyResolver</code>解析器</p>
<ol>
<li><code>CacheDependencyResolver</code> 快取解析器(利用<code>ConcurrentDictionary</code>是一個多執行緒安全的字典)</li>
<li><code>DefaultDependencyResolver</code>預設使用解析器(利用反射建立物件)</li>
<li><code>DelegateBasedDependencyResolver</code>委派解析器.</li>
</ol>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line">prprivate <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">CacheDependencyResolver</span> : <span class="title">IDependencyResolver</span></span><br><span class="line">&#123; </span><br><span class="line">	<span class="comment">//ConcurrentDictionary 是一個多執行緒 安全的Dictionary</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">readonly</span> ConcurrentDictionary&lt;Type, <span class="keyword">object</span>&gt; _cache = <span class="keyword">new</span> ConcurrentDictionary&lt;Type, <span class="keyword">object</span>&gt;();</span><br><span class="line">   </span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">readonly</span> ConcurrentDictionary&lt;Type, IEnumerable&lt;<span class="keyword">object</span>&gt;&gt; _cacheMultiple = <span class="keyword">new</span> ConcurrentDictionary&lt;Type, IEnumerable&lt;<span class="keyword">object</span>&gt;&gt;();</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">readonly</span> Func&lt;Type, <span class="keyword">object</span>&gt; _getServiceDelegate;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">readonly</span> Func&lt;Type, IEnumerable&lt;<span class="keyword">object</span>&gt;&gt; _getServicesDelegate;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">readonly</span> IDependencyResolver _resolver;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">CacheDependencyResolver</span>(<span class="params">IDependencyResolver resolver</span>)</span></span><br><span class="line"><span class="function"></span>	&#123;</span><br><span class="line">		_resolver = resolver;</span><br><span class="line">		_getServiceDelegate = _resolver.GetService;</span><br><span class="line">		_getServicesDelegate = _resolver.GetServices;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">object</span> <span class="title">GetService</span>(<span class="params">Type serviceType</span>)</span></span><br><span class="line"><span class="function"></span>	&#123;</span><br><span class="line">		<span class="keyword">return</span> _cache.GetOrAdd(serviceType, _getServiceDelegate);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> IEnumerable&lt;<span class="keyword">object</span>&gt; <span class="title">GetServices</span>(<span class="params">Type serviceType</span>)</span></span><br><span class="line"><span class="function"></span>	&#123;</span><br><span class="line">		<span class="keyword">return</span> _cacheMultiple.GetOrAdd(serviceType, _getServicesDelegate);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title">DefaultDependencyResolver</span> : <span class="title">IDependencyResolver</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">object</span> <span class="title">GetService</span>(<span class="params">Type serviceType</span>)</span></span><br><span class="line"><span class="function"></span>	&#123;</span><br><span class="line">		<span class="comment">// Since attempting to create an instance of an interface or an abstract type results in an exception, immediately return null</span></span><br><span class="line">		<span class="comment">// to improve performance and the debugging experience with first-chance exceptions enabled.</span></span><br><span class="line">		<span class="keyword">if</span> (serviceType.IsInterface || serviceType.IsAbstract)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">try</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> Activator.CreateInstance(serviceType);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> IEnumerable&lt;<span class="keyword">object</span>&gt; <span class="title">GetServices</span>(<span class="params">Type serviceType</span>)</span></span><br><span class="line"><span class="function"></span>	&#123;</span><br><span class="line">		<span class="keyword">return</span> Enumerable.Empty&lt;<span class="keyword">object</span>&gt;();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>建立<code>Controller</code>預設使用<code>DefaultDependencyResolver</code>這個解析器</p>
<p>第三方<code>IOC</code>容器利用<code>DependencyResolver.SetResolver</code>方法把<code>DefaultDependencyResolver</code>替換掉使用他們自己實現的解析器提供物件</p>
<p>不是透過<code>DefaultDependencyResolver</code>反射來建立物件喔~</p>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結:"></a>小結:</h2><p>我們了解為什麼<code>Asp.net MVC</code>可透過<code>DependencyResolver.SetResolver</code>替換成<code>IOC</code>容器注入控制器物件.</p>
<p>如果要建立客製化的解析器可以實現<code>IDependencyResolver</code>介面並使用<code>DependencyResolver.SetResolver</code>替換<code>DefaultDependencyResolver</code>預設解析器</p>
<p><code>DependencyResolver</code>,<code>Controller</code>和<code>ControllerFactory</code>的關係如下圖</p>
<p><img src="https://raw.githubusercontent.com/isdaniel/MyBlog/master/source/images/itHelp/13/IOC_Asp.netMVC.png" alt="IOC_Asp.netMVC.png"></p>
<p>下篇會介紹<code>DependencyResolver</code>在<code>Asp.net MVC</code>中有哪些實際的應用.</p>
<p><strong>此文作者</strong>：Daniel Shih(石頭)<br><strong>此文地址</strong>： <a href="https://isdaniel.github.io/ithelp-day13/">https://isdaniel.github.io/ithelp-day13/</a> <br><strong>版權聲明</strong>：本博客所有文章除特別聲明外，均採用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC90dy8=" title="https://creativecommons.org/licenses/by-nc-sa/3.0/tw/">CC BY-NC-SA 3.0 TW<i class="fa fa-external-link"></i></span> 許可協議。轉載請註明出處！</p>
]]></content>
      <categories>
        <category>11th鐵人賽</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>Asp.net</tag>
        <tag>Asp.net-MVC</tag>
        <tag>SourceCode</tag>
        <tag>11th鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>反轉起來~透過IOC解析來執行依賴反轉 (第14天)</title>
    <url>/ithelp-day14/</url>
    <content><![CDATA[<h1 id="Agenda"><a href="#Agenda" class="headerlink" title="Agenda"></a>Agenda<!-- omit in toc --></h1><ul>
<li><a href="#%e5%89%8d%e8%a8%80">前言</a></li>
<li><a href="#defaultcontrolleractivator">DefaultControllerActivator</a></li>
<li><a href="#buildmanagerviewengine">BuildManagerViewEngine</a></li>
<li><a href="#filterprovidercollection">FilterProviderCollection</a></li>
<li><a href="#autofac%e5%b0%8d%e6%96%bcmvc%e6%93%b4%e5%85%85%e8%a7%a3%e6%9e%90%e5%99%a8autofacdependencyresolver">Autofac對於MVC擴充解析器AutofacDependencyResolver</a></li>
<li><a href="#%e5%b0%8f%e7%b5%90">小結：</a></li>
</ul>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前一篇介紹<code>Asp.net MVC</code>可透過<code>DependencyResolver.SetResolver</code>替換成<code>IOC</code>容器注入控制器物件.</p>
<p>要建立客製化的解析器可以實現<code>IDependencyResolver</code>介面並使用<code>DependencyResolver.SetResolver</code>替換<code>DefaultDependencyResolver</code>預設解析器</p>
<p><code>DependencyResolver</code>,<code>Controller</code>和<code>ControllerFactory</code>的關係如下圖</p>
<p><img src="https://raw.githubusercontent.com/isdaniel/MyBlog/master/source/images/itHelp/13/IOC_Asp.netMVC.png" alt="IOC_Asp.netMVC.png"></p>
<p>本篇介紹<code>DependencyResolver</code>在<code>Asp.net MVC</code>中有哪些實際的應用.</p>
<blockquote>
<p>我有做一個可以針對於<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2lzZGFuaWVsL0FzcC5uZXQtTVZDLURlYnVnZXI=" title="https://github.com/isdaniel/Asp.net-MVC-Debuger">Asp.net MVC Debugger<i class="fa fa-external-link"></i></span>的專案，只要下中斷點就可輕易進入Asp.net MVC原始碼.</p>
</blockquote>
<h2 id="DefaultControllerActivator"><a href="#DefaultControllerActivator" class="headerlink" title="DefaultControllerActivator"></a>DefaultControllerActivator</h2><p>在<code>DefaultControllerFactory</code>建構子建立<code>DefaultControllerActivator</code>,而<code>DefaultControllerActivator</code>有一個<code>Create</code>方法使用他來建立<code>Controller</code>物件.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">internal</span> <span class="title">DefaultControllerFactory</span>(<span class="params">IControllerActivator controllerActivator, IResolver&lt;IControllerActivator&gt; activatorResolver, IDependencyResolver dependencyResolver</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (controllerActivator != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        _controllerActivator = controllerActivator;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        _activatorResolver = activatorResolver ?? <span class="keyword">new</span> SingleServiceResolver&lt;IControllerActivator&gt;(</span><br><span class="line">                                                        () =&gt; <span class="literal">null</span>,</span><br><span class="line">                                                        <span class="keyword">new</span> DefaultControllerActivator(dependencyResolver),</span><br><span class="line">                                                        <span class="string">"DefaultControllerFactory constructor"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>如果我們沒透過<code>DependencyResolver.SetResolver</code>方法設定其他解析器,預設使用<code>DefaultControllerActivator</code>類別幫助我們建立<code>Controller</code>物件透過<code>Create</code>方法.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title">DefaultControllerActivator</span> : <span class="title">IControllerActivator</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> Func&lt;IDependencyResolver&gt; _resolverThunk;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DefaultControllerActivator</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        : <span class="title">this</span>(<span class="params"><span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DefaultControllerActivator</span>(<span class="params">IDependencyResolver resolver</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (resolver == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            _resolverThunk = () =&gt; DependencyResolver.Current;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            _resolverThunk = () =&gt; resolver;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IController <span class="title">Create</span>(<span class="params">RequestContext requestContext, Type controllerType</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> (IController)(_resolverThunk().GetService(controllerType) ?? Activator.CreateInstance(controllerType));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(</span><br><span class="line">                String.Format(</span><br><span class="line">                    CultureInfo.CurrentCulture,</span><br><span class="line">                    MvcResources.DefaultControllerFactory_ErrorCreatingController,</span><br><span class="line">                    controllerType),</span><br><span class="line">                ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>因為<code>DependencyResolver.Current</code>建構子傳入參數<code>IDependencyResolver resolver</code>一般是<code>NULL</code>，所以會使用<code>DependencyResolver.Current</code>解析器.</p>
<p><code>Create</code>方法預設利用<code>DefaultDependencyResolver.GetService</code>創建物件(使用<code>Activator.CreateInstance()</code>)</p>
<h2 id="BuildManagerViewEngine"><a href="#BuildManagerViewEngine" class="headerlink" title="BuildManagerViewEngine"></a>BuildManagerViewEngine</h2><p><code>BuildManagerViewEngine</code>類別的詳細介紹會在之後的<code>View</code>如何產生有更細節的資訊.</p>
<p>這邊是提一下哪邊有用到<code>IDependencyResolver</code>解析器.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">DefaultViewPageActivator</span> : <span class="title">IViewPageActivator</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> Func&lt;IDependencyResolver&gt; _resolverThunk;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DefaultViewPageActivator</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        : <span class="title">this</span>(<span class="params"><span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DefaultViewPageActivator</span>(<span class="params">IDependencyResolver resolver</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (resolver == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            _resolverThunk = () =&gt; DependencyResolver.Current;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            _resolverThunk = () =&gt; resolver;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">object</span> <span class="title">Create</span>(<span class="params">ControllerContext controllerContext, Type type</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> _resolverThunk().GetService(type) ?? Activator.CreateInstance(type);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (MissingMethodException exception)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// Ensure thrown exception contains the type name.  Might be down a few levels.</span></span><br><span class="line">            MissingMethodException replacementException =</span><br><span class="line">                TypeHelpers.EnsureDebuggableException(exception, type.FullName);</span><br><span class="line">            <span class="keyword">if</span> (replacementException != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">throw</span> replacementException;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">throw</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>一樣可以看到有一個<code>Create</code>方法.透過跟<code>DefaultControllerActivator</code>一樣的操作來使用<code>IDependencyResolver</code>解析器</p>
<p>預設使用<code>DependencyResolver.Current</code></p>
<h2 id="FilterProviderCollection"><a href="#FilterProviderCollection" class="headerlink" title="FilterProviderCollection"></a>FilterProviderCollection</h2><p>可以透過<code>IOC</code>容器注入客製化<code>ProvideFilter</code>使用行為.</p>
<p>預設<code>ProvideFilter</code>有三個(詳細資訊會在之後分享)</p>
<ul>
<li><code>GlobalFilterCollection</code>(在Global擴充)</li>
<li><code>ControllerInstanceFilterProvider</code>(<code>Controller</code>自行<code>Override</code>)</li>
<li><code>FilterAttributeFilterProvider</code>(提供<code>Attribute</code>註冊最常用)</li>
</ul>
<p><span class="exturl" data-url="aHR0cDovL2h3eWZ3ay5jb20vYmxvZy8yMDEzLzEwLzA2L212Yy1maWx0ZXJzLXdpdGgtZGVwZW5kZW5jeS1pbmplY3Rpb24v" title="http://hwyfwk.com/blog/2013/10/06/mvc-filters-with-dependency-injection/">MVC Filters With Dependency Injection<i class="fa fa-external-link"></i></span>文章有介紹如何使用</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">internal</span> IFilterProvider[] CombinedItems</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">get</span></span><br><span class="line">    &#123;</span><br><span class="line">        IFilterProvider[] combinedItems = _combinedItems;</span><br><span class="line">        <span class="keyword">if</span> (combinedItems == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            combinedItems = MultiServiceResolver.GetCombined&lt;IFilterProvider&gt;(Items, _dependencyResolver);</span><br><span class="line">            _combinedItems = combinedItems;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> combinedItems;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="Autofac對於MVC擴充解析器AutofacDependencyResolver"><a href="#Autofac對於MVC擴充解析器AutofacDependencyResolver" class="headerlink" title="Autofac對於MVC擴充解析器AutofacDependencyResolver"></a>Autofac對於MVC擴充解析器AutofacDependencyResolver</h2><p>上面有說如果要改變<strong>MVC</strong>使用解析器可以透過<code>DependencyResolver.SetResolver</code>方法傳入一個<code>IDependencyResolver</code>物件,Autofac對於使的是<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2F1dG9mYWMvQXV0b2ZhYy5NdmMvYmxvYi9kZXZlbG9wL3NyYy9BdXRvZmFjLkludGVncmF0aW9uLk12Yy9BdXRvZmFjRGVwZW5kZW5jeVJlc29sdmVyLmNz" title="https://github.com/autofac/Autofac.Mvc/blob/develop/src/Autofac.Integration.Mvc/AutofacDependencyResolver.cs">AutofacDependencyResolver 原始碼<i class="fa fa-external-link"></i></span>.</p>
<p>替換完成後MVC就會使用<code>AutofacDependencyResolver.GetService</code>取得物件.</p>
<p>這裡就不多敘述<strong>Autofac</strong>內部完成細節.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AutofacDependencyResolver</span> : <span class="title">IDependencyResolver</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Func&lt;AutofacDependencyResolver&gt; _resolverAccessor = DefaultResolverAccessor;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> Action&lt;ContainerBuilder&gt; _configurationAction;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> ILifetimeScope _container;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ILifetimeScopeProvider _lifetimeScopeProvider;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AutofacDependencyResolver</span>(<span class="params">ILifetimeScope container</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (container == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="keyword">nameof</span>(container));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>._container = container;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AutofacDependencyResolver</span>(<span class="params">ILifetimeScope container, Action&lt;ContainerBuilder&gt; configurationAction</span>)</span></span><br><span class="line"><span class="function">        : <span class="title">this</span>(<span class="params">container</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (configurationAction == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="keyword">nameof</span>(configurationAction));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>._configurationAction = configurationAction;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AutofacDependencyResolver</span>(<span class="params">ILifetimeScope container, ILifetimeScopeProvider lifetimeScopeProvider</span>) :</span></span><br><span class="line"><span class="function">        <span class="title">this</span>(<span class="params">container</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (lifetimeScopeProvider == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="keyword">nameof</span>(lifetimeScopeProvider));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>._lifetimeScopeProvider = lifetimeScopeProvider;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AutofacDependencyResolver</span>(<span class="params">ILifetimeScope container, ILifetimeScopeProvider lifetimeScopeProvider, Action&lt;ContainerBuilder&gt; configurationAction</span>)</span></span><br><span class="line"><span class="function">        : <span class="title">this</span>(<span class="params">container, lifetimeScopeProvider</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (configurationAction == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="keyword">nameof</span>(configurationAction));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>._configurationAction = configurationAction;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Gets the Autofac implementation of the dependency resolver.</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> AutofacDependencyResolver Current</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> _resolverAccessor();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ILifetimeScope ApplicationContainer</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> <span class="keyword">this</span>._container; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ILifetimeScope RequestLifetimeScope</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>._lifetimeScopeProvider == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">this</span>._lifetimeScopeProvider = <span class="keyword">new</span> RequestLifetimeScopeProvider(<span class="keyword">this</span>._container);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>._lifetimeScopeProvider.GetLifetimeScope(<span class="keyword">this</span>._configurationAction);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SetAutofacDependencyResolverAccessor</span>(<span class="params">Func&lt;AutofacDependencyResolver&gt; accessor</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (accessor == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            _resolverAccessor = DefaultResolverAccessor;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            _resolverAccessor = accessor;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">object</span> <span class="title">GetService</span>(<span class="params">Type serviceType</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.RequestLifetimeScope.ResolveOptional(serviceType);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> IEnumerable&lt;<span class="keyword">object</span>&gt; <span class="title">GetServices</span>(<span class="params">Type serviceType</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">var</span> enumerableServiceType = <span class="keyword">typeof</span>(IEnumerable&lt;&gt;).MakeGenericType(serviceType);</span><br><span class="line">        <span class="keyword">var</span> instance = <span class="keyword">this</span>.RequestLifetimeScope.Resolve(enumerableServiceType);</span><br><span class="line">        <span class="keyword">return</span> (IEnumerable&lt;<span class="keyword">object</span>&gt;)instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> AutofacDependencyResolver <span class="title">DefaultResolverAccessor</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">var</span> currentResolver = DependencyResolver.Current;</span><br><span class="line">        <span class="keyword">var</span> autofacResolver = currentResolver <span class="keyword">as</span> AutofacDependencyResolver;</span><br><span class="line">        <span class="keyword">if</span> (autofacResolver != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> autofacResolver;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> targetType = currentResolver.GetType().GetField(<span class="string">"__target"</span>);</span><br><span class="line">        <span class="keyword">if</span> (targetType != <span class="literal">null</span> &amp;&amp; targetType.FieldType == <span class="keyword">typeof</span>(AutofacDependencyResolver))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> (AutofacDependencyResolver)targetType.GetValue(currentResolver);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="keyword">string</span>.Format(</span><br><span class="line">            CultureInfo.CurrentCulture,</span><br><span class="line">            AutofacDependencyResolverResources.AutofacDependencyResolverNotFound,</span><br><span class="line">                currentResolver.GetType().FullName, <span class="keyword">typeof</span>(AutofacDependencyResolver).FullName));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="小結："><a href="#小結：" class="headerlink" title="小結："></a>小結：</h2><p>本篇挑了幾個有使用到<code>DependencyResolver</code>的使用點</p>
<p>在<code>DefaultControllerActivator</code>建立Controller會利用當前使用的解析器來幫我們達成(預設<code>DefaultDependencyResolver</code>)</p>
<p>如果我們不想要使用預設解析器也可自行替換自己的解析器(像Autofac第三方容器)來控制我們自己如何產生物件.</p>
<p>能看到<code>Asp.net MVC</code>在設計上運用許多小巧思可讓系統可以更好的擴充且不用到到原本的程式碼</p>
<p>這些設計技巧很值得我們還學習效法.</p>
<p><strong>此文作者</strong>：Daniel Shih(石頭)<br><strong>此文地址</strong>： <a href="https://isdaniel.github.io/ithelp-day14/">https://isdaniel.github.io/ithelp-day14/</a> <br><strong>版權聲明</strong>：本博客所有文章除特別聲明外，均採用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC90dy8=" title="https://creativecommons.org/licenses/by-nc-sa/3.0/tw/">CC BY-NC-SA 3.0 TW<i class="fa fa-external-link"></i></span> 許可協議。轉載請註明出處！</p>
]]></content>
      <categories>
        <category>11th鐵人賽</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>Asp.net</tag>
        <tag>Asp.net-MVC</tag>
        <tag>SourceCode</tag>
        <tag>11th鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>Action方法如何被執行InvokeAction(一) (第15天)</title>
    <url>/ithelp-day15/</url>
    <content><![CDATA[<h1 id="Agenda"><a href="#Agenda" class="headerlink" title="Agenda"></a>Agenda<!-- omit in toc --></h1><ul>
<li><a href="#%e5%89%8d%e8%a8%80">前言</a></li>
<li><a href="#invokeaction%e6%96%b9%e6%b3%95">InvokeAction方法</a></li>
<li><a href="#%e5%9c%a8controller%e9%a1%9e%e5%88%a5%e4%b8%ad-%e9%87%8d%e8%a6%81%e6%96%b9%e6%b3%95executecore">在Controller類別中 重要方法ExecuteCore()</a></li>
<li><a href="#%e5%8f%96%e5%be%97%e5%9f%b7%e8%a1%8c%e7%9a%84actioninvokerasynccontrolleractioninvoker">取得執行的ActionInvoker(AsyncControllerActionInvoker)</a></li>
<li><a href="#controlleractioninvoker%e5%91%bc%e5%8f%abinvokeaction%e6%96%b9%e6%b3%95">ControllerActionInvoker呼叫InvokeAction方法</a><ul>
<li><a href="#%e5%8f%96%e5%be%97-controllerdescriptor--actiondescriptor">取得 ControllerDescriptor &amp; ActionDescriptor</a></li>
</ul>
</li>
<li><a href="#aspnet-aop%e6%a9%9f%e5%88%b6%e6%8f%ad%e5%af%86filter">Asp.net AOP機制揭密(Filter)</a><ul>
<li><a href="#%e9%a0%90%e8%a8%ad%e4%bd%bf%e7%94%a8filterprovidersfilterprovidercollection">預設使用FilterProviders(FilterProviderCollection)</a></li>
<li><a href="#filterattributefilterprovider%e5%8f%96%e5%be%97%e6%a8%99%e7%b1%a4%e7%9a%84filter">FilterAttributeFilterProvider(取得標籤的Filter)</a></li>
</ul>
</li>
<li><a href="#filterprovidercollection%e7%9a%84getfilters%e6%96%b9%e6%b3%95%e9%a1%8d%e5%a4%96%e8%a8%bb%e5%86%8a%e9%81%8e%e6%bf%be%e5%99%a8">FilterProviderCollection的GetFilters方法(額外註冊過濾器)</a></li>
<li><a href="#%e5%b0%8f%e7%b5%90">小結</a></li>
</ul>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前面介紹完 <strong>Asp.net MVC</strong>解析器和IOC容器之間關係</p>
<p>本篇要介紹<code>Controller</code>如何去呼叫使用的<code>Action</code>方法.</p>
<p><code>ExecuteCore</code>是<code>ControllerBase</code>類別提供給<code>Controller</code>來實作Hook方法.</p>
<blockquote>
<p>我有做一個可以針對於<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2lzZGFuaWVsL0FzcC5uZXQtTVZDLURlYnVnZXI=" title="https://github.com/isdaniel/Asp.net-MVC-Debuger">Asp.net MVC Debugger<i class="fa fa-external-link"></i></span>的專案，只要下中斷點就可輕易進入Asp.net MVC原始碼.</p>
</blockquote>
<h2 id="InvokeAction方法"><a href="#InvokeAction方法" class="headerlink" title="InvokeAction方法"></a>InvokeAction方法</h2><p>之前說到<strong>MVC</strong>呼叫<code>ControllerBase.Execute</code>方法,其中這個方法做了幾件事情</p>
<ol>
<li><code>VerifyExecuteCalledOnce</code>方法對於同步請求做一個防呆機制(不允許同一時間處理相同請求)</li>
<li><code>Initialize</code>初始化資料</li>
<li>呼叫<code>ExecuteCore</code>抽象方法(由<code>Controller</code>實現)</li>
</ol>
<p>在<code>ControllerBase</code>會<code>InvokeAction</code>來執行並叫<code>Action</code>方法.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">ControllerBase</span> : <span class="title">IController</span>&#123;</span><br><span class="line">    <span class="comment">//....</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Execute</span>(<span class="params">RequestContext requestContext</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (requestContext == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="string">"requestContext"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (requestContext.HttpContext == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(MvcResources.ControllerBase_CannotExecuteWithNullHttpContext, <span class="string">"requestContext"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        VerifyExecuteCalledOnce();</span><br><span class="line">        Initialize(requestContext);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">using</span> (ScopeStorage.CreateTransientScope())</span><br><span class="line">        &#123;</span><br><span class="line">            ExecuteCore();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="在Controller類別中-重要方法ExecuteCore"><a href="#在Controller類別中-重要方法ExecuteCore" class="headerlink" title="在Controller類別中 重要方法ExecuteCore()"></a>在Controller類別中 重要方法ExecuteCore()</h2><p>在上面有說到<code>ExecuteCore</code>抽象方法由<code>Controller</code>來實現</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">ExecuteCore</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    PossiblyLoadTempData();</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">string</span> actionName = GetActionName(RouteData);</span><br><span class="line">        <span class="keyword">if</span> (!ActionInvoker.InvokeAction(ControllerContext, actionName))</span><br><span class="line">        &#123;</span><br><span class="line">            HandleUnknownAction(actionName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span></span><br><span class="line">    &#123;</span><br><span class="line">        PossiblySaveTempData();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>這個方法會呼叫<code>GetActionName</code>透過<code>Route</code>規則解析<code>Action</code>名稱,在呼叫<code>ActionInvoker</code>的<code>InvokeAction</code>方法判斷呼叫<code>Action</code>方法是否呼叫成功.</p>
<h2 id="取得執行的ActionInvoker-AsyncControllerActionInvoker"><a href="#取得執行的ActionInvoker-AsyncControllerActionInvoker" class="headerlink" title="取得執行的ActionInvoker(AsyncControllerActionInvoker)"></a>取得執行的ActionInvoker(AsyncControllerActionInvoker)</h2><p><code>ActionInvoker</code>是一個在<code>Controller</code>屬性,一開始先判斷<code>_actionInvoker</code>是否為<code>null</code>如果是就會建立一個<code>IActionInvoker</code>物件.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> IActionInvoker ActionInvoker</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">get</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (_actionInvoker == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            _actionInvoker = CreateActionInvoker();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> _actionInvoker;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">set</span> &#123; _actionInvoker = <span class="keyword">value</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>讓我們來看看<code>CreateActionInvoker</code>方法如何建立<code>IActionInvoker</code>物件吧!</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">virtual</span> IActionInvoker <span class="title">CreateActionInvoker</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    IAsyncActionInvokerFactory asyncActionInvokerFactory = Resolver.GetService&lt;IAsyncActionInvokerFactory&gt;();</span><br><span class="line">    <span class="keyword">if</span> (asyncActionInvokerFactory != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> asyncActionInvokerFactory.CreateInstance();</span><br><span class="line">    &#125;</span><br><span class="line">    IActionInvokerFactory actionInvokerFactory = Resolver.GetService&lt;IActionInvokerFactory&gt;();</span><br><span class="line">    <span class="keyword">if</span> (actionInvokerFactory != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> actionInvokerFactory.CreateInstance();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Note that getting a service from the current cache will return the same instance for every request.</span></span><br><span class="line">    <span class="keyword">return</span> Resolver.GetService&lt;IAsyncActionInvoker&gt;() ??</span><br><span class="line">        Resolver.GetService&lt;IActionInvoker&gt;() ??</span><br><span class="line">        <span class="keyword">new</span> AsyncControllerActionInvoker();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>透過<code>CreateActionInvoker</code>方法來取得執行<code>IActionInvoker</code>,取得順序如下</p>
<ol>
<li>透過解析器找尋是否有實現<code>AsyncActionInvokerFactory</code>物件</li>
<li>透過解析器找尋是否有實現<code>IActionInvokerFactory</code>物件</li>
<li>透過解析器<code>IAsyncActionInvoker</code>物件</li>
<li>透過解析器<code>IActionInvoker</code>物件</li>
<li>建立一個<code>AsyncControllerActionInvoker</code>物件</li>
</ol>
<p>所以預設是使用<code>AsyncControllerActionInvoker</code>這個非同步<code>ActionInvoker</code></p>
<h2 id="ControllerActionInvoker呼叫InvokeAction方法"><a href="#ControllerActionInvoker呼叫InvokeAction方法" class="headerlink" title="ControllerActionInvoker呼叫InvokeAction方法"></a>ControllerActionInvoker呼叫InvokeAction方法</h2><ul>
<li><code>ControllerActionInvoker</code>是同步版本</li>
<li><code>AsyncControllerActionInvoker</code>是非同步版本</li>
</ul>
<p>使用<code>InvokeAction</code>方法來調用我們使用的<code>Action</code>方法,並透過執行完回傳<code>Bool</code>辨別調用是否成功.</p>
<h3 id="取得-ControllerDescriptor-amp-ActionDescriptor"><a href="#取得-ControllerDescriptor-amp-ActionDescriptor" class="headerlink" title="取得 ControllerDescriptor &amp; ActionDescriptor"></a>取得 ControllerDescriptor &amp; ActionDescriptor</h3><p>在<code>InvokeAction</code>方法一開始會先取得<code>ControllerDescriptor</code>和<code>ActionDescriptor</code>兩個物件(把得到資訊進行封裝).</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line">ControllerDescriptor controllerDescriptor = GetControllerDescriptor(controllerContext);</span><br><span class="line">ActionDescriptor actionDescriptor = FindAction(controllerContext, controllerDescriptor, actionName);</span><br></pre></td></tr></table></figure></div>
<ol>
<li><code>GetControllerDescriptor</code>取得<code>Controller</code>封裝後的資訊(同步使用<code>ReflectedControllerDescriptor</code>).</li>
<li>取得<code>ActionDescriptor</code>(<code>ReflectedActionDescriptor</code>)並在執行<code>Execute</code>方法要靠他來執行<code>Action</code>方法</li>
</ol>
<p><code>FindAction</code>返回一個<code>ActionDescriptor</code>.</p>
<p>這個物件對於日後呼叫<code>Action</code>方法有很重要地位.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> ActionDescriptor <span class="title">FindAction</span>(<span class="params">ControllerContext controllerContext, <span class="keyword">string</span> actionName</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">    MethodInfo matched = _selector.FindActionMethod(controllerContext, actionName);</span><br><span class="line">    <span class="keyword">if</span> (matched == <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ReflectedActionDescriptor(matched, actionName, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><code>ReflectedControllerDescriptor</code>利用反射取得要執行的<code>Method</code>資料(MethodInfo),並封裝到<code>ReflectedActionDescriptor</code>類別中.</p>
<h2 id="Asp-net-AOP機制揭密-Filter"><a href="#Asp-net-AOP機制揭密-Filter" class="headerlink" title="Asp.net AOP機制揭密(Filter)"></a>Asp.net AOP機制揭密(Filter)</h2><p>取得完<code>ActionDescriptor</code>物件後,會先判斷<code>actionDescriptor</code>是否建立成功,如果建立成功就會呼叫<code>GetFilters</code>方法取得目前所有註冊過濾器.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (actionDescriptor != <span class="literal">null</span>)</span><br><span class="line">&#123;</span><br><span class="line">	FilterInfo filterInfo = GetFilters(controllerContext, actionDescriptor);</span><br><span class="line">	<span class="comment">//....</span></span><br></pre></td></tr></table></figure></div>
<p>呼叫<code>GetFilters</code>方法會取得<strong>Asp.net MVC</strong>註冊的所有<code>Filter</code>物件(提供一個織布點方便開發人員彈性做擴充).</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Func&lt;ControllerContext, ActionDescriptor, IEnumerable&lt;Filter&gt;&gt; _getFiltersThunk = FilterProviders.Providers.GetFilters;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">virtual</span> FilterInfo <span class="title">GetFilters</span>(<span class="params">ControllerContext controllerContext, ActionDescriptor actionDescriptor</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> FilterInfo(_getFiltersThunk(controllerContext, actionDescriptor));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p><code>_getFiltersThunk</code>是一個委派物件,預設使用<code>FilterProviders.Providers.GetFilters</code></p>
</blockquote>
<p><code>FilterProviderCollection</code>這個集合對象在前一篇<strong>Asp.net MVC</strong> <code>DI</code>有介紹到,對於<code>DI</code>做一個擴充點(<code>CombinedItems</code>)屬性從容器中取得有對於<code>IFilterProvider</code>註冊<code>Filter</code>物件.</p>
<h3 id="預設使用FilterProviders-FilterProviderCollection"><a href="#預設使用FilterProviders-FilterProviderCollection" class="headerlink" title="預設使用FilterProviders(FilterProviderCollection)"></a>預設使用FilterProviders(FilterProviderCollection)</h3><p><code>MVC</code>會透過<code>FilterProviders.Providers</code>取得預設使用<code>FilterProvider</code>,透過以下三個地方取得</p>
<ul>
<li><code>GlobalFilterCollection</code>(在Global擴充)</li>
<li><code>ControllerInstanceFilterProvider</code>(<code>Controller</code>自行<code>Override</code>)</li>
<li><code>FilterAttributeFilterProvider</code>(提供<code>Attribute</code>註冊最常用)</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 提供Filter AOP讀取的位置</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">FilterProviders</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="title">FilterProviders</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Providers = <span class="keyword">new</span> FilterProviderCollection();</span><br><span class="line">        Providers.Add(GlobalFilters.Filters);</span><br><span class="line">        Providers.Add(<span class="keyword">new</span> FilterAttributeFilterProvider());</span><br><span class="line">        Providers.Add(<span class="keyword">new</span> ControllerInstanceFilterProvider());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> FilterProviderCollection Providers &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="FilterAttributeFilterProvider-取得標籤的Filter"><a href="#FilterAttributeFilterProvider-取得標籤的Filter" class="headerlink" title="FilterAttributeFilterProvider(取得標籤的Filter)"></a>FilterAttributeFilterProvider(取得標籤的Filter)</h3><p><code>IFilterProvider</code>介面提供一個方法<code>GetFilters</code>取得過濾器集合</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IFilterProvider</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">IEnumerable&lt;Filter&gt; <span class="title">GetFilters</span>(<span class="params">ControllerContext controllerContext, ActionDescriptor actionDescriptor</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FilterAttributeFilterProvider</span> : <span class="title">IFilterProvider</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//....</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> IEnumerable&lt;Filter&gt; <span class="title">GetFilters</span>(<span class="params">ControllerContext controllerContext, ActionDescriptor actionDescriptor</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (controllerContext.Controller != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="function">FilterAttribute attr <span class="keyword">in</span> <span class="title">GetControllerAttributes</span>(<span class="params">controllerContext, actionDescriptor</span>))</span></span><br><span class="line"><span class="function"></span>            &#123;</span><br><span class="line">                <span class="function"><span class="keyword">yield</span> return new <span class="title">Filter</span>(<span class="params">attr, FilterScope.Controller, order: <span class="literal">null</span></span>)</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="function">FilterAttribute attr <span class="keyword">in</span> <span class="title">GetActionAttributes</span>(<span class="params">controllerContext, actionDescriptor</span>))</span></span><br><span class="line"><span class="function"></span>            &#123;</span><br><span class="line">                <span class="function"><span class="keyword">yield</span> return new <span class="title">Filter</span>(<span class="params">attr, FilterScope.Action, order: <span class="literal">null</span></span>)</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;             </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>從程式碼得知</p>
<ul>
<li><code>GetControllerAttributes</code>從<code>Controller</code>取得,所有繼承<code>FilterAttribute</code>標籤.</li>
<li><code>GetActionAttributes</code>從<code>Action</code>取得,所有繼承<code>FilterAttribute</code>標籤.</li>
</ul>
<blockquote>
<p>我們最常把<code>Filter</code>寫在<code>Controller</code>或<code>Action</code>上就是透過<code>FilterAttributeFilterProvider</code>的<code>GetFilters</code>方法取得標籤並封裝成<code>Filter</code>物件返回,使用.</p>
</blockquote>
<h2 id="FilterProviderCollection的GetFilters方法-額外註冊過濾器"><a href="#FilterProviderCollection的GetFilters方法-額外註冊過濾器" class="headerlink" title="FilterProviderCollection的GetFilters方法(額外註冊過濾器)"></a>FilterProviderCollection的GetFilters方法(額外註冊過濾器)</h2><p><code>GetFilters</code>方法利用<code>CombinedItems</code>取得所有<code>IFilterProvider</code>物件,再利用<code>GetFilters</code>方法逐一取得註冊<code>Filter</code>物件.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> IEnumerable&lt;Filter&gt; <span class="title">GetFilters</span>(<span class="params">ControllerContext controllerContext, ActionDescriptor actionDescriptor</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//.....</span></span><br><span class="line">	IFilterProvider[] providers = CombinedItems;</span><br><span class="line">	List&lt;Filter&gt; filters = <span class="keyword">new</span> List&lt;Filter&gt;();</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; providers.Length; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		IFilterProvider provider = providers[i];</span><br><span class="line">		<span class="keyword">foreach</span> (Filter filter <span class="keyword">in</span> provider.GetFilters(controllerContext, actionDescriptor))</span><br><span class="line">		&#123;</span><br><span class="line">			filters.Add(filter);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	filters.Sort(_filterComparer);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (filters.Count &gt; <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		RemoveDuplicates(filters);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> filters;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>今天就先分享執行<code>Action</code>前執行動作,在<code>InvokeAction</code>方法中有兩個很重要的物件.</p>
<ol>
<li><code>ControllerDescriptor</code>封裝<code>Controller</code>主要使用資訊</li>
<li><code>ActionDescriptor</code>封裝<code>Action</code>主要使用資訊,並利用裡面的<code>Execute</code>方法執行<code>Action</code>.</li>
</ol>
<p>另外一點我們也了解<strong>Asp.net MVC</strong>如何實現AOP編寫方式,透過<strong>Attribute + Filter</strong>,讓系統更有擴展性.</p>
<p>目前<code>Filter</code>類別跟<code>ControllerActionInvoker</code>類別UML圖關係如下</p>
<p><img src="https://raw.githubusercontent.com/isdaniel/MyBlog/master/source/images/itHelp/15/UML_ActionInvoker.PNG" alt="UML_ActionInvoker.PNG"></p>
<p>下篇會跟大家分享<code>MVC Filter</code>是在哪裡被呼叫且裡面<code>Filter</code>參數是如何被產生的.</p>
<p><strong>此文作者</strong>：Daniel Shih(石頭)<br><strong>此文地址</strong>： <a href="https://isdaniel.github.io/ithelp-day15/">https://isdaniel.github.io/ithelp-day15/</a> <br><strong>版權聲明</strong>：本博客所有文章除特別聲明外，均採用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC90dy8=" title="https://creativecommons.org/licenses/by-nc-sa/3.0/tw/">CC BY-NC-SA 3.0 TW<i class="fa fa-external-link"></i></span> 許可協議。轉載請註明出處！</p>
]]></content>
      <categories>
        <category>11th鐵人賽</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>Asp.net</tag>
        <tag>Asp.net-MVC</tag>
        <tag>SourceCode</tag>
        <tag>11th鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>MVC Filter 機制解密 (第16天)</title>
    <url>/ithelp-day16/</url>
    <content><![CDATA[<h1 id="Agenda"><a href="#Agenda" class="headerlink" title="Agenda"></a>Agenda<!-- omit in toc --></h1><ul>
<li><a href="#%e5%89%8d%e8%a8%80">前言</a></li>
<li><a href="#%e6%8f%ad%e5%af%86%e5%8f%96%e5%be%97%e9%81%8e%e6%bf%be%e5%99%a8filter%e6%a9%9f%e5%88%b6aop">揭密取得過濾器(Filter)機制AOP</a><ul>
<li><a href="#aopaspect-oriented-programming%e6%a0%b8%e5%bf%83%e6%a6%82%e5%bf%b5proxy-pattern">AOP(Aspect-Oriented Programming)核心概念Proxy Pattern</a></li>
</ul>
</li>
<li><a href="#%e4%ba%94%e7%a8%ae%e9%81%8e%e6%bf%be%e5%99%a8filter%e4%bb%8b%e9%9d%a2">五種過濾器(Filter)介面</a></li>
<li><a href="#authorizationfilter">AuthorizationFilter</a><ul>
<li><a href="#iauthenticationfilter-and-authenticationcontext">IAuthenticationFilter and AuthenticationContext</a></li>
<li><a href="#invokeauthenticationfilters%e6%96%b9%e6%b3%95">InvokeAuthenticationFilters方法</a></li>
<li><a href="#iauthorizationfilter-and-authorizationcontext">IAuthorizationFilter and AuthorizationContext</a><ul>
<li><a href="#authorizationcontext%e9%a1%9e%e5%88%a5">AuthorizationContext類別</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#iactionfilter%e6%96%b9%e6%b3%95%e5%9f%b7%e8%a1%8c%e5%89%8d%e5%be%8c%e7%9a%84%e9%81%8e%e6%bf%be%e5%99%a8">IActionFilter方法執行前,後的過濾器</a></li>
<li><a href="#invokeactionresult-%e5%8b%95%e4%bd%9c%e5%9f%b7%e8%a1%8c%e5%89%8d%e5%be%8c%e9%81%8e%e6%bf%be%e5%99%a8">InvokeActionResult 動作執行前,後過濾器</a></li>
<li><a href="#iexceptionfilter%e9%8c%af%e8%aa%a4%e9%81%8e%e6%bf%be%e5%99%a8">IExceptionFilter錯誤過濾器</a></li>
<li><a href="#%e5%b0%8f%e7%b5%90">小結：</a></li>
</ul>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上篇和大家介紹<code>Filter</code>去是如何取得且我們可以透過IOC容器註冊<code>IFilterProvider</code>來擴充取得<code>Filter</code>注入點.</p>
<p>在<strong>ASP.NET MVC</strong>的<code>Filter</code>，在執行目標前後彈性擴充額外操作(繼承<code>ActionFilter</code>並掛<code>Attribute</code>)，這是一種典型的<code>AOP</code>設計模式</p>
<p>本篇會和大家繼續分享<code>InvokeAction</code>後續動作.</p>
<p>為什麼我們在<code>Action</code>方法和<code>Controller</code>類別放置一個繼承（<code>AuthorizationFilter、ActionFilter、ResultFilter,ExceptionFilter</code>）標籤(<code>Attribute</code>)對應介面(<code>IAuthorizationFilter、IActionFilter、IResultFilter,IExceptionFilter</code>),程式幫我們自動載入<strong>MVC</strong>生命週期中並執行?</p>
<blockquote>
<p>我有做一個可以針對於<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2lzZGFuaWVsL0FzcC5uZXQtTVZDLURlYnVnZXI=" title="https://github.com/isdaniel/Asp.net-MVC-Debuger">Asp.net MVC Debugger<i class="fa fa-external-link"></i></span>的專案，只要下中斷點就可輕易進入Asp.net MVC原始碼.</p>
</blockquote>
<h2 id="揭密取得過濾器-Filter-機制AOP"><a href="#揭密取得過濾器-Filter-機制AOP" class="headerlink" title="揭密取得過濾器(Filter)機制AOP"></a>揭密取得過濾器(Filter)機制AOP</h2><p>AOP 是 <strong>OOP(物件導向)一個變化程式撰寫思想。</strong>（非取代OOP而是擴充）</p>
<p>導入AOP幫助：</p>
<p>可幫我們分離<strong>核心邏輯</strong>跟<strong>非核心邏輯</strong>代碼，很好降低模組間耦合性，已便日後擴充。</p>
<p>非核心邏輯代碼像：(日誌記錄，性能統計，安全控制，事務處理，異常處理等代碼從業務邏輯代碼中劃分出來)</p>
<p><img src="https://ithelp.ithome.com.tw/upload/images/20180209/20096630UyP6I4l2MB.png" alt="https://ithelp.ithome.com.tw/upload/images/20180209/20096630UyP6I4l2MB.png"></p>
<p>原本寫法把寫日誌相關程式寫入，業務邏輯方法中。導致此方法非單一職則。我們可以把程式重構改寫成(右圖)，將寫日誌方法抽離出來更有效達成模組化。</p>
<h3 id="AOP-Aspect-Oriented-Programming-核心概念Proxy-Pattern"><a href="#AOP-Aspect-Oriented-Programming-核心概念Proxy-Pattern" class="headerlink" title="AOP(Aspect-Oriented Programming)核心概念Proxy Pattern"></a>AOP(Aspect-Oriented Programming)核心概念Proxy Pattern</h3><p><code>AOP</code>是擴充<code>Proxy Pattern</code>(代理模式)概念，為每個方法提供一個代理人，可為執行前或執行後提供擴展機制，並由代理類別來呼叫真正呼叫使用方法．</p>
<p>如果想要更多了解代理模式可以參考我之前寫的<span class="exturl" data-url="aHR0cHM6Ly9kb3RibG9ncy5jb20udHcvZGFuaWVsLzIwMTcvMTAvMTIvMTUyNDM5" title="https://dotblogs.com.tw/daniel/2017/10/12/152439">ProxyPattern代理模式(二)<i class="fa fa-external-link"></i></span></p>
<h2 id="五種過濾器-Filter-介面"><a href="#五種過濾器-Filter-介面" class="headerlink" title="五種過濾器(Filter)介面"></a>五種過濾器(Filter)介面</h2><p>在<strong>Asp.net MVC</strong>有五個過濾器實現<code>AOP</code>架構</p>
<p>下面順序案照執行呼叫執行順序來介紹</p>
<ol>
<li><code>IAuthenticationFilter</code>：最一開始執行驗證使用過濾器,這個介面有一個<code>void OnAuthentication(AuthenticationContext filterContext)</code>方法.如果驗證失敗可以對於<code>filterContext.Result</code>設值來結束這次請求.</li>
<li><code>IAuthorizationFilter</code>：執行過程和<code>IAuthenticationFilter</code>過濾器基本上一樣</li>
<li><code>IActionFilter</code>：提供方法執行前,後的動作.</li>
<li><code>IResultFilter</code>：提供方法執行<strong>結果</strong>前,後的動作.</li>
<li><code>IExceptionFilter</code>：在執行此方法有錯誤時觸發的過濾器.</li>
</ol>
<p><strong>MVC</strong>上面幾個過濾器,讓開發者可以很有彈性擴充自己的系統且不用動到核心原始碼.很好達到<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU1JUJDJTgwJUU5JTk3JUFEJUU1JThFJTlGJUU1JTg4JTk5" title="https://zh.wikipedia.org/wiki/%E5%BC%80%E9%97%AD%E5%8E%9F%E5%88%99">開放封閉原則<i class="fa fa-external-link"></i></span></p>
<h2 id="AuthorizationFilter"><a href="#AuthorizationFilter" class="headerlink" title="AuthorizationFilter"></a>AuthorizationFilter</h2><p><code>AuthorizationFilter</code>在<code>ActionInvoker</code>執行前第一項工作，因為後續工作（參數模型綁定，參數模型驗證，呼叫方法）只有在驗證成功的基礎上才會有意義。</p>
<h3 id="IAuthenticationFilter-and-AuthenticationContext"><a href="#IAuthenticationFilter-and-AuthenticationContext" class="headerlink" title="IAuthenticationFilter and AuthenticationContext"></a>IAuthenticationFilter and AuthenticationContext</h3><p>一開始呼叫<code>InvokeAuthenticationFilters</code>方法來取得<code>AuthenticationContext</code>物件,在判斷<code>authenticationContext.Result</code>是否有給值.如果有當作驗證失敗不用在執行後面流程.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">    AuthenticationContext authenticationContext = InvokeAuthenticationFilters(controllerContext, filterInfo.AuthenticationFilters, actionDescriptor);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (authenticationContext.Result != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        AuthenticationChallengeContext challengeContext = InvokeAuthenticationFiltersChallenge(</span><br><span class="line">            controllerContext, filterInfo.AuthenticationFilters, actionDescriptor,</span><br><span class="line">            authenticationContext.Result);</span><br><span class="line">        InvokeActionResult(controllerContext, challengeContext.Result ?? authenticationContext.Result);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//.....</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="InvokeAuthenticationFilters方法"><a href="#InvokeAuthenticationFilters方法" class="headerlink" title="InvokeAuthenticationFilters方法"></a>InvokeAuthenticationFilters方法</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">virtual</span> AuthenticationContext <span class="title">InvokeAuthenticationFilters</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">	ControllerContext controllerContext,</span></span></span><br><span class="line"><span class="function"><span class="params">	IList&lt;IAuthenticationFilter&gt; filters, </span></span></span><br><span class="line"><span class="function"><span class="params">	ActionDescriptor actionDescriptor</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//....</span></span><br><span class="line">	AuthenticationContext context = <span class="keyword">new</span> AuthenticationContext(controllerContext, actionDescriptor,</span><br><span class="line">		originalPrincipal);</span><br><span class="line">	<span class="keyword">foreach</span> (IAuthenticationFilter filter <span class="keyword">in</span> filters)</span><br><span class="line">	&#123;</span><br><span class="line">		filter.OnAuthentication(context);</span><br><span class="line">		<span class="comment">// short-circuit evaluation when an error occurs</span></span><br><span class="line">		<span class="keyword">if</span> (context.Result != <span class="literal">null</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	IPrincipal newPrincipal = context.Principal;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (newPrincipal != originalPrincipal)</span><br><span class="line">	&#123;</span><br><span class="line">		Contract.Assert(context.HttpContext != <span class="literal">null</span>);</span><br><span class="line">		context.HttpContext.User = newPrincipal;</span><br><span class="line">		Thread.CurrentPrincipal = newPrincipal;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> context;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><code>AuthenticationContext</code>中重要的一個屬性是</p>
<ul>
<li><code>public ActionResult Result { get; set; }</code> 只要這個物件不為<code>null</code>就會直接返回此次請求.</li>
</ul>
<p>在方法中我封裝一個<code>AuthenticationContext</code>物件,把它當作參數傳入<code>IAuthenticationFilter.OnAuthentication</code>方法中(這就是我們在繼承<code>AuthenticationFilter</code>使用<code>AuthenticationContext</code>物件)</p>
<p>值得一提程式會判斷<code>context.Result</code>是否為<code>null</code>來當作迴圈中斷點.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (context.Result != <span class="literal">null</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>這個邏輯是我們對於<code>Authentication</code>驗證失敗後想要直接返回請求可以透過把<code>context.Result</code>給一個值(<code>ActionResult</code>物件),外面會照<code>authenticationContext.Result</code>是否為<code>null</code>為依據判斷是否繼續執行後面動作.</p>
<h3 id="IAuthorizationFilter-and-AuthorizationContext"><a href="#IAuthorizationFilter-and-AuthorizationContext" class="headerlink" title="IAuthorizationFilter and AuthorizationContext"></a>IAuthorizationFilter and AuthorizationContext</h3><p>下一個步驟是檢驗<code>IAuthorizationFilter</code>過濾器,執行過程和<code>IAuthenticationFilter</code>過濾器基本上一樣</p>
<p>依照物件內<code>Result</code>屬性是否為<code>null</code>來當作後續執行依據.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line">AuthorizationContext authorizationContext = InvokeAuthorizationFilters(controllerContext, filterInfo.AuthorizationFilters, actionDescriptor);</span><br><span class="line"><span class="keyword">if</span> (authorizationContext.Result != <span class="literal">null</span>)</span><br><span class="line">&#123;</span><br><span class="line">	AuthenticationChallengeContext challengeContext = InvokeAuthenticationFiltersChallenge(</span><br><span class="line">		controllerContext, filterInfo.AuthenticationFilters, actionDescriptor,</span><br><span class="line">		authorizationContext.Result);</span><br><span class="line">	InvokeActionResult(controllerContext, challengeContext.Result ?? authorizationContext.Result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IAuthorizationFilter</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnAuthorization</span>(<span class="params">AuthorizationContext filterContext</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h4 id="AuthorizationContext類別"><a href="#AuthorizationContext類別" class="headerlink" title="AuthorizationContext類別"></a>AuthorizationContext類別</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AuthorizationContext</span> : <span class="title">ControllerContext</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">//.....</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">virtual</span> ActionDescriptor ActionDescriptor &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> ActionResult Result &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>既然<code>IAuthenticationFilter</code>和<code>IAuthorizationFilter</code>過濾器驗證東西都很類似為什麼要分成兩個呢?</p>
<p>仔細比較會發現<code>IAuthenticationFilter</code>多了(設置<code>Principal</code>)，檢驗方式。</p>
<p><code>ActionDescriptor</code>(使用<code>ReflectedActionDescriptor</code>)這個物件存放目前執行<code>Action</code>相關的資訊(裡面有一個<code>Execute</code>抽象方法,靠他來做<code>Action</code>呼叫使用)</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">InvokeActionResult</span>(<span class="params">ControllerContext controllerContext, ActionResult actionResult</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	actionResult.ExecuteResult(controllerContext);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>如果判斷權限錯誤或<code>Filter</code>需提前返回<code>Result</code>就會執行<code>InvokeActionResult</code>方法,來執行返回工作.</p>
<h2 id="IActionFilter方法執行前-後的過濾器"><a href="#IActionFilter方法執行前-後的過濾器" class="headerlink" title="IActionFilter方法執行前,後的過濾器"></a>IActionFilter方法執行前,後的過濾器</h2><p>有在寫<strong>Asp.net MVC</strong>的人一定對於下面這個介面不陌生,這個過濾器在<code>InvokeActionMethodFilter</code>使用時被呼叫.</p>
<p><code>ActionExecutingContext</code>也有一個<code>Result</code>物件用此判斷是否有執行後續請求.一般也是<code>NULL</code></p>
<blockquote>
<p><code>ActionExecutingContext</code>這個物件比其他過濾器參數多了一個重要的成員<code>IDictionary&lt;string, object&gt; parameters</code>,有這個成員我們可以針對呼叫<code>Action</code>參數處理.</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IActionFilter</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">OnActionExecuting</span>(<span class="params">ActionExecutingContext filterContext</span>)</span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">OnActionExecuted</span>(<span class="params">ActionExecutedContext filterContext</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">internal</span> <span class="keyword">static</span> ActionExecutedContext <span class="title">InvokeActionMethodFilter</span>(<span class="params">IActionFilter filter, ActionExecutingContext preContext, Func&lt;ActionExecutedContext&gt; continuation</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//執行Action 過濾器</span></span><br><span class="line">	filter.OnActionExecuting(preContext);</span><br><span class="line">	<span class="comment">//如果有Result 直接返回</span></span><br><span class="line">	<span class="keyword">if</span> (preContext.Result != <span class="literal">null</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> ActionExecutedContext(preContext, preContext.ActionDescriptor, <span class="literal">true</span> <span class="comment">/* canceled */</span>, <span class="literal">null</span> <span class="comment">/* exception */</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			Result = preContext.Result</span><br><span class="line">		&#125;;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">bool</span> wasError = <span class="literal">false</span>;</span><br><span class="line">	ActionExecutedContext postContext = <span class="literal">null</span>;</span><br><span class="line">	<span class="keyword">try</span></span><br><span class="line">	&#123;</span><br><span class="line">		postContext = continuation();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">catch</span> (ThreadAbortException)</span><br><span class="line">	&#123;</span><br><span class="line">		postContext = <span class="keyword">new</span> ActionExecutedContext(preContext, preContext.ActionDescriptor, <span class="literal">false</span> <span class="comment">/* canceled */</span>, <span class="literal">null</span> <span class="comment">/* exception */</span>);</span><br><span class="line">		<span class="comment">//執行Action後 過濾器</span></span><br><span class="line">		filter.OnActionExecuted(postContext);</span><br><span class="line">		<span class="keyword">throw</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">catch</span> (Exception ex)</span><br><span class="line">	&#123;</span><br><span class="line">		wasError = <span class="literal">true</span>;</span><br><span class="line">		postContext = <span class="keyword">new</span> ActionExecutedContext(preContext, preContext.ActionDescriptor, <span class="literal">false</span> <span class="comment">/* canceled */</span>, ex);</span><br><span class="line">		filter.OnActionExecuted(postContext);</span><br><span class="line">		<span class="keyword">if</span> (!postContext.ExceptionHandled)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">throw</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (!wasError)</span><br><span class="line">	&#123;</span><br><span class="line">		filter.OnActionExecuted(postContext);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> postContext;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>其中有一段<code>continuation</code>這個委派是<code>InvokeActionMethod</code>這個方法,這個方法取得使用<code>Action</code>方法.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">virtual</span> ActionResult <span class="title">InvokeActionMethod</span>(<span class="params">ControllerContext controllerContext, ActionDescriptor actionDescriptor, IDictionary&lt;<span class="keyword">string</span>, <span class="keyword">object</span>&gt; parameters</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">object</span> returnValue = actionDescriptor.Execute(controllerContext, parameters);</span><br><span class="line">	ActionResult result = CreateActionResult(controllerContext, actionDescriptor, returnValue);</span><br><span class="line">	<span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">	postContext = continuation();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p><code>ActionExecutedContext</code>物件中的<code>Result</code>屬性就是執行<code>Action</code>方法後的結果</p>
</blockquote>
<h2 id="InvokeActionResult-動作執行前-後過濾器"><a href="#InvokeActionResult-動作執行前-後過濾器" class="headerlink" title="InvokeActionResult 動作執行前,後過濾器"></a>InvokeActionResult 動作執行前,後過濾器</h2><p>呼叫<code>InvokeActionResult</code>過濾器藉由<code>InvokeActionResultFilterRecursive</code>方法</p>
<p>這個方法使用遞迴方式看之前的使用<code>for loop</code>執行過濾器方式有所不同,幸好在原始碼有註解.</p>
<p>主要是因為下面原因</p>
<blockquote>
<p><code>OnResultExecuting</code>事件必須按正向順序觸,發然後必須觸發<code>InvokeActionResult</code>(執行<code>Action</code>動作方法),<code>OnResultExecuted</code>事件必須以相反的順序觸發</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> ResultExecutedContext <span class="title">InvokeActionResultFilterRecursive</span>(<span class="params">IList&lt;IResultFilter&gt; filters, <span class="keyword">int</span> filterIndex, ResultExecutingContext preContext, ControllerContext controllerContext, ActionResult actionResult</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (filterIndex &gt; filters.Count - <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		InvokeActionResult(controllerContext, actionResult);</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> ResultExecutedContext(controllerContext, actionResult, canceled: <span class="literal">false</span>, exception: <span class="literal">null</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	IResultFilter filter = filters[filterIndex];</span><br><span class="line">	filter.OnResultExecuting(preContext);</span><br><span class="line">	<span class="keyword">if</span> (preContext.Cancel)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> ResultExecutedContext(preContext, preContext.Result, canceled: <span class="literal">true</span>, exception: <span class="literal">null</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">bool</span> wasError = <span class="literal">false</span>;</span><br><span class="line">	ResultExecutedContext postContext = <span class="literal">null</span>;</span><br><span class="line">	<span class="keyword">try</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> nextFilterIndex = filterIndex + <span class="number">1</span>;</span><br><span class="line">		postContext = InvokeActionResultFilterRecursive(filters, nextFilterIndex, preContext, controllerContext, actionResult);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">catch</span> (ThreadAbortException)</span><br><span class="line">	&#123;</span><br><span class="line">		postContext = <span class="keyword">new</span> ResultExecutedContext(preContext, preContext.Result, canceled: <span class="literal">false</span>, exception: <span class="literal">null</span>);</span><br><span class="line">		filter.OnResultExecuted(postContext);</span><br><span class="line">		<span class="keyword">throw</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">catch</span> (Exception ex)</span><br><span class="line">	&#123;</span><br><span class="line">		wasError = <span class="literal">true</span>;</span><br><span class="line">		postContext = <span class="keyword">new</span> ResultExecutedContext(preContext, preContext.Result, canceled: <span class="literal">false</span>, exception: ex);</span><br><span class="line">		filter.OnResultExecuted(postContext);</span><br><span class="line">		<span class="keyword">if</span> (!postContext.ExceptionHandled)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">throw</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (!wasError)</span><br><span class="line">	&#123;</span><br><span class="line">		filter.OnResultExecuted(postContext);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> postContext;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>在<code>OnResultExecuting</code>方法的<code>ResultExecutingContext</code>可以藉由<code>Canceled</code>這個屬性來最後控制是否要執行<code>Action</code>方法,如果不要將這個值設定為<code>false</code>.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">bool</span> Canceled &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="IExceptionFilter錯誤過濾器"><a href="#IExceptionFilter錯誤過濾器" class="headerlink" title="IExceptionFilter錯誤過濾器"></a>IExceptionFilter錯誤過濾器</h2><p>最後介紹錯誤時呼叫的過濾器<code>IExceptionFilter</code></p>
<p>可以看到在執行方法的最前面使用了一個<code>try....catch</code>而最後<code>catch</code>程式碼如下.</p>
<p>在這個方法中有一個重要的屬性是<code>bool ExceptionHandled</code>,如果在錯誤時設定為<code>true</code>她就會執行<code>Result</code>的結果(因為最後呼叫了<code>InvokeActionResult</code>方法.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//....</span></span><br><span class="line"><span class="keyword">catch</span> (Exception ex)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// 錯誤處理過濾器 </span></span><br><span class="line">	ExceptionContext exceptionContext = InvokeExceptionFilters(controllerContext, filterInfo.ExceptionFilters, ex);</span><br><span class="line">	<span class="comment">//如果需要自己處理錯誤 exceptionContext.ExceptionHandled 設為true</span></span><br><span class="line">	<span class="keyword">if</span> (!exceptionContext.ExceptionHandled)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">throw</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	InvokeActionResult(controllerContext, exceptionContext.Result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">virtual</span> ExceptionContext <span class="title">InvokeExceptionFilters</span>(<span class="params">ControllerContext controllerContext, IList&lt;IExceptionFilter&gt; filters, Exception exception</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ExceptionContext context = <span class="keyword">new</span> ExceptionContext(controllerContext, exception);</span><br><span class="line">	<span class="keyword">foreach</span> (IExceptionFilter filter <span class="keyword">in</span> filters.Reverse())</span><br><span class="line">	&#123;</span><br><span class="line">		filter.OnException(context);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> context;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="小結："><a href="#小結：" class="headerlink" title="小結："></a>小結：</h2><p>過濾器這部分原始碼很值得大家探討,因為在主流<code>IOC</code>容器框架有支援<code>AOP</code>概念.</p>
<p><code>AOP</code>有很大優點是可做到設計五大原則的其中兩項</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU1JThEJTk1JUU0JUI4JTgwJUU1JThBJTlGJUU4JTgzJUJEJUU1JThFJTlGJUU1JTg4JTk5" title="https://zh.wikipedia.org/wiki/%E5%8D%95%E4%B8%80%E5%8A%9F%E8%83%BD%E5%8E%9F%E5%88%99">單一職責原則<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU1JUJDJTgwJUU5JTk3JUFEJUU1JThFJTlGJUU1JTg4JTk5" title="https://zh.wikipedia.org/wiki/%E5%BC%80%E9%97%AD%E5%8E%9F%E5%88%99">開放封閉原則<i class="fa fa-external-link"></i></span></li>
</ul>
<p>使程式碼耦合性變低</p>
<p>執行<code>Action</code>方法前,如何取得權限過濾器並呼叫檢驗,另外在呼叫方法前可以看到會把用到的資訊封裝到一個<code>Context</code>物件中.</p>
<p><code>IAuthenticationFilter</code>和<code>IAuthorizationFilter</code>基本上都是權限驗證的過濾器</p>
<blockquote>
<p>但有先後順序,這點需注意!! 先執行<code>IAuthenticationFilter</code>後<code>IAuthorizationFilter</code></p>
</blockquote>
<p>看了<strong>MVC</strong>過濾器原始碼後有感而法,石頭就基於<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vemgtdHcvZG90bmV0L2FwaS9zeXN0ZW0ucnVudGltZS5yZW1vdGluZy5wcm94aWVzLnJlYWxwcm94eT92aWV3PW5ldGZyYW1ld29yay00Ljg=" title="https://docs.microsoft.com/zh-tw/dotnet/api/system.runtime.remoting.proxies.realproxy?view=netframework-4.8">RealProxy<i class="fa fa-external-link"></i></span>這個類別做了一個AOP開源框架<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2lzZGFuaWVsL0F3ZXNvbWVQcm94eS5OZXQ=" title="https://github.com/isdaniel/AwesomeProxy.Net">AwesomeProxy.Net<i class="fa fa-external-link"></i></span>.</p>
<p>下篇會繼續介紹<code>Action</code>參數如何建立,遇到複雜<code>Model</code> MVC是怎麼處理</p>
<p><strong>此文作者</strong>：Daniel Shih(石頭)<br><strong>此文地址</strong>： <a href="https://isdaniel.github.io/ithelp-day16/">https://isdaniel.github.io/ithelp-day16/</a> <br><strong>版權聲明</strong>：本博客所有文章除特別聲明外，均採用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC90dy8=" title="https://creativecommons.org/licenses/by-nc-sa/3.0/tw/">CC BY-NC-SA 3.0 TW<i class="fa fa-external-link"></i></span> 許可協議。轉載請註明出處！</p>
]]></content>
      <categories>
        <category>11th鐵人賽</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>Asp.net</tag>
        <tag>Asp.net-MVC</tag>
        <tag>SourceCode</tag>
        <tag>11th鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>Action方法如何被執行InvokeAction(二) (第17天)</title>
    <url>/ithelp-day17/</url>
    <content><![CDATA[<h1 id="Agenda"><a href="#Agenda" class="headerlink" title="Agenda"></a>Agenda<!-- omit in toc --></h1><ul>
<li><a href="#%e5%89%8d%e8%a8%80">前言</a></li>
<li><a href="#controlleractioninvoker%e6%96%b9%e6%b3%95-%e9%87%8d%e8%a6%81invokeaction%e6%96%b9%e6%b3%95">ControllerActionInvoker方法 重要InvokeAction方法</a><ul>
<li><a href="#%e5%8f%96%e5%be%97controllerdescriptorreflectedcontrollerdescriptor">取得ControllerDescriptor(ReflectedControllerDescriptor)</a></li>
</ul>
</li>
<li><a href="#actiondescriptorreflectedactiondescriptor">ActionDescriptor(ReflectedActionDescriptor)</a><ul>
<li><a href="#reflectedactiondescriptor-%e5%8f%96%e5%be%97actionmethod%e5%8f%83%e6%95%b8%e8%b3%87%e8%a8%8a">ReflectedActionDescriptor 取得ActionMethod參數資訊</a></li>
</ul>
</li>
<li><a href="#%e5%8f%96%e5%be%97action%e6%96%b9%e6%b3%95%e5%9f%b7%e8%a1%8c%e5%8f%83%e6%95%b8">取得Action方法執行參數</a></li>
<li><a href="#%e5%b0%8f%e7%b5%90">小結:</a></li>
</ul>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上篇揭開<strong>MVC</strong>常用的過濾器如何被獲取呼叫跟基本介紹.</p>
<p>前幾篇有介紹<code>ControllerDescriptor</code>,<code>ActionDescriptor</code>兩個物件,今天會來細部探討他們裡面有哪些重要成員.</p>
<p>本篇會繼續分析呼叫<code>Action</code>方法邏輯和在過程中有用到重要物件跟動作.</p>
<blockquote>
<p>我有做一個可以針對於<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2lzZGFuaWVsL0FzcC5uZXQtTVZDLURlYnVnZXI=" title="https://github.com/isdaniel/Asp.net-MVC-Debuger">Asp.net MVC Debugger<i class="fa fa-external-link"></i></span>的專案，只要下中斷點就可輕易進入Asp.net MVC原始碼.</p>
</blockquote>
<h2 id="ControllerActionInvoker方法-重要InvokeAction方法"><a href="#ControllerActionInvoker方法-重要InvokeAction方法" class="headerlink" title="ControllerActionInvoker方法 重要InvokeAction方法"></a>ControllerActionInvoker方法 重要InvokeAction方法</h2><p>前面有說<code>ControllerActionInvoker</code>類別最重要的就是<code>InvokeAction</code>方法,因為主要透過他去呼叫<code>ActionResult</code>抽象類別<code>ExecuteResult</code>方法.</p>
<p><code>InvokeAction</code>有兩個參數</p>
<ul>
<li><code>ControllerContext</code>:對於<code>RequestContext</code>,<code>RouteData</code>,使用<code>Controller</code>資訊封裝.</li>
<li><code>actionName</code>:此次呼叫方法(從<code>RouteData</code>取得<code>action</code>值)</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">InvokeAction</span>(<span class="params">ControllerContext controllerContext, <span class="keyword">string</span> actionName</span>)</span></span><br></pre></td></tr></table></figure></div>
<p><code>InvokeAction</code>方法除了呼叫<code>ExecuteResult</code>方法外還做了其他事情,對於藉由<code>ControllerContext</code>封裝兩個物件.</p>
<ul>
<li><code>ControllerDescriptor</code></li>
<li><code>ActionDescriptor</code></li>
</ul>
<p>這兩個物件在此方法中很重要.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line">ControllerDescriptor controllerDescriptor = GetControllerDescriptor(controllerContext);</span><br><span class="line">ActionDescriptor actionDescriptor = FindAction(controllerContext, controllerDescriptor, actionName);</span><br></pre></td></tr></table></figure></div>
<h3 id="取得ControllerDescriptor-ReflectedControllerDescriptor"><a href="#取得ControllerDescriptor-ReflectedControllerDescriptor" class="headerlink" title="取得ControllerDescriptor(ReflectedControllerDescriptor)"></a>取得ControllerDescriptor(ReflectedControllerDescriptor)</h3><p><code>GetControllerDescriptor</code>會返回一個<code>ReflectedControllerDescriptor</code>物件.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">virtual</span> ControllerDescriptor <span class="title">GetControllerDescriptor</span>(<span class="params">ControllerContext controllerContext</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Type controllerType = controllerContext.Controller.GetType();</span><br><span class="line">	ControllerDescriptor controllerDescriptor = DescriptorCache.GetDescriptor(</span><br><span class="line">		controllerType: controllerType,</span><br><span class="line">		creator: (Type innerType) =&gt; <span class="keyword">new</span> ReflectedControllerDescriptor(innerType),</span><br><span class="line">		state: controllerType);</span><br><span class="line">	<span class="keyword">return</span> controllerDescriptor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><code>ReflectedControllerDescriptor</code>裡面有許多重要資訊,我會列出其重要成員和代表含意.</p>
<ol>
<li><code>ControllerType</code>此次執行<code>Controller</code>類型</li>
<li><strong>(重要)</strong><code>FindAction</code>透過此方法取得<code>ActionDescriptor</code>物件.</li>
<li><code>GetFilterAttributes</code>方法會透過此物件取得<code>AcitonFilter</code>(掛載在<code>Controller</code>上)</li>
</ol>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">ControllerDescriptor</span> : <span class="title">ICustomAttributeProvider</span>, <span class="title">IUniquelyIdentifiable</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">string</span> ControllerName</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">get</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">string</span> typeName = ControllerType.Name;</span><br><span class="line">			<span class="keyword">if</span> (typeName.EndsWith(<span class="string">"Controller"</span>, StringComparison.OrdinalIgnoreCase))</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">return</span> typeName.Substring(<span class="number">0</span>, typeName.Length - <span class="string">"Controller"</span>.Length);</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">return</span> typeName;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">abstract</span> Type ControllerType &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> ActionDescriptor <span class="title">FindAction</span>(<span class="params">ControllerContext controllerContext, <span class="keyword">string</span> actionName</span>)</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> ActionDescriptor[] <span class="title">GetCanonicalActions</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> IEnumerable&lt;FilterAttribute&gt; <span class="title">GetFilterAttributes</span>(<span class="params"><span class="keyword">bool</span> useCache</span>)</span></span><br><span class="line"><span class="function"></span>	&#123;</span><br><span class="line">		<span class="keyword">return</span> GetCustomAttributes(<span class="keyword">typeof</span>(FilterAttribute), inherit: <span class="literal">true</span>).Cast&lt;FilterAttribute&gt;();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">IsDefined</span>(<span class="params">Type attributeType, <span class="keyword">bool</span> inherit</span>)</span></span><br><span class="line"><span class="function"></span>	&#123;</span><br><span class="line">		<span class="keyword">if</span> (attributeType == <span class="literal">null</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="string">"attributeType"</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><code>ReflectedControllerDescriptor</code>實現<code>FindAction</code>抽象方法.</p>
<p>主要透過反射取得此<code>Controller</code>物件中相對應Action名稱的方法,並把他封裝到<code>ReflectedActionDescriptor</code>類別中返回.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> ActionDescriptor <span class="title">FindAction</span>(<span class="params">ControllerContext controllerContext, <span class="keyword">string</span> actionName</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (controllerContext == <span class="literal">null</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="string">"controllerContext"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (String.IsNullOrEmpty(actionName))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(MvcResources.Common_NullOrEmpty, <span class="string">"actionName"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	MethodInfo matched = _selector.FindActionMethod(controllerContext, actionName);</span><br><span class="line">	<span class="keyword">if</span> (matched == <span class="literal">null</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> ReflectedActionDescriptor(matched, actionName, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line"><span class="meta">## ActionDescriptor(ReflectedActionDescriptor)</span></span><br><span class="line"></span><br><span class="line">執行每一個`Action`方法會通過`ActionDescriptor`物件,所以`ActionDescriptor`是另一個對於`InovkeAction`方法來說很重要物件</span><br><span class="line"></span><br><span class="line">在`ActionDescriptor`抽象類別中有許多重要的成員</span><br><span class="line"></span><br><span class="line">* `Execute`:`Action`執行呼叫方法,其中裡面的`parameters`參數就是調用`Controller`上`Action`方法鎖使用的參數.</span><br><span class="line">* `GetFilterAttributes`:回傳在`Action`方法上的所有`Filter`標籤</span><br><span class="line">* `GetFilters`:返回一個`FilterInfo`物件,這個物件可以得到應用在該`Action`方法上所有`filter`</span><br><span class="line">* `ActionName`:`Action`方法名稱</span><br><span class="line"></span><br><span class="line">```csharp</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">ActionDescriptor</span> : <span class="title">ICustomAttributeProvider</span>, <span class="title">IUniquelyIdentifiable</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">//....</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">IsDefined</span>(<span class="params">Type attributeType, <span class="keyword">bool</span> inherit</span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> IEnumerable&lt;FilterAttribute&gt; <span class="title">GetFilterAttributes</span>(<span class="params"><span class="keyword">bool</span> useCache</span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> ParameterDescriptor[] <span class="title">GetParameters</span>(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">object</span> <span class="title">Execute</span>(<span class="params">ControllerContext controllerContext,  IDictionary&lt;<span class="keyword">string</span>, <span class="keyword">object</span>&gt; parameters</span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> FilterInfo <span class="title">GetFilters</span>(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">string</span> ActionName &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> ControllerDescriptor ControllerDescriptor &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">string</span> UniqueId &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>繼承這個抽象類的子類就會擁有一種特性描述此次執行<code>Action</code>方法特徵和如何去使用<code>Execute</code>方法.</p>
<h3 id="ReflectedActionDescriptor-取得ActionMethod參數資訊"><a href="#ReflectedActionDescriptor-取得ActionMethod參數資訊" class="headerlink" title="ReflectedActionDescriptor 取得ActionMethod參數資訊"></a>ReflectedActionDescriptor 取得ActionMethod參數資訊</h3><p>上面提到<code>ReflectedControllerDescriptor</code>的<code>ActionDescriptor FindAction(ControllerContext controllerContext, string actionName)</code>預設使用<code>ReflectedActionDescriptor</code>.</p>
<p><code>ReflectedActionDescriptor</code>類別顧名思義就是依靠反射來取得<code>Action</code>的資訊</p>
<p>切入重點我們來看看<code>ReflectedActionDescriptor</code>如何實現<code>Execute</code>方法的吧</p>
<ol>
<li><code>MethodInfo</code>是從<code>ReflectedControllerDescriptor</code>利用反射取得執行<code>Action</code>方法資訊.</li>
<li>利用<code>ExtractParameterFromDictionary</code>方法將<code>IDictionary&lt;string, object&gt; parameters</code>傳入參數轉成可傳入方法物件.</li>
<li>透過<code>ActionMethodDispatcher</code>物件<code>Execute</code>方法執行<code>Action</code>方法(<code>ActionMethodDispatcher</code>透過<code>Expression</code>表達式動態建立方法並呼叫)</li>
</ol>
<blockquote>
<p><code>ActionMethodDispatcher</code>的<code>Expression</code>表達式詳解會在後面做介紹</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> MethodInfo MethodInfo &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">object</span> <span class="title">Execute</span>(<span class="params">ControllerContext controllerContext, IDictionary&lt;<span class="keyword">string</span>, <span class="keyword">object</span>&gt; parameters</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//....</span></span><br><span class="line">	ParameterInfo[] parameterInfos = MethodInfo.GetParameters();</span><br><span class="line">	<span class="keyword">object</span>[] parametersArray = <span class="keyword">new</span> <span class="keyword">object</span>[parameterInfos.Length];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; parameterInfos.Length; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		ParameterInfo parameterInfo = parameterInfos[i];</span><br><span class="line">		<span class="keyword">object</span> parameter = ExtractParameterFromDictionary(parameterInfo, parameters, MethodInfo);</span><br><span class="line">		parametersArray[i] = parameter;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	ActionMethodDispatcher dispatcher = DispatcherCache.GetDispatcher(MethodInfo);</span><br><span class="line">	<span class="keyword">object</span> actionReturnValue = dispatcher.Execute(controllerContext.Controller, parametersArray);</span><br><span class="line">	<span class="keyword">return</span> actionReturnValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p><code>actionReturnValue</code> 是<code>Action</code>方法的回傳值.</p>
</blockquote>
<h2 id="取得Action方法執行參數"><a href="#取得Action方法執行參數" class="headerlink" title="取得Action方法執行參數"></a>取得Action方法執行參數</h2><p>上面提到<code>Action</code>使用參數會轉換到一個<code>IDictionary&lt;string, object&gt;</code>裡面.</p>
<ul>
<li><code>key</code>：參數名稱</li>
<li><code>value</code>：參數值</li>
</ul>
<blockquote>
<p>在<code>ActionFitlerAttribute.OnActionExcuting</code>重載方法,參數<code>ActionExecutingContext</code>物件中有一個屬性<code>public virtual IDictionary&lt;string, object&gt; ActionParameters { get; set; }</code><br>他透過<code>IValueProvider</code>解析完傳入字串轉換成一個存放參數字典.</p>
</blockquote>
<p>讓我們了解一下這部分是如何完成.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">virtual</span> IDictionary&lt;<span class="keyword">string</span>, <span class="keyword">object</span>&gt; <span class="title">GetParameterValues</span>(<span class="params">ControllerContext controllerContext, ActionDescriptor actionDescriptor</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Dictionary&lt;<span class="keyword">string</span>, <span class="keyword">object</span>&gt; parametersDict = <span class="keyword">new</span> Dictionary&lt;<span class="keyword">string</span>, <span class="keyword">object</span>&gt;(StringComparer.OrdinalIgnoreCase);</span><br><span class="line">	ParameterDescriptor[] parameterDescriptors = actionDescriptor.GetParameters();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">foreach</span> (ParameterDescriptor parameterDescriptor <span class="keyword">in</span> parameterDescriptors)</span><br><span class="line">	&#123;</span><br><span class="line">		parametersDict[parameterDescriptor.ParameterName] = GetParameterValue(controllerContext, parameterDescriptor);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> parametersDict;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>在呼叫<code>GetParameters</code>方法返回一個<code>ParameterDescriptor[]</code>陣列(<code>ParameterDescriptor</code>存放參數相關資訊),主要呼叫<code>ActionDescriptorHelper.GetParameters</code>,利用反射取得<code>MethodInfo.GetParameters</code>在將裡面資訊封裝到<code>ReflectedParameterDescriptor</code>物件中.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> ParameterDescriptor[] <span class="title">GetParameters</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> ActionDescriptorHelper.GetParameters(<span class="keyword">this</span>, MethodInfo, <span class="keyword">ref</span> _parametersCache);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ParameterDescriptor[] <span class="title">GetParameters</span>(<span class="params">ActionDescriptor actionDescriptor, MethodInfo methodInfo, <span class="keyword">ref</span> ParameterDescriptor[] parametersCache</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ParameterDescriptor[] parameters = LazilyFetchParametersCollection(actionDescriptor, methodInfo, <span class="keyword">ref</span> parametersCache);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> (ParameterDescriptor[])parameters.Clone();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> ParameterDescriptor[] <span class="title">LazilyFetchParametersCollection</span>(<span class="params">ActionDescriptor actionDescriptor, MethodInfo methodInfo, <span class="keyword">ref</span> ParameterDescriptor[] parametersCache</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> DescriptorUtil.LazilyFetchOrCreateDescriptors(</span><br><span class="line">		cacheLocation: <span class="keyword">ref</span> parametersCache,</span><br><span class="line">		initializer: (CreateDescriptorState state) =&gt; state.MethodInfo.GetParameters(),</span><br><span class="line">		converter: (ParameterInfo parameterInfo, CreateDescriptorState state) =&gt; <span class="keyword">new</span> ReflectedParameterDescriptor(parameterInfo, state.ActionDescriptor),</span><br><span class="line">		state: <span class="keyword">new</span> CreateDescriptorState() &#123; ActionDescriptor = actionDescriptor, MethodInfo = methodInfo &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><code>ReflectedParameterDescriptor</code>包含幾個重要屬性</p>
<ol>
<li><code>ParameterType</code>:參數類型</li>
<li><code>ParameterName</code>:參數名稱</li>
<li><code>DefaultValue</code>:參數預設值</li>
</ol>
<p>上面幾個為<code>Action</code>參數元數據資料.</p>
<p>利用<code>ReflectedParameterDescriptor</code>之前封裝方法參數資訊對於<code>GetParameterValue</code>方法執行物件建立.</p>
<p><code>GetParameterValue</code>方法中有幾個重要的<code>Field</code></p>
<ul>
<li><code>IModelBinder</code>使用<code>DefaultModelBinder</code>來綁定使用參數</li>
<li><code>IValueProvider</code>依靠<code>ValueProviderFactories</code>來取使用哪個Provider得並綁訂傳入參數資料.</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">virtual</span> <span class="keyword">object</span> <span class="title">GetParameterValue</span>(<span class="params">ControllerContext controllerContext, ParameterDescriptor parameterDescriptor</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Type parameterType = parameterDescriptor.ParameterType;</span><br><span class="line">	IModelBinder binder = GetModelBinder(parameterDescriptor);</span><br><span class="line">	IValueProvider valueProvider = controllerContext.Controller.ValueProvider;</span><br><span class="line">	<span class="keyword">string</span> parameterName = parameterDescriptor.BindingInfo.Prefix ?? parameterDescriptor.ParameterName;</span><br><span class="line">	Predicate&lt;<span class="keyword">string</span>&gt; propertyFilter = GetPropertyFilter(parameterDescriptor);</span><br><span class="line"></span><br><span class="line">	ModelBindingContext bindingContext = <span class="keyword">new</span> ModelBindingContext()</span><br><span class="line">	&#123;</span><br><span class="line">		FallbackToEmptyPrefix = (parameterDescriptor.BindingInfo.Prefix == <span class="literal">null</span>), <span class="comment">// only fall back if prefix not specified</span></span><br><span class="line">		ModelMetadata = ModelMetadataProviders.Current.GetMetadataForType(<span class="literal">null</span>, parameterType),</span><br><span class="line">		ModelName = parameterName,</span><br><span class="line">		ModelState = controllerContext.Controller.ViewData.ModelState,</span><br><span class="line">		PropertyFilter = propertyFilter,</span><br><span class="line">		ValueProvider = valueProvider</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">object</span> result = binder.BindModel(controllerContext, bindingContext);</span><br><span class="line">	<span class="keyword">return</span> result ?? parameterDescriptor.DefaultValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結:"></a>小結:</h2><p>介紹<code>Action</code>參數綁定使用點和前置動作(這邊會發現很多<code>Interface</code>和<code>abstract class</code>,因為<strong>MVC</strong>提供許多可以替換點給開發人員擴充)</p>
<p><code>InvokeAction</code>方法很重要,他的職責是執行使用者請求的<code>Action</code>方法,在此方法中有兩個核心物件.</p>
<ul>
<li><code>ControllerDescriptor</code></li>
<li><code>ActionDescriptor</code></li>
</ul>
<p>這兩個物件封裝後續呼叫<code>Action</code>需要的資訊,特別是<code>ActionDescriptor</code>裡面有一個<code>Execute</code>方法(靠他來呼叫<code>Action</code>方法)</p>
<p>另外也簡單介紹<code>IDictionary&lt;string, object&gt;</code>這個字典封裝了傳入<code>Action</code>方法的參數,</p>
<p>最後帶了點<code>Model</code>綁訂相關使用類別</p>
<p><strong>此文作者</strong>：Daniel Shih(石頭)<br><strong>此文地址</strong>： <a href="https://isdaniel.github.io/ithelp-day17/">https://isdaniel.github.io/ithelp-day17/</a> <br><strong>版權聲明</strong>：本博客所有文章除特別聲明外，均採用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC90dy8=" title="https://creativecommons.org/licenses/by-nc-sa/3.0/tw/">CC BY-NC-SA 3.0 TW<i class="fa fa-external-link"></i></span> 許可協議。轉載請註明出處！</p>
]]></content>
      <categories>
        <category>11th鐵人賽</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>Asp.net</tag>
        <tag>Asp.net-MVC</tag>
        <tag>SourceCode</tag>
        <tag>11th鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>提供ModelBing幾個重要功臣(Model) (第18天)</title>
    <url>/ithelp-day18/</url>
    <content><![CDATA[<h1 id="Agenda"><a href="#Agenda" class="headerlink" title="Agenda"></a>Agenda<!-- omit in toc --></h1><ul>
<li><a href="#%e5%89%8d%e8%a8%80">前言</a></li>
<li><a href="#imodelbinderdefaultmodelbinder">IModelBinder(DefaultModelBinder)</a><ul>
<li><a href="#modelbinders">ModelBinders</a></li>
<li><a href="#modelbinderdictionary">ModelBinderDictionary</a></li>
</ul>
</li>
<li><a href="#ivalueprovider-%e6%8f%90%e4%be%9b%e5%8f%83%e6%95%b8%e5%a1%ab%e5%80%bc">IValueProvider 提供參數填值</a><ul>
<li><a href="#valueprovider%e5%b7%a5%e5%bb%a0%e9%9b%86%e5%90%88valueproviderfactories">ValueProvider工廠集合(ValueProviderFactories)</a></li>
</ul>
</li>
<li><a href="#valueproviderfactory">ValueProviderFactory</a><ul>
<li><a href="#jsonvalueproviderfactory">JsonValueProviderFactory</a></li>
</ul>
</li>
<li><a href="#%e5%8f%96%e5%be%97ivalueprovider">取得IValueProvider</a><ul>
<li><a href="#namevaluecollectionvalueprovider">NameValueCollectionValueProvider</a></li>
</ul>
</li>
<li><a href="#%e5%b0%8f%e7%b5%90">小結：</a></li>
</ul>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>MVC</strong>的<code>Model-Binding</code>建立複雜物件(牽扯到複雜模型綁定.)</p>
<p>這篇會跟大家介紹<strong>MVC</strong>是如何把達成這個複雜的動作</p>
<blockquote>
<p>我有做一個可以針對於<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2lzZGFuaWVsL0FzcC5uZXQtTVZDLURlYnVnZXI=" title="https://github.com/isdaniel/Asp.net-MVC-Debuger">Asp.net MVC Debugger<i class="fa fa-external-link"></i></span>的專案，只要下中斷點就可輕易進入Asp.net MVC原始碼.</p>
</blockquote>
<h2 id="IModelBinder-DefaultModelBinder"><a href="#IModelBinder-DefaultModelBinder" class="headerlink" title="IModelBinder(DefaultModelBinder)"></a>IModelBinder(DefaultModelBinder)</h2><p><code>DefaultModelBinder</code>將Http請求傳來資料轉換為強型別物件,<code>DefaultModelBinder</code>是如何取得使用<code>Model</code>資料呢?</p>
<blockquote>
<p>實現<code>IValueProvider</code>來處理。</p>
</blockquote>
<h3 id="ModelBinders"><a href="#ModelBinders" class="headerlink" title="ModelBinders"></a>ModelBinders</h3><p><code>IModelBinder.BindModel</code>方法使用兩個參數</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">object</span> <span class="title">BindModel</span>(<span class="params">ControllerContext controllerContext, ModelBindingContext bindingContext</span>)</span></span><br></pre></td></tr></table></figure></div>
<ol>
<li><code>ControllerContext</code>:<code>Controller</code>資訊，</li>
<li><code>ModelBindingContext</code>:當前參數綁定資訊</li>
</ol>
<p><code>BindModel</code>方法機於<code>Http</code>請求傳送資料進行<code>Model</code>綁定(對於<code>Action</code>方法使用參數),其中<code>ModelBindingContext</code>參數會提供綁定使用的重要物件成員.</p>
<blockquote>
<p>關於<code>ModelBindingContext</code>建立我們會在後續部分進行的單獨介紹.</p>
</blockquote>
<p>在<code>IModelBinder.BindModel</code>方法中主要透過兩個重要<code>internal</code>方法.</p>
<ul>
<li><code>BindComplexModel</code>:複雜參數綁定</li>
<li><code>BindSimpleModel</code>:簡單參數綁定</li>
</ul>
<p>下圖可以表示<code>SimpleModel</code>和<code>ComplexModel</code></p>
<p><img src="https://raw.githubusercontent.com/isdaniel/MyBlog/master/source/images/itHelp/17/UML_Model.jpg" alt="BindSimpleModel"></p>
<blockquote>
<p><code>ComplexModel</code>一個人可擁有多個房子,所以<code>Person</code>類別擁有<code>HouseCollection</code>引用.<br>取得使用<code>ModelBinder</code>機制。</p>
</blockquote>
<p>取得<code>ModelBinder</code>會依照下面順序</p>
<ol>
<li>參數掛有<code>ModelBinderAttribute</code>標籤並將<code>BinderType</code>屬性指向一個繼承<code>IModelBinder</code>型別.</li>
<li>參數掛有繼承<code>CustomModelBinderAttribute</code>類型</li>
<li>透過<code>ModelBinderProviderCollection</code>(預設<strong>MVC</strong>沒有提供<code>ModelBinderProvider</code>)</li>
<li>預設<code>DefaultModelBinder</code></li>
</ol>
<p>下面兩個使用<code>ModelBinder</code>都是<code>DefaultModelBinder</code>,但一個是使用第一點,另一個使用第四點.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ActionResult <span class="title">HttpModules</span>(<span class="params">Person p</span>)</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ActionResult <span class="title">HttpModules</span>(<span class="params">[ModelBinder(<span class="keyword">typeof</span>(DefaultModelBinder</span>))]Person p)</span></span><br></pre></td></tr></table></figure></div>
<p>在<code>Global.cs</code>可透過<code>ModelBinders.Binders.Add</code>方法註冊綁定類型.</p>
<p>如下面程式碼.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line">ModelBinders.Binders.Add(<span class="keyword">typeof</span>(Arg),<span class="keyword">new</span> FooModelBinder());</span><br></pre></td></tr></table></figure></div>
<h3 id="ModelBinderDictionary"><a href="#ModelBinderDictionary" class="headerlink" title="ModelBinderDictionary"></a>ModelBinderDictionary</h3><p>一般參數透過<code>DefaultModelBinder</code>來幫我們完成參數綁定.</p>
<p>但有些特別的資料需要透過<code>ModelBinderDictionary</code>取得使用<code>ModelBinder</code>,例如上傳檔案,我們可以使用<code>HttpPostedFileBase</code>來取得檔案資訊流.</p>
<p>那是因為在<code>ModelBinderDictionary</code>有註冊一個<code>HttpPostedFileBaseModelBinder</code>來幫我們做解析.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> ModelBinderDictionary <span class="title">CreateDefaultBinderDictionary</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ModelBinderDictionary binders = <span class="keyword">new</span> ModelBinderDictionary()</span><br><span class="line">    &#123;</span><br><span class="line">        &#123; <span class="keyword">typeof</span>(HttpPostedFileBase), <span class="keyword">new</span> HttpPostedFileBaseModelBinder() &#125;,</span><br><span class="line">        &#123; <span class="keyword">typeof</span>(<span class="keyword">byte</span>[]), <span class="keyword">new</span> ByteArrayModelBinder() &#125;,</span><br><span class="line">        &#123; <span class="keyword">typeof</span>(Binary), <span class="keyword">new</span> LinqBinaryModelBinder() &#125;,</span><br><span class="line">        &#123; <span class="keyword">typeof</span>(CancellationToken), <span class="keyword">new</span> CancellationTokenModelBinder() &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> binders;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="IValueProvider-提供參數填值"><a href="#IValueProvider-提供參數填值" class="headerlink" title="IValueProvider 提供參數填值"></a>IValueProvider 提供參數填值</h2><p><code>IValueProvider</code>介面有一個重要方法<code>GetValue</code>會返回<code>ValueProviderResult</code>物件對於<code>ValueProvider</code>參數封裝</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="function">ValueProviderResult <span class="title">GetValue</span>(<span class="params"><span class="keyword">string</span> key</span>)</span></span><br></pre></td></tr></table></figure></div>
<h3 id="ValueProvider工廠集合-ValueProviderFactories"><a href="#ValueProvider工廠集合-ValueProviderFactories" class="headerlink" title="ValueProvider工廠集合(ValueProviderFactories)"></a>ValueProvider工廠集合(ValueProviderFactories)</h3><p>在<code>ControllerBase</code>類別中有一個屬性<code>ValueProvider</code>設定參數填值動作</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> IValueProvider ValueProvider</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">get</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (_valueProvider == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            _valueProvider = ValueProviderFactories.Factories.GetValueProvider(ControllerContext);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> _valueProvider;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">set</span> &#123; _valueProvider = <span class="keyword">value</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><strong>Http</strong>傳送參數可能又多種模式(<code>Post Form</code>,<code>Query String</code>,<code>Ajax</code>….)</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">ValueProviderFactories</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> ValueProviderFactoryCollection _factories = <span class="keyword">new</span> ValueProviderFactoryCollection()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">new</span> ChildActionValueProviderFactory(),</span><br><span class="line">        <span class="keyword">new</span> FormValueProviderFactory(),</span><br><span class="line">        <span class="keyword">new</span> JsonValueProviderFactory(),</span><br><span class="line">        <span class="keyword">new</span> RouteDataValueProviderFactory(),</span><br><span class="line">        <span class="keyword">new</span> QueryStringValueProviderFactory(),</span><br><span class="line">        <span class="keyword">new</span> HttpFileCollectionValueProviderFactory(),</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ValueProviderFactoryCollection Factories</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> _factories; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<ol>
<li><code>ChildActionValueProviderFactory</code>：取得另一個呼叫<span class="exturl" data-url="bWFpbHRvOmBASHRtbC5BY3Rpb24=" title="mailto:`@Html.Action">`@Html.Action<i class="fa fa-external-link"></i></span>`傳來<strong>Model</strong>資料</li>
<li><code>FormValueProviderFactory</code>：取得<code>HTTP POST</code>送來的資料</li>
<li><code>JsonValueProviderFactory</code>：取得<code>JSON</code>資料(<code>Content-Type = application/json</code>)</li>
<li><code>RouteDataValueProviderFactory</code>：取得從網址路徑取得到路由參數值</li>
<li><code>QueryStringValueProviderFactory</code>：取得從<code>Http</code>請求的<code>Query String</code>資料</li>
<li><code>HttpFileCollectionValueProviderFactory</code>：取得檔案上傳功能傳來檔案</li>
</ol>
<p>如果此次請求匹配到多個<code>ValueProvider</code>機制會怎處理?</p>
<blockquote>
<p>會按照上面<code>ProviderFactory</code>設定順序來排執行優先順序來填值</p>
</blockquote>
<h2 id="ValueProviderFactory"><a href="#ValueProviderFactory" class="headerlink" title="ValueProviderFactory"></a>ValueProviderFactory</h2><p><strong>MVC</strong>利用工廠模式透過<code>ValueProviderFactory</code>實現的工廠來<code>IValueProvider</code>填值提供者物件.</p>
<h3 id="JsonValueProviderFactory"><a href="#JsonValueProviderFactory" class="headerlink" title="JsonValueProviderFactory"></a>JsonValueProviderFactory</h3><p>在<code>ValueProviderFactory</code>IValueProvider GetValueProvider</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">JsonValueProviderFactory</span> : <span class="title">ValueProviderFactory</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">AddToBackingStore</span>(<span class="params">EntryLimitedDictionary backingStore, <span class="keyword">string</span> prefix, <span class="keyword">object</span> <span class="keyword">value</span></span>)</span></span><br><span class="line"><span class="function"></span>	&#123;</span><br><span class="line">		IDictionary&lt;<span class="keyword">string</span>, <span class="keyword">object</span>&gt; d = <span class="keyword">value</span> <span class="keyword">as</span> IDictionary&lt;<span class="keyword">string</span>, <span class="keyword">object</span>&gt;;</span><br><span class="line">		<span class="keyword">if</span> (d != <span class="literal">null</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">foreach</span> (KeyValuePair&lt;<span class="keyword">string</span>, <span class="keyword">object</span>&gt; entry <span class="keyword">in</span> d)</span><br><span class="line">			&#123;</span><br><span class="line">				AddToBackingStore(backingStore, MakePropertyKey(prefix, entry.Key), entry.Value);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		IList l = <span class="keyword">value</span> <span class="keyword">as</span> IList;</span><br><span class="line">		<span class="keyword">if</span> (l != <span class="literal">null</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; l.Count; i++)</span><br><span class="line">			&#123;</span><br><span class="line">				AddToBackingStore(backingStore, MakeArrayKey(prefix, i), l[i]);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// primitive</span></span><br><span class="line">		backingStore.Add(prefix, <span class="keyword">value</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">object</span> <span class="title">GetDeserializedObject</span>(<span class="params">ControllerContext controllerContext</span>)</span></span><br><span class="line"><span class="function"></span>	&#123;</span><br><span class="line">		<span class="keyword">if</span> (!controllerContext.HttpContext.Request.ContentType.StartsWith(<span class="string">"application/json"</span>, StringComparison.OrdinalIgnoreCase))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">// not JSON request</span></span><br><span class="line">			<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		StreamReader reader = <span class="keyword">new</span> StreamReader(controllerContext.HttpContext.Request.InputStream);</span><br><span class="line">		<span class="keyword">string</span> bodyText = reader.ReadToEnd();</span><br><span class="line">		<span class="keyword">if</span> (String.IsNullOrEmpty(bodyText))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">// no JSON data</span></span><br><span class="line">			<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		JavaScriptSerializer serializer = <span class="keyword">new</span> JavaScriptSerializer();</span><br><span class="line">		<span class="keyword">object</span> jsonData = serializer.DeserializeObject(bodyText);</span><br><span class="line">		<span class="keyword">return</span> jsonData;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">override</span> IValueProvider <span class="title">GetValueProvider</span>(<span class="params">ControllerContext controllerContext</span>)</span></span><br><span class="line"><span class="function"></span>	&#123;</span><br><span class="line">		<span class="keyword">if</span> (controllerContext == <span class="literal">null</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="string">"controllerContext"</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">object</span> jsonData = GetDeserializedObject(controllerContext);</span><br><span class="line">		<span class="keyword">if</span> (jsonData == <span class="literal">null</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		Dictionary&lt;<span class="keyword">string</span>, <span class="keyword">object</span>&gt; backingStore = <span class="keyword">new</span> Dictionary&lt;<span class="keyword">string</span>, <span class="keyword">object</span>&gt;(StringComparer.OrdinalIgnoreCase);</span><br><span class="line">		EntryLimitedDictionary backingStoreWrapper = <span class="keyword">new</span> EntryLimitedDictionary(backingStore);</span><br><span class="line">		AddToBackingStore(backingStoreWrapper, String.Empty, jsonData);</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> DictionaryValueProvider&lt;<span class="keyword">object</span>&gt;(backingStore, CultureInfo.CurrentCulture);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><img src="https://raw.githubusercontent.com/isdaniel/MyBlog/master/source/images/itHelp/17/ValueProvider_Factory.jpg" alt="UML_Model"></p>
<h2 id="取得IValueProvider"><a href="#取得IValueProvider" class="headerlink" title="取得IValueProvider"></a>取得IValueProvider</h2><p>透過<code>ValueProviderFactory</code>返回相對應的<code>IValueProvider</code>物件.</p>
<p>下面介紹幾個實現<code>ValueProvider</code>物件</p>
<h3 id="NameValueCollectionValueProvider"><a href="#NameValueCollectionValueProvider" class="headerlink" title="NameValueCollectionValueProvider"></a>NameValueCollectionValueProvider</h3><p><code>NameValueCollectionValueProvider</code>可從<code>NameValueCollection</code>集合取得參數.</p>
<p>因為<code>Request.Form</code>和<code>Request.QueryString</code>都是<code>NameValueCollection</code>類型集合.</p>
<blockquote>
<p>　這個方法很巧妙利用一個共同參數類型簽章來達成多態轉折點</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">virtual</span> NameValueCollection Form</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">get</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//....</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">virtual</span> NameValueCollection QueryString</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">get</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//....</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><strong>Http</strong>傳值到<strong>Server</strong>有許多方式,這裡介紹<strong>MVC</strong>利用哪個<strong>ValueProvider</strong>將<code>Form</code>跟<code>QueryString</code>填值到物件上,很巧妙使用<code>NameValueCollectionValueProvider</code>建構子參數<code>NameValueCollection</code>決定是要使用<code>Form</code>或<code>QueryString</code>填充值到參數.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">FormValueProvider</span> : <span class="title">NameValueCollectionValueProvider</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">FormValueProvider</span>(<span class="params">ControllerContext controllerContext</span>)</span></span><br><span class="line"><span class="function">		: <span class="title">this</span>(<span class="params">controllerContext, new UnvalidatedRequestValuesWrapper(controllerContext.HttpContext.Request.Unvalidated</span>))</span></span><br><span class="line"><span class="function"></span>	&#123;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">internal</span> <span class="title">FormValueProvider</span>(<span class="params">ControllerContext controllerContext, IUnvalidatedRequestValues unvalidatedValues</span>)</span></span><br><span class="line"><span class="function">		: <span class="title">base</span>(<span class="params">controllerContext.HttpContext.Request.Form, unvalidatedValues.Form, CultureInfo.CurrentCulture</span>)</span></span><br><span class="line"><span class="function"></span>	&#123;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">QueryStringValueProvider</span> : <span class="title">NameValueCollectionValueProvider</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">QueryStringValueProvider</span>(<span class="params">ControllerContext controllerContext</span>)</span></span><br><span class="line"><span class="function">		: <span class="title">this</span>(<span class="params">controllerContext, new UnvalidatedRequestValuesWrapper(controllerContext.HttpContext.Request.Unvalidated</span>))</span></span><br><span class="line"><span class="function"></span>	&#123;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">internal</span> <span class="title">QueryStringValueProvider</span>(<span class="params">ControllerContext controllerContext, IUnvalidatedRequestValues unvalidatedValues</span>)</span></span><br><span class="line"><span class="function">		: <span class="title">base</span>(<span class="params">controllerContext.HttpContext.Request.QueryString, unvalidatedValues.QueryString, CultureInfo.InvariantCulture</span>)</span></span><br><span class="line"><span class="function"></span>	&#123;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>實現<code>IValueProvider</code>物件主要會依靠<code>GetValue</code>方法取得<code>ValueProviderResult</code>.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">Serializable</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ValueProviderResult</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> CultureInfo _staticCulture = CultureInfo.InvariantCulture;</span><br><span class="line">	<span class="keyword">private</span> CultureInfo _instanceCulture;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="title">ValueProviderResult</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>	&#123;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ValueProviderResult</span>(<span class="params"><span class="keyword">object</span> rawValue, <span class="keyword">string</span> attemptedValue, CultureInfo culture</span>)</span></span><br><span class="line"><span class="function"></span>	&#123;</span><br><span class="line">		RawValue = rawValue;</span><br><span class="line">		AttemptedValue = attemptedValue;</span><br><span class="line">		Culture = culture;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">string</span> AttemptedValue &#123; <span class="keyword">get</span>; <span class="keyword">protected</span> <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> CultureInfo Culture</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">get</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (_instanceCulture == <span class="literal">null</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				_instanceCulture = _staticCulture;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> _instanceCulture;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">protected</span> <span class="keyword">set</span> &#123; _instanceCulture = <span class="keyword">value</span>; &#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">object</span> RawValue &#123; <span class="keyword">get</span>; <span class="keyword">protected</span> <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">object</span> <span class="title">ConvertTo</span>(<span class="params">Type type</span>)</span></span><br><span class="line"><span class="function"></span>	&#123;</span><br><span class="line">		<span class="keyword">return</span> ConvertTo(type, <span class="literal">null</span> <span class="comment">/* culture */</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">object</span> <span class="title">ConvertTo</span>(<span class="params">Type type, CultureInfo culture</span>)</span></span><br><span class="line"><span class="function"></span>	&#123;</span><br><span class="line">		<span class="comment">//....</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><code>ValueProviderResult</code>對於<code>ValueProvider</code>物件做封裝，一般存放<code>Http</code>參數擁有兩個只讀屬性</p>
<ol>
<li><code>RawValue</code>表示物件值</li>
<li><code>AttemptedValue</code>主要用於顯示</li>
</ol>
<p><code>ValueProviderResult</code>提供兩個<code>ConvertTo</code>重載方法實現向指定目標類型轉換。</p>
<p>某些類型格式化依賴於相應的語言文化（比如時間、日期和貨幣等），這個語言文化通過<code>Culture</code>屬性來達成.</p>
<p>最終會呼叫一個<code>UnwrapPossibleArrayType</code>方法來建立物件</p>
<h2 id="小結："><a href="#小結：" class="headerlink" title="小結："></a>小結：</h2><p>在<code>ControllerActionInvoker.GetParameterValue</code>取得參數方法,<code>ModelBing</code>動作有兩個重要的屬性</p>
<ul>
<li><code>IValueProvider</code>:提供如何填值</li>
<li><code>IModelBinder</code>:建立物件(綁定關聯) 預設使用<code>DefaultModelBinder</code>類別.</li>
</ul>
<p>目前分享的<code>IValueProvider</code>和<code>IModelBinder</code> UML類別關聯圖如下</p>
<p><img src="https://raw.githubusercontent.com/isdaniel/MyBlog/master/source/images/itHelp/17/UML_Model.jpg" alt="UML_Model"></p>
<p>下篇會介紹<code>ModelBind</code>模型綁定重點邏輯,有分簡單參數綁定和複雜參數綁定</p>
<ul>
<li><code>BindComplexModel</code></li>
<li><code>BindSimpleModel</code></li>
</ul>
<p><strong>此文作者</strong>：Daniel Shih(石頭)<br><strong>此文地址</strong>： <a href="https://isdaniel.github.io/ithelp-day18/">https://isdaniel.github.io/ithelp-day18/</a> <br><strong>版權聲明</strong>：本博客所有文章除特別聲明外，均採用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC90dy8=" title="https://creativecommons.org/licenses/by-nc-sa/3.0/tw/">CC BY-NC-SA 3.0 TW<i class="fa fa-external-link"></i></span> 許可協議。轉載請註明出處！</p>
]]></content>
      <categories>
        <category>11th鐵人賽</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>Asp.net</tag>
        <tag>Asp.net-MVC</tag>
        <tag>SourceCode</tag>
        <tag>11th鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>Http參數如何綁定到Action參數上(簡單和複雜模型綁定探討) (第19天)</title>
    <url>/ithelp-day19/</url>
    <content><![CDATA[<h1 id="Agenda"><a href="#Agenda" class="headerlink" title="Agenda"></a>Agenda<!-- omit in toc --></h1><ul>
<li><a href="#%e5%89%8d%e8%a8%80">前言</a></li>
<li><a href="#modelmetadata-%e5%85%83%e6%95%b8%e6%93%9a%e5%84%b2%e5%ad%98%e5%8f%83%e6%95%b8%e8%b3%87%e6%96%99">ModelMetadata 元數據儲存參數資料</a></li>
<li><a href="#bindsimplemodel-%e7%b0%a1%e5%96%ae%e6%a8%a1%e5%9e%8b%e7%b6%81%e5%ae%9a">BindSimpleModel 簡單模型綁定</a></li>
<li><a href="#bindcomplexmodel-%e8%a4%87%e9%9b%9c%e6%a8%a1%e5%9e%8b%e7%b6%81%e5%ae%9a">BindComplexModel 複雜模型綁定</a></li>
<li><a href="#%e5%b0%8f%e7%b5%90">小結：</a><ul>
<li><a href="#%e7%b0%a1%e5%96%ae%e6%a8%a1%e5%9e%8b%e7%b6%81%e5%ae%9a-vs-%e8%a4%87%e9%9b%9c%e6%a8%a1%e5%9e%8b%e7%b6%81%e5%ae%9a">簡單模型綁定 vs 複雜模型綁定</a></li>
</ul>
</li>
</ul>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>IValueProvider</code>物件透過一個<code>ValueProviderFactory</code>工廠來產生</p>
<p><code>Action</code>方法綁定<code>Model</code>参数由實現<code>IModelBinder</code>的介面<code>ModelBinder（DefaultModelBinder）</code>物件來實現</p>
<p>在<code>IModelBinder</code>介面中有一個重要的方法<code>object BindModel</code>取得<code>Model</code>參數資料.</p>
<p>但在<code>Http</code>請求傳送參數極為複雜是如何將參數動態綁定在<code>Action</code>參數上呢?</p>
<p>最常見的<strong>Json</strong>參數透過<code>POST Body</code>傳到AP端,經由<strong>MVC</strong> <code>BindModel</code>來取得參數物件資料.</p>
<p>如下方資料.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JSON"><figure class="iseeu highlight /json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">"Key"</span>:<span class="string">"123"</span>,</span><br><span class="line">   <span class="attr">"value"</span>:<span class="string">""</span>,</span><br><span class="line">   <span class="attr">"Adress"</span>:[<span class="string">"test133"</span>,<span class="string">"e2424"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RootObject</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Key &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> <span class="keyword">value</span> &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> List&lt;<span class="keyword">string</span>&gt; Adress &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>網路上有個工具可方便使用Json字串取得<code>c#</code> 對應<code>Model</code><span class="exturl" data-url="aHR0cDovL2pzb24yY3NoYXJwLmNvbS8=" title="http://json2csharp.com/">Json to c# model<i class="fa fa-external-link"></i></span></p>
</blockquote>
<p>本篇就和大家分享這個機制是如何達成的</p>
<blockquote>
<p>我有做一個可以針對於<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2lzZGFuaWVsL0FzcC5uZXQtTVZDLURlYnVnZXI=" title="https://github.com/isdaniel/Asp.net-MVC-Debuger">Asp.net MVC Debugger<i class="fa fa-external-link"></i></span>的專案，只要下中斷點就可輕易進入Asp.net MVC原始碼.</p>
</blockquote>
<h2 id="ModelMetadata-元數據儲存參數資料"><a href="#ModelMetadata-元數據儲存參數資料" class="headerlink" title="ModelMetadata 元數據儲存參數資料"></a>ModelMetadata 元數據儲存參數資料</h2><p><code>Model</code>參數類型可能是一個簡單字串或者是一個值類型，也可能是一個複雜類型物件。</p>
<p>對於一個複雜類型物件，基於類型本身和物件成員元數據通過一個<code>ModelMetadata</code>類別來達成</p>
<p>某個成員又可能是一個複雜類型物件，通過<code>ModelMetadata</code>物件表示<code>Model</code>狀態,所以<code>ModelMetadata</code>(元數據)實際上具有一個樹形層次化的資料結構.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ModelMetadata</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">public</span> Type ModelType &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">bool</span> IsComplexType &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">bool</span> IsNullableValueType &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">	<span class="keyword">public</span> Type ContainerType &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">object</span> Model &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">string</span> PropertyName &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">virtual</span> Dictionary&lt;<span class="keyword">string</span>, <span class="keyword">object</span>&gt; AdditionalValues &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">	<span class="keyword">protected</span> ModelMetadataProvider Provider &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">virtual</span> IEnumerable&lt;ModelMetadata&gt; Properties</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">get</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (_properties == <span class="literal">null</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				IEnumerable&lt;ModelMetadata&gt; originalProperties = Provider.GetMetadataForProperties(Model, RealModelType);</span><br><span class="line">				_propertiesInternal = SortProperties(originalProperties.AsArray());</span><br><span class="line">				_properties = <span class="keyword">new</span> ReadOnlyCollection&lt;ModelMetadata&gt;(_propertiesInternal);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> _properties;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>在<code>ModelMetadata</code>類別中有幾個重要的屬性.</p>
<ol>
<li><code>Provider(ModelMetadataProvider)</code>:存放當前物件下面一個<code>ModelMetadataProvider</code>資訊,<code>ModelMetadataProvider</code>主要是提供<code>ModelMetadata</code>是如何被產生(一般使用<code>CachedDataAnnotationsModelMetadataProvider</code>這個類別使用<code>MemoryCache</code>存放資訊)</li>
<li><code>IEnumerable&lt;ModelMetadata&gt;</code>:用來表示當前物件所使用屬性資訊<code>ModelMetadata</code>集合</li>
<li><code>IsComplexType</code>:判斷是否是複雜模型.</li>
<li><code>ContainerType</code>:父節點類別型態(可以看做樹狀結構,可當作存放根結點類型)</li>
<li><code>ModelType</code>:目前屬性或參數的類型.</li>
<li><code>Model</code>:綁定完使用的參數</li>
</ol>
<p>假如這邊有兩個類別<code>Person</code>,<code>AddressInfo</code>且一個<code>Person</code>可以擁有多個地址</p>
<p>這裡就會呈現一對多關係如下圖</p>
<p><img src="https://raw.githubusercontent.com/isdaniel/MyBlog/master/source/images/itHelp/18/UML_Relation.png" alt="UML_Model"></p>
<blockquote>
<p>就像大樹支點和葉子,這個屬性可能是葉子也可能是別人的支點.</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> Age&#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> IEnumerable&lt;AddressInfo&gt; Address &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AddressInfo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>上面類別關係圖就是簡單表示複雜模型</p>
<p>通過上面的介紹我們知道表示<code>Model</code>元數據<code>ModelMetadata</code>具有一個樹形層次結構</p>
<p>在每個<code>ModelMetadata</code>內部都有一個型別為<code>IEnumerable&lt;ModelMetadata&gt;</code>的<code>Properties</code>屬性來引用它的下級<code>ModelMetadata</code>，這就形成了一個無限巢狀的後設資料表示結構.</p>
<p><img src="https://raw.githubusercontent.com/isdaniel/MyBlog/master/source/images/itHelp/18/metadata_uml.png" alt="UML_Model"></p>
<p>此圖可以表示<code>ModelMetadata</code>跟<code>Person</code>類別屬性的關係.</p>
<h2 id="BindSimpleModel-簡單模型綁定"><a href="#BindSimpleModel-簡單模型綁定" class="headerlink" title="BindSimpleModel 簡單模型綁定"></a>BindSimpleModel 簡單模型綁定</h2><p>在上面介紹了<code>ModelMetadata</code>這個類別儲存了參數的各個資訊.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">internal</span> <span class="keyword">object</span> <span class="title">BindSimpleModel</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">		ControllerContext controllerContext, </span></span></span><br><span class="line"><span class="function"><span class="params">		ModelBindingContext bindingContext, </span></span></span><br><span class="line"><span class="function"><span class="params">		ValueProviderResult valueProviderResult</span></span></span><br><span class="line"><span class="function"><span class="params">	</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	bindingContext.ModelState.SetModelValue(bindingContext.ModelName, valueProviderResult);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (bindingContext.ModelType.IsInstanceOfType(valueProviderResult.RawValue))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> valueProviderResult.RawValue;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (bindingContext.ModelType != <span class="keyword">typeof</span>(<span class="keyword">string</span>))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (bindingContext.ModelType.IsArray)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">object</span> modelArray = ConvertProviderResult(bindingContext.ModelState, bindingContext.ModelName, valueProviderResult, bindingContext.ModelType);</span><br><span class="line">			<span class="keyword">return</span> modelArray;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		Type enumerableType = TypeHelpers.ExtractGenericInterface(bindingContext.ModelType, <span class="keyword">typeof</span>(IEnumerable&lt;&gt;));</span><br><span class="line">		<span class="keyword">if</span> (enumerableType != <span class="literal">null</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">object</span> modelCollection = CreateModel(controllerContext, bindingContext, bindingContext.ModelType);</span><br><span class="line">			Type elementType = enumerableType.GetGenericArguments()[<span class="number">0</span>];</span><br><span class="line">			Type arrayType = elementType.MakeArrayType();</span><br><span class="line">			<span class="keyword">object</span> modelArray = ConvertProviderResult(bindingContext.ModelState, bindingContext.ModelName, valueProviderResult, arrayType);</span><br><span class="line"></span><br><span class="line">			Type collectionType = <span class="keyword">typeof</span>(ICollection&lt;&gt;).MakeGenericType(elementType);</span><br><span class="line">			<span class="keyword">if</span> (collectionType.IsInstanceOfType(modelCollection))</span><br><span class="line">			&#123;</span><br><span class="line">				CollectionHelpers.ReplaceCollection(elementType, modelCollection, modelArray);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> modelCollection;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">object</span> model = ConvertProviderResult(bindingContext.ModelState, bindingContext.ModelName, valueProviderResult, bindingContext.ModelType);</span><br><span class="line">	<span class="keyword">return</span> model;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">object</span> <span class="title">ConvertProviderResult</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">	ModelStateDictionary modelState, </span></span></span><br><span class="line"><span class="function"><span class="params">	<span class="keyword">string</span> modelStateKey, </span></span></span><br><span class="line"><span class="function"><span class="params">	ValueProviderResult valueProviderResult, </span></span></span><br><span class="line"><span class="function"><span class="params">	Type destinationType</span></span></span><br><span class="line"><span class="function"><span class="params">	</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">try</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">object</span> convertedValue = valueProviderResult.ConvertTo(destinationType);</span><br><span class="line">		<span class="keyword">return</span> convertedValue;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">catch</span> (Exception ex)</span><br><span class="line">	&#123;</span><br><span class="line">		modelState.AddModelError(modelStateKey, ex);</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>透過<code>ConvertProviderResult</code>來將類型轉換成簡單模型綁定使用的參數實例.</p>
<p>在<code>BindSimpleModel</code>中依照下面幾個規則來做參數物件建立.</p>
<ol>
<li><code>Array</code>:如果此參數是陣列,判斷此陣列型別並利用<code>ValueProviderResult.ConvertTo()</code>建立陣列</li>
<li><code>IEnumerable&lt;&gt;</code>:如果此參數是<code>IEnumerable&lt;&gt;</code>集合,判斷此<code>IEnumerable&lt;&gt;</code>型別<code>ValueProviderResult.ConvertTo()</code>建立集合</li>
<li><code>object</code>:不是上面的型別就直接使用<code>ValueProviderResult.ConvertTo()</code>建立物件.</li>
</ol>
<blockquote>
<p><code>ConvertTo()</code>方法在簡單模型物件建立起到一個很大的作用</p>
</blockquote>
<h2 id="BindComplexModel-複雜模型綁定"><a href="#BindComplexModel-複雜模型綁定" class="headerlink" title="BindComplexModel 複雜模型綁定"></a>BindComplexModel 複雜模型綁定</h2><p>在<code>BindModel</code>方法中有一個<code>BindComplexModel</code>方法是針對複雜模型產生的方法.</p>
<p>一開始先判斷<code>ModelBindingContext.Model</code>是否為<code>Null</code>如果是就會建立一個物件實例返回.</p>
<p>會依照下面機制判斷產生物件</p>
<ol>
<li>判斷參數類型是否<code>Array</code>產生一個相對應陣列集合</li>
<li>判斷參數類型是否<code>IDictionary&lt;,&gt;</code> and <code>ICollection&lt;&gt;</code>集合產生一個相對應陣列集合</li>
<li>判斷參數類型是否<code>IEnumerable&lt;&gt;</code>集合產生一個相對應陣列集合</li>
</ol>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">internal</span> <span class="keyword">object</span> <span class="title">BindComplexModel</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    ControllerContext controllerContext, </span></span></span><br><span class="line"><span class="function"><span class="params">    ModelBindingContext bindingContext</span></span></span><br><span class="line"><span class="function"><span class="params">    </span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">object</span> model = bindingContext.Model;</span><br><span class="line">	Type modelType = bindingContext.ModelType;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (model == <span class="literal">null</span> &amp;&amp; modelType.IsArray)</span><br><span class="line">	&#123;</span><br><span class="line">		Type elementType = modelType.GetElementType();</span><br><span class="line">		Type listType = <span class="keyword">typeof</span>(List&lt;&gt;).MakeGenericType(elementType);</span><br><span class="line">		<span class="keyword">object</span> collection = CreateModel(controllerContext, bindingContext, listType);</span><br><span class="line"></span><br><span class="line">		ModelBindingContext arrayBindingContext = <span class="keyword">new</span> ModelBindingContext()</span><br><span class="line">		&#123;</span><br><span class="line">			ModelMetadata = ModelMetadataProviders.Current.GetMetadataForType(() =&gt; collection, listType),</span><br><span class="line">			ModelName = bindingContext.ModelName,</span><br><span class="line">			ModelState = bindingContext.ModelState,</span><br><span class="line">			PropertyFilter = bindingContext.PropertyFilter,</span><br><span class="line">			ValueProvider = bindingContext.ValueProvider</span><br><span class="line">		&#125;;</span><br><span class="line">		IList list = (IList)UpdateCollection(controllerContext, arrayBindingContext, elementType);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (list == <span class="literal">null</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		Array array = Array.CreateInstance(elementType, list.Count);</span><br><span class="line">		list.CopyTo(array, <span class="number">0</span>);</span><br><span class="line">		<span class="keyword">return</span> array;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (model == <span class="literal">null</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		model = CreateModel(controllerContext, bindingContext, modelType);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	Type dictionaryType = TypeHelpers.ExtractGenericInterface(modelType, <span class="keyword">typeof</span>(IDictionary&lt;,&gt;));</span><br><span class="line">	<span class="keyword">if</span> (dictionaryType != <span class="literal">null</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		Type[] genericArguments = dictionaryType.GetGenericArguments();</span><br><span class="line">		Type keyType = genericArguments[<span class="number">0</span>];</span><br><span class="line">		Type valueType = genericArguments[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">		ModelBindingContext dictionaryBindingContext = <span class="keyword">new</span> ModelBindingContext()</span><br><span class="line">		&#123;</span><br><span class="line">			ModelMetadata = ModelMetadataProviders.Current.GetMetadataForType(() =&gt; model, modelType),</span><br><span class="line">			ModelName = bindingContext.ModelName,</span><br><span class="line">			ModelState = bindingContext.ModelState,</span><br><span class="line">			PropertyFilter = bindingContext.PropertyFilter,</span><br><span class="line">			ValueProvider = bindingContext.ValueProvider</span><br><span class="line">		&#125;;</span><br><span class="line">		<span class="keyword">object</span> dictionary = UpdateDictionary(controllerContext, dictionaryBindingContext, keyType, valueType);</span><br><span class="line">		<span class="keyword">return</span> dictionary;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	Type enumerableType = TypeHelpers.ExtractGenericInterface(modelType, <span class="keyword">typeof</span>(IEnumerable&lt;&gt;));</span><br><span class="line">	<span class="keyword">if</span> (enumerableType != <span class="literal">null</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		Type elementType = enumerableType.GetGenericArguments()[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">		Type collectionType = <span class="keyword">typeof</span>(ICollection&lt;&gt;).MakeGenericType(elementType);</span><br><span class="line">		<span class="keyword">if</span> (collectionType.IsInstanceOfType(model))</span><br><span class="line">		&#123;</span><br><span class="line">			ModelBindingContext collectionBindingContext = <span class="keyword">new</span> ModelBindingContext()</span><br><span class="line">			&#123;</span><br><span class="line">				ModelMetadata = ModelMetadataProviders.Current.GetMetadataForType(() =&gt; model, modelType),</span><br><span class="line">				ModelName = bindingContext.ModelName,</span><br><span class="line">				ModelState = bindingContext.ModelState,</span><br><span class="line">				PropertyFilter = bindingContext.PropertyFilter,</span><br><span class="line">				ValueProvider = bindingContext.ValueProvider</span><br><span class="line">			&#125;;</span><br><span class="line">			<span class="keyword">object</span> collection = UpdateCollection(controllerContext, collectionBindingContext, elementType);</span><br><span class="line">			<span class="keyword">return</span> collection;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	BindComplexElementalModel(controllerContext, bindingContext, model);</span><br><span class="line">	<span class="keyword">return</span> model;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>最後呼叫<code>BindComplexElementalModel</code>方法將剛剛建立值(<code>model</code>物件)透過<code>ValueProvider</code>把參數給值.</p>
<blockquote>
<p>有分簡單綁定和複雜綁定,最後都還是會呼叫使用簡單綁定來值綁定給物件.</p>
</blockquote>
<p>在<code>BindProperty</code>方法時填充子節點<code>ModelMetadata</code>的<code>Model</code>屬性.</p>
<p><code>GetPropertyValue</code>透過<code>(DefaultModelBinder)</code>再次綁定物件動作如下</p>
<ul>
<li><code>ModelMetadata</code>是簡單模型就會把值填充給此次<code>ModelMetadata.Model</code></li>
<li><code>ModelMetadata</code>是複雜模型就建立一個物件後呼叫<code>BindProperty</code>直到找到最後的簡單模型.</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">BindProperty</span>(<span class="params">ControllerContext controllerContext, ModelBindingContext bindingContext, PropertyDescriptor propertyDescriptor</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//...</span></span><br><span class="line">	IModelBinder propertyBinder = Binders.GetBinder(propertyDescriptor.PropertyType);</span><br><span class="line">	<span class="keyword">object</span> originalPropertyValue = propertyDescriptor.GetValue(bindingContext.Model);</span><br><span class="line">	ModelMetadata propertyMetadata = bindingContext.PropertyMetadata[propertyDescriptor.Name];</span><br><span class="line">	propertyMetadata.Model = originalPropertyValue;</span><br><span class="line">	ModelBindingContext innerBindingContext = <span class="keyword">new</span> ModelBindingContext()</span><br><span class="line">	&#123;</span><br><span class="line">		ModelMetadata = propertyMetadata,</span><br><span class="line">		ModelName = fullPropertyKey,</span><br><span class="line">		ModelState = bindingContext.ModelState,</span><br><span class="line">		ValueProvider = bindingContext.ValueProvider</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">object</span> newPropertyValue = GetPropertyValue(controllerContext, innerBindingContext, propertyDescriptor, propertyBinder);</span><br><span class="line">	propertyMetadata.Model = newPropertyValue;</span><br><span class="line">	<span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">virtual</span> <span class="keyword">object</span> <span class="title">GetPropertyValue</span>(<span class="params">ControllerContext controllerContext, ModelBindingContext bindingContext, PropertyDescriptor propertyDescriptor, IModelBinder propertyBinder</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">object</span> <span class="keyword">value</span> = propertyBinder.BindModel(controllerContext, bindingContext);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (bindingContext.ModelMetadata.ConvertEmptyStringToNull &amp;&amp; Equals(<span class="keyword">value</span>, String.Empty))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">value</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="小結："><a href="#小結：" class="headerlink" title="小結："></a>小結：</h2><p><strong>MVC</strong> <code>ModelBinding</code> 使用到一個設計模式(組合模式),當我發現時覺得十分興奮.</p>
<p>因為在現實專案中我較少看到(組合模式),發輝良好的作用而在這個案例上發揮的淋漓盡致.</p>
<p>組合模式關係圖如下</p>
<p><img src="https://raw.githubusercontent.com/isdaniel/MyBlog/master/source/images/itHelp/18/Composite_Design_Pattern_UML.jpg" alt="UML_Model"></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ29tcG9zaXRlX3BhdHRlcm4=" title="https://en.wikipedia.org/wiki/Composite_pattern">參考圖片連結<i class="fa fa-external-link"></i></span></p>
<p>組合模式基本上分為兩個部分<strong>葉</strong>(<code>Left</code>)和<strong>組件</strong>(<code>component</code>)他們都依賴於一個抽象,組件實現取得動作的抽象只為了獲得下面的葉,真正有動作只會在葉有動作</p>
<p><code>組合模式</code>很適合用在樹狀的資料結構且需求對於<strong>葉</strong>和<strong>組件</strong>要做大量不一樣判斷.</p>
<p>在模型綁定中他依靠兩個東西完成上面說的依賴關聯</p>
<ul>
<li><code>ModelBindingContext</code>物件</li>
<li><code>object CreateModel</code>方法</li>
</ul>
<h3 id="簡單模型綁定-vs-複雜模型綁定"><a href="#簡單模型綁定-vs-複雜模型綁定" class="headerlink" title="簡單模型綁定 vs 複雜模型綁定"></a>簡單模型綁定 vs 複雜模型綁定</h3><ol>
<li>簡單模型綁定:透過<code>ModelBindingContext</code>找到參數使用型別並利用<code>ValueProvider</code>給值,最後返回物件</li>
<li>複雜模型綁定:透過<code>ModelBindingContext</code>建立參數利用<code>ValueProvider</code>給值,往下繼續重複動作直到呼叫簡單模型綁定方法,就不會繼續往下呼叫<code>object</code>方法.</li>
</ol>
<p>這裡很巧妙的利用<code>ModelBinderDictionary</code>取得當前參數型別並取得相對應<code>IModelBinder</code>實現物件.</p>
<p><strong>此文作者</strong>：Daniel Shih(石頭)<br><strong>此文地址</strong>： <a href="https://isdaniel.github.io/ithelp-day19/">https://isdaniel.github.io/ithelp-day19/</a> <br><strong>版權聲明</strong>：本博客所有文章除特別聲明外，均採用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC90dy8=" title="https://creativecommons.org/licenses/by-nc-sa/3.0/tw/">CC BY-NC-SA 3.0 TW<i class="fa fa-external-link"></i></span> 許可協議。轉載請註明出處！</p>
]]></content>
      <categories>
        <category>11th鐵人賽</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>Asp.net</tag>
        <tag>Asp.net-MVC</tag>
        <tag>SourceCode</tag>
        <tag>11th鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>Asp.Net支柱 IHttpMoudle &amp; IHttphandler (第2天)</title>
    <url>/ithelp-day2/</url>
    <content><![CDATA[<h1 id="Agenda"><a href="#Agenda" class="headerlink" title="Agenda"></a>Agenda<!-- omit in toc --></h1><ul>
<li><a href="#%e5%89%8d%e8%a8%80">前言：</a><ul>
<li><a href="#ihttphandler%e5%92%8chttpmodule%e9%97%9c%e4%bf%82">IHttpHandler和HttpModule關係</a></li>
</ul>
</li>
<li><a href="#aspnetapplicationevent%e7%94%9f%e5%91%bd%e9%80%b1%e6%9c%9f">Asp.net_Application_Event生命週期</a><ul>
<li><a href="#event%e4%ba%8b%e4%bb%b6%e5%90%8d%e7%a8%b1">Event事件名稱：</a></li>
<li><a href="#%e4%ba%8b%e4%bb%b6%e6%96%b9%e6%b3%95%e8%aa%aa%e6%98%8e">事件方法說明：</a></li>
</ul>
</li>
<li><a href="#ihttphandler">IHttpHandler</a></li>
<li><a href="#ihttpmodule">IHttpModule</a></li>
<li><a href="#%e8%87%aa%e5%b7%b1%e5%bb%ba%e7%ab%8b%e4%b8%80%e5%80%8b-ihttphandler">自己建立一個 IHttpHandler</a><ul>
<li><a href="#webconfig%e8%a8%bb%e5%86%8a%e4%b8%8a%e9%9d%a2%e6%92%b0%e5%af%ab%e7%9a%84ihttphandler">Web.Config註冊上面撰寫的IHttpHandler</a></li>
</ul>
</li>
<li><a href="#%e8%87%aa%e5%b7%b1%e5%bb%ba%e7%ab%8b%e4%b8%80%e5%80%8b-ihttpmodule">自己建立一個 IHttpModule</a><ul>
<li><a href="#%e5%bb%ba%e7%ab%8b%e4%b8%80%e5%80%8b%e9%a1%9e%e5%88%a5%e5%af%a6%e7%8f%beihttpmodule">建立一個類別實現IHttpModule</a></li>
<li><a href="#webconfig%e8%a8%bb%e5%86%8a%e4%b8%8a%e9%9d%a2%e6%92%b0%e5%af%ab%e7%9a%84ihttpmodule">Web.Config註冊上面撰寫的IHttpModule</a><ul>
<li><a href="#%e7%a8%8b%e5%bc%8f%e7%a2%bc">程式碼</a></li>
</ul>
</li>
<li><a href="#%e5%bb%ba%e7%ab%8b%e4%b8%80%e5%80%8b%e9%a1%9e%e5%88%a5%e5%af%a6%e7%8f%beihttphander">建立一個類別實現IHttpHander</a></li>
</ul>
</li>
<li><a href="#applicationhostconfig-%e8%a8%ad%e5%ae%9a%e6%93%8b">ApplicationHost.config 設定擋</a><ul>
<li><a href="#iis%e9%a0%90%e8%a8%ad%e8%a8%ad%e5%ae%9amodule%e5%9c%a8%e5%93%aa%e9%82%8a">IIS預設設定Module在哪邊?</a><ul>
<li><a href="#iis">IIS</a></li>
<li><a href="#iisexpress">IISExpress</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#%e5%b0%8f%e7%b5%90">小結</a></li>
<li><a href="#%e5%8f%83%e8%80%83%e8%b3%87%e6%96%99">參考資料：</a></li>
</ul>
<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>上一篇文章我們有說 Asp.net 有兩個核心組件 <code>IHttpMoudle &amp; IHttphandler</code></p>
<p><code>Asp.net</code> 是一個<code>pipeline</code>的模型，理解這些管道除了可以讓我們節省許多不必要的資源浪費也可讓我們程式架構更加有條理.</p>
<p>就像我們在<code>Asp.net MVC</code>如果要寫權限驗證程式碼,雖然可以寫在<code>Controller</code>的<code>Action</code>中</p>
<p>但更好做法是我可以寫一個類別繼承<code>AuthorizeAttribute</code>並<code>override</code> <code>OnAuthorization</code>方法並掛上此標籤.</p>
<p>更了解這些原理可以讓我們寫程式事半功倍.</p>
<h3 id="IHttpHandler和HttpModule關係"><a href="#IHttpHandler和HttpModule關係" class="headerlink" title="IHttpHandler和HttpModule關係"></a>IHttpHandler和HttpModule關係</h3><p>Http請求像是一個旅客身上帶著行李拿著票來搭火車.</p>
<ul>
<li><code>HttpHandler</code> 是火車的終點站.</li>
<li><code>HttpModule</code> 是火車中途停靠的各站.</li>
</ul>
<h2 id="Asp-net-Application-Event生命週期"><a href="#Asp-net-Application-Event生命週期" class="headerlink" title="Asp.net_Application_Event生命週期"></a>Asp.net_Application_Event生命週期</h2><p>我們已經知道<code>Asp.net</code>是一個請求處理響應的管道而這個管道中微軟有提供許多點可以讓我們進行客製化的擴充程式撰寫</p>
<blockquote>
<p>事件可藉由<code>IHttpModule</code>來擴充註冊</p>
</blockquote>
<h3 id="Event事件名稱："><a href="#Event事件名稱：" class="headerlink" title="Event事件名稱："></a>Event事件名稱：</h3><p>官網列出可用事件很多，下面列出我有用過的幾個事件和其功用.</p>
<ul>
<li>BeginRequest</li>
<li>AuthorizeRequest</li>
<li>PostResolveRequestCache</li>
<li>MapRequestHandler</li>
<li>AcquireRequestState</li>
<li>PreRequestHandlerExecute</li>
<li>PostRequestHandlerExecute</li>
<li>EndRequest</li>
</ul>
<h3 id="事件方法說明："><a href="#事件方法說明：" class="headerlink" title="事件方法說明："></a>事件方法說明：</h3><ul>
<li><code>BeginRequest</code>: 已經啟動要求。如果要在要求前執行某個動作 (例如, 在每頁頁首顯示廣告橫幅), 請同步處理這個事件。</li>
<li><code>AuthorizeRequest</code>: 您可以在內部使用這個事件, 以實作授權機制 (例如, 將存取控制清單 (ACL) 儲存在資料庫, 而非存入檔案系統)。您也可以覆寫這個事件, 但無此必要。</li>
<li><code>PostResolveRequestCache</code>：當 ASP.NET 略過目前事件處理常式的執行並允許快取模組從快取中服務要求時發生。</li>
<li><code>MapRequestHandler</code>：ASP.NET 基礎結構會使用事件來判斷目前要求的要求處理常式。 如需詳細資訊</li>
<li><code>AcquireRequestState</code>: 工作階段狀態是擷取自狀態儲存區。如果要建置自已的狀態管理模組, 則可以同步處理這個事件, 以便從狀態儲存區擷取「工作階段」狀態。</li>
<li><code>PreRequestHandlerExecute</code>: 這個事件會在執行 HTTP 處理常式之前產生。</li>
<li>在介於<code>PreRequestHandlerExecute</code>和<code>PostRequestHandlerExecute</code>事件之間會執行<code>HttpHandler</code>程式碼.</li>
<li><code>PostRequestHandlerExecute</code>: 這個事件會在執行 HTTP 處理常式之後產生。</li>
<li><code>EndRequest</code>: 要求已完成。您可能想要建置偵錯模組, 以便收集要求的全部資訊, 然後再將資訊寫入網頁中。</li>
</ul>
<p><code>IHttpHandler</code>和<code>IHttpModule</code>關係如 <span class="exturl" data-url="aHR0cHM6Ly93d3cuY29kZXByb2plY3QuY29tL0FydGljbGVzLzMzNTk2OC9JbXBsZW1lbnRpbmctSFRUUEhhbmRsZXItYW5kLUhUVFBNb2R1bGUtaW4tQVNQLU5FVA==" title="https://www.codeproject.com/Articles/335968/Implementing-HTTPHandler-and-HTTPModule-in-ASP-NET">Implementing HTTPHandler and HTTPModule in ASP.NET<i class="fa fa-external-link"></i></span> 文章提到</p>
<p><img src="https://1.bp.blogspot.com/--nEyvA5pGLk/WXn6YudHYzI/AAAAAAACWLg/7N81JLv5SfYPMvYmGdUnNHg4_p3Shb5DACLcBGAs/s1600/overview.jpg" alt="img"></p>
<p>每個請求一定會通過所有被註冊的<code>IHttpModule</code>,而最終會執行一個<code>IHttpHandler</code>後進行返回.</p>
<p>我們常聽到的<code>Asp.net</code> <code>Webform</code>，<code>MVC</code>都是經過管道<code>Module</code>並執行相對應的<code>Handler</code>.</p>
<blockquote>
<p>所以HttpHanlder 和 HttpMoudule 搭配使用達到更強大的功能.</p>
</blockquote>
<h2 id="IHttpHandler"><a href="#IHttpHandler" class="headerlink" title="IHttpHandler"></a>IHttpHandler</h2><p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vemgtdHcvZG90bmV0L2FwaS9zeXN0ZW0ud2ViLmlodHRwaGFuZGxlcj92aWV3PW5ldGZyYW1ld29yay00Ljg=" title="https://docs.microsoft.com/zh-tw/dotnet/api/system.web.ihttphandler?view=netframework-4.8">MSDN<i class="fa fa-external-link"></i></span>說明</p>
<blockquote>
<p>您可以撰寫自訂的 HTTP 處理常式來處理特定的預先定義的任何 Common Language Specification (CLS) 標準的語言中的 HTTP 要求的類型。 可執行程式碼中定義HttpHandler類別，而不是傳統的 ASP 或 ASP.NET Web 網頁，這些特定的要求回應。 HTTP 處理常式提供您一種低層級的要求和回應服務的 IIS Web 伺服器互動，以及大部分 ISAPI 擴充程式類似，但使用簡單的程式設計模型提供的功能。</p>
</blockquote>
<p><code>IHttpHandler</code>是一個可以讓我們實現的介面<br>裡面包含：</p>
<p><strong>屬性:</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">bool</span> IsReusable &#123; <span class="keyword">get</span>; &#125;</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>取得值，指出另一個要求是否可以使用 <code>IHttpHandler</code> 執行個體。</p>
</blockquote>
<p><strong>方法:</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ProcessRequest</span>(<span class="params">HttpContext context</span>)</span></span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>以實作 IHttpHandler 介面的自訂 HttpHandler 來啟用 HTTP Web 要求的處理。</p>
</blockquote>
<h2 id="IHttpModule"><a href="#IHttpModule" class="headerlink" title="IHttpModule"></a>IHttpModule</h2><p><span class="exturl" data-url="aHR0cHM6Ly9zdXBwb3J0Lm1pY3Jvc29mdC5jb20vZW4tdXMvaGVscC8zMDc5ODUvaW5mby1hc3AtbmV0LWh0dHAtbW9kdWxlcy1hbmQtaHR0cC1oYW5kbGVycy1vdmVydmlldw==" title="https://support.microsoft.com/en-us/help/307985/info-asp-net-http-modules-and-http-handlers-overview">MSDN<i class="fa fa-external-link"></i></span>說明</p>
<blockquote>
<p>Modules are called before and after the handler executes. Modules enable developers to intercept, participate in, or modify each individual request. Modules implement the IHttpModule interface, which is located in the System.Web namespace.</p>
</blockquote>
<p>處理常式 (Handler) 在執行前後，會呼叫模組 (Module)。 模組可以讓開發人員攔截、參與或修改每個要求。</p>
<p>更印證了</p>
<blockquote>
<p>　如果把Http請求當作火車那</p>
<ul>
<li><code>IHttpHandler</code>是火車的終點</li>
<li><code>IHttpModule</code>是沿路經過的站點</li>
</ul>
</blockquote>
<p>要查看有哪寫<code>IHttpModule</code>或<code>IHttpHandler</code>被註冊可以看<code>applicationhost.config</code>檔案</p>
<blockquote>
<p>路徑：C:\Users[user]\Documents\IISExpress\config\applicationhost.config</p>
</blockquote>
<h2 id="自己建立一個-IHttpHandler"><a href="#自己建立一個-IHttpHandler" class="headerlink" title="自己建立一個 IHttpHandler"></a>自己建立一個 IHttpHandler</h2><p>在前面有說到每個Http請求的最終是為了給一個<code>HttpHander</code>來執行處理.</p>
<p>像我們常看到的</p>
<ul>
<li>ASP.NET page (*.aspx)</li>
<li>Web service (*.asmx)</li>
<li>Generic Web  (*.ashx)</li>
</ul>
<p>甚至是<code>MVC (MvcHandler)</code>都是實現於<code>IHttpHander</code>介面</p>
<p>這邊介紹如果要如何建立自己<code>HttpHander</code>.</p>
<h4 id="Web-Config註冊上面撰寫的IHttpHandler"><a href="#Web-Config註冊上面撰寫的IHttpHandler" class="headerlink" title="Web.Config註冊上面撰寫的IHttpHandler"></a>Web.Config註冊上面撰寫的IHttpHandler</h4><p>我們要在<code>Web.Config</code>中設定我們撰寫的<code>HttpHandler</code></p>
<p>這是一個範例:</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="XML"><figure class="iseeu highlight /xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">system.webServer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">handlers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">add</span> <span class="attr">verb</span>=<span class="string">"*"</span> <span class="attr">name</span>=<span class="string">"MyHttpHandler"</span> <span class="attr">path</span>=<span class="string">"*.cspx"</span>  <span class="attr">type</span>=<span class="string">"HttpHandler_HttpModule.MyHttpHandler"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">handlers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">system.webServer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<p>把<code>handlers</code>加入在<code>system.webServer</code>結點中.</p>
<p>裡面有幾個<code>Attribute</code></p>
<ul>
<li><code>verb</code>：請求動作 <code>GET,POST,PUT...</code>如果是<code>*</code>代表全部請請動作都合用.</li>
<li><code>path</code>：請求那些副檔名會執行此<code>HttpHandler</code></li>
<li><code>type</code>：註冊的<code>HttpHandler</code>類型.</li>
</ul>
<p>其中最要注意的是type Attribute.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="XML"><figure class="iseeu highlight /xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">add</span> <span class="attr">verb</span>=<span class="string">"*"</span> <span class="attr">name</span>=<span class="string">"MyHttpHandler"</span> <span class="attr">path</span>=<span class="string">"*.cspx"</span>  <span class="attr">type</span>=<span class="string">"(namespace).(classname)"</span>/&gt;</span></span><br></pre></td></tr></table></figure></div>
<p>最後我們就可以請求 <code>http://xxxx/Mypage.cspx</code> 來試試看我們的結果.</p>
<p>我們將請求<code>*.cspx</code>副檔名的所有請求都當作要透過<code>CLR</code>來執行.</p>
<h2 id="自己建立一個-IHttpModule"><a href="#自己建立一個-IHttpModule" class="headerlink" title="自己建立一個 IHttpModule"></a>自己建立一個 IHttpModule</h2><p>每個被註冊的<code>HttpModule</code>是Http請求必經之路.</p>
<ul>
<li><code>Asp.net MVC</code> 是透過<code>System.Web.Routing.UrlRoutingModule</code> 這個<code>HttpModule</code>來完成切入的.</li>
</ul>
<p>使用<code>IHttpModule</code>須完成幾個步驟:</p>
<ol>
<li>建立一個類別實現<code>IHttpModule</code></li>
<li><code>Web.Config</code>註冊上面撰寫的<code>IHttpModule</code></li>
</ol>
<h4 id="建立一個類別實現IHttpModule"><a href="#建立一個類別實現IHttpModule" class="headerlink" title="建立一個類別實現IHttpModule"></a>建立一個類別實現IHttpModule</h4><p>這個範例會在頁面上顯示 IIS Pipeline Event的執行順序.</p>
<ol>
<li><code>public void Init(HttpApplication context)</code> 把 <code>HttpApplication</code> 中的event做擴充.</li>
</ol>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyHttpModule</span>:<span class="title">IHttpModule</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Init</span>(<span class="params">HttpApplication context</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        context.BeginRequest += (sender, args) =&gt; ShowStep(sender, <span class="string">"BeginRequest"</span>);</span><br><span class="line"></span><br><span class="line">        context.AuthorizeRequest += (sender, args) =&gt; ShowStep(sender, <span class="string">"AuthorizeRequest"</span>);</span><br><span class="line"></span><br><span class="line">        context.PostResolveRequestCache += (sender, args) =&gt; ShowStep(sender, <span class="string">"PostResolveRequestCache"</span>);</span><br><span class="line"></span><br><span class="line">        context.MapRequestHandler += (sender, args) =&gt; ShowStep(sender, <span class="string">"MapRequestHandler"</span>);</span><br><span class="line"></span><br><span class="line">        context.AcquireRequestState += (sender, args) =&gt; ShowStep(sender, <span class="string">"AcquireRequestState"</span>);</span><br><span class="line"></span><br><span class="line">        context.PreRequestHandlerExecute += (sender, args) =&gt; ShowStep(sender, <span class="string">"PreRequestHandlerExecute"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//這中間執行IHttpHandler.</span></span><br><span class="line"></span><br><span class="line">        context.PostRequestHandlerExecute += (sender, args) =&gt; ShowStep(sender, <span class="string">"PostRequestHandlerExecute"</span>);</span><br><span class="line"></span><br><span class="line">        context.EndRequest += (sender, args) =&gt; ShowStep(sender, <span class="string">"EndRequest"</span>);</span><br><span class="line"></span><br><span class="line">        context.PreSendRequestHeaders += (sender, args) =&gt; ShowStep(sender, <span class="string">"PreSendRequestHeaders"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ShowStep</span>(<span class="params"><span class="keyword">object</span> app,<span class="keyword">string</span> eventName</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">var</span> http = (HttpApplication)app;</span><br><span class="line">        http.Response.Write(<span class="string">$"Step <span class="subst">&#123;eventName&#125;</span>&lt;br/&gt;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Dispose</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h4 id="Web-Config註冊上面撰寫的IHttpModule"><a href="#Web-Config註冊上面撰寫的IHttpModule" class="headerlink" title="Web.Config註冊上面撰寫的IHttpModule"></a>Web.Config註冊上面撰寫的IHttpModule</h4><p>註冊方法和<code>IHttpHander</code>很類似,一樣在<code>system.webServer</code>節點下加入<code>modules</code></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="XML"><figure class="iseeu highlight /xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">system.webServer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">add</span> <span class="attr">name</span>=<span class="string">"MyHttpModule"</span> <span class="attr">type</span>=<span class="string">"HttpHandler_HttpModule.MyHttpModule"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">system.webServer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<hr>
<h3 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h3><p>使用<code>IHttpHandler</code>須完成幾個步驟:</p>
<ol>
<li>建立一個類別實現<code>IHttpHander</code></li>
<li><code>Web.Config</code>註冊上面撰寫的<code>IHttpHandler</code></li>
</ol>
<h4 id="建立一個類別實現IHttpHander"><a href="#建立一個類別實現IHttpHander" class="headerlink" title="建立一個類別實現IHttpHander"></a>建立一個類別實現IHttpHander</h4><p>繼承完<code>IHttpHandler</code>我們會實現兩個方法.</p>
<ol>
<li><code>ProcessRequest(HttpContext context)</code> 執行此次請求動作.</li>
<li><code>bool IsReusable { get; }</code> 是否要將此次請求加入快取中重用.</li>
</ol>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyHttpHandler</span> : <span class="title">IHttpHandler</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ProcessRequest</span>(<span class="params">HttpContext context</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        context.Response.ContentType = <span class="string">"text/html"</span>;</span><br><span class="line">        context.Response.Write(<span class="string">"==================&lt;br/&gt;"</span>);</span><br><span class="line">        context.Response.Write(<span class="string">"Hello World&lt;br/&gt;"</span>);</span><br><span class="line">        context.Response.Write(<span class="string">"==================&lt;br/&gt;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">bool</span> IsReusable &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="ApplicationHost-config-設定擋"><a href="#ApplicationHost-config-設定擋" class="headerlink" title="ApplicationHost.config 設定擋"></a>ApplicationHost.config 設定擋</h2><p>前面有說到<code>aspnet_isapi.dll</code>會去判斷此次請求要怎麼處理,她會去讀取<code>handlers</code>註冊節點的對應表來判斷是否要透過<code>CLR</code>處理此次請求.</p>
<h3 id="IIS預設設定Module在哪邊"><a href="#IIS預設設定Module在哪邊" class="headerlink" title="IIS預設設定Module在哪邊?"></a>IIS預設設定Module在哪邊?</h3><p>她是透過 <code>ApplicationHost.config</code> 來抓取，<code>HttpHandler</code> 和 <code>HttpModule</code>設定.</p>
<p>這邊分為兩個部分:</p>
<h4 id="IIS"><a href="#IIS" class="headerlink" title="IIS"></a>IIS</h4><p>IIS可借由<code>HandlerMappings</code>和<code>Module</code>來設置</p>
<p><img src="https://raw.githubusercontent.com/isdaniel/MyBlog/master/source/images/IISModule_Hanlder.PNG" alt="瀏覽器請求IIS流程"></p>
<hr>
<ul>
<li>HandlerMappings</li>
</ul>
<p><img src="https://raw.githubusercontent.com/isdaniel/MyBlog/master/source/images/Handler.PNG" alt="瀏覽器請求IIS流程"></p>
<p>可以看到有許多預設要處理的附檔名(<code>.aspx</code>,<code>.svc</code>)在裡面都可以看到.</p>
<ul>
<li>Module</li>
</ul>
<p><img src="https://raw.githubusercontent.com/isdaniel/MyBlog/master/source/images/Module.PNG" alt="瀏覽器請求IIS流程"></p>
<p>IIS預設幫忙載入許多<code>Moudle</code>我們自己客製化的<code>Module</code>也可以在這邊設定</p>
<hr>
<h4 id="IISExpress"><a href="#IISExpress" class="headerlink" title="IISExpress"></a>IISExpress</h4><p>基本上<code>IISExpress</code> 全域 config 會放在這個路徑</p>
<blockquote>
<p>C:\Users\%USERPROFILE%\Documents\IISExpress\config</p>
</blockquote>
<p>如果VS版本高於2015以上執行Web專案時，會在每個專案上建立一個<code>.vs</code>資料夾並把<code>ApplicationHost.config</code>複製一份放到下面影片的路徑中</p>
<p><img src="https://raw.githubusercontent.com/isdaniel/MyBlog/master/source/images/IISExpress.gif" alt="瀏覽器請求IIS流程"></p>
<hr>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2lzZGFuaWVsL0h0dHBIYW5sZGVyX1ZzX0h0dHBNb2R1bGU=" title="https://github.com/isdaniel/HttpHanlder_Vs_HttpModule">範例原始碼下載<i class="fa fa-external-link"></i></span></p>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>今天我們學到</p>
<ol>
<li>自己建立一個<code>Httpmodule</code></li>
<li>自己建立一個<code>Httphandler</code> </li>
<li><code>ApplicationHost.config</code>設定擋和<code>Httpmodule &amp; Httphandler</code>關係且如何設定.</li>
</ol>
<p>今天先丟一個問題給大家那，為什麼Asp.net可以依賴<code>IHttphandler</code>介面來完成請求這是怎麼實現的?</p>
<p>下篇我們會來回答上面的答案.</p>
<h2 id="參考資料："><a href="#參考資料：" class="headerlink" title="參考資料："></a>參考資料：</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvcHJldmlvdXMtdmVyc2lvbnMvYXNwbmV0L2JiMzk4OTg2KHY9dnMuMTAw" title="https://docs.microsoft.com/en-us/previous-versions/aspnet/bb398986(v=vs.100">HTTP Handlers and HTTP Modules Overview<i class="fa fa-external-link"></i></span>#Features)</li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuY29kZXByb2plY3QuY29tL0FydGljbGVzLzMzNTk2OC9JbXBsZW1lbnRpbmctSFRUUEhhbmRsZXItYW5kLUhUVFBNb2R1bGUtaW4tQVNQLU5FVA==" title="https://www.codeproject.com/Articles/335968/Implementing-HTTPHandler-and-HTTPModule-in-ASP-NET">Implementing HTTPHandler and HTTPModule in ASP.NET<i class="fa fa-external-link"></i></span></li>
</ul>
<p><strong>此文作者</strong>：Daniel Shih(石頭)<br><strong>此文地址</strong>： <a href="https://isdaniel.github.io/ithelp-day2/">https://isdaniel.github.io/ithelp-day2/</a> <br><strong>版權聲明</strong>：本博客所有文章除特別聲明外，均採用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC90dy8=" title="https://creativecommons.org/licenses/by-nc-sa/3.0/tw/">CC BY-NC-SA 3.0 TW<i class="fa fa-external-link"></i></span> 許可協議。轉載請註明出處！</p>
]]></content>
      <categories>
        <category>11th鐵人賽</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>Asp.net</tag>
        <tag>Asp.net-MVC</tag>
        <tag>SourceCode</tag>
        <tag>11th鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>探討Model上客製化標籤如何被解析使用 (第20天)</title>
    <url>/ithelp-day20/</url>
    <content><![CDATA[<h1 id="Agenda"><a href="#Agenda" class="headerlink" title="Agenda"></a>Agenda<!-- omit in toc --></h1><ul>
<li><a href="#%e5%89%8d%e8%a8%80">前言</a></li>
<li><a href="#imetadataaware%e4%bb%8b%e9%9d%a2">IMetadataAware介面</a><ul>
<li><a href="#allowhtmlattribute%e6%a8%99%e7%b1%a4">AllowHtmlAttribute標籤</a></li>
<li><a href="#%e7%82%ba%e4%bd%95%e5%8f%af%e4%bb%a5%e9%80%8f%e9%81%8e%e5%af%a6%e7%8f%beimetadataaware%e4%bb%8b%e9%9d%a2%e4%be%86%e6%93%b4%e5%85%85%e5%b0%8d%e6%96%bcmetadata%e6%93%8d%e4%bd%9c">為何可以透過實現IMetadataAware介面來擴充對於metadata操作</a></li>
</ul>
</li>
<li><a href="#cacheddataannotationsmodelmetadataprovider">CachedDataAnnotationsModelMetadataProvider</a><ul>
<li><a href="#cacheddataannotationsmodelmetadata">CachedDataAnnotationsModelMetadata</a></li>
<li><a href="#cacheddataannotationsmetadataattributes">CachedDataAnnotationsMetadataAttributes</a></li>
</ul>
</li>
<li><a href="#%e5%b0%8f%e7%b5%90">小結：</a></li>
</ul>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上一篇有介紹<code>ModelMetadata</code>和參數<code>Model</code>之間的關係.</p>
<p><img src="https://raw.githubusercontent.com/isdaniel/MyBlog/master/source/images/itHelp/18/metadata_uml.png" alt="UML_Model"></p>
<p><strong>MVC</strong>提供我們一個<code>IMetadataAware</code>介面,讓我們可以對最終生成<code>ModelMetadata</code>進行自由設定.</p>
<h2 id="IMetadataAware介面"><a href="#IMetadataAware介面" class="headerlink" title="IMetadataAware介面"></a>IMetadataAware介面</h2><p>在<code>IMetadataAware</code>介面有一個<code>OnMetadataCreated</code>方法</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IMetadataAware</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnMetadataCreated</span>(<span class="params">ModelMetadata metadata</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>在<strong>MVC</strong>有預設兩個實現<code>IMetadataAware</code>介面的標籤.</p>
<ul>
<li><code>AllowHtmlAttribute</code>:標上的屬性可以攜帶<code>Html</code>資料.</li>
<li><code>AdditionalMetadataAttribute</code>:對於當前屬性的<code>modelmetadata</code>資訊的<code>AdditionalValues</code>添加資料(添加資料可透過<code>ViewData.ModelMetadata.AdditionalValues</code>取得資料)</li>
</ul>
<p>如果你想要對於<code>modelmetadata</code>資訊做修改或新增資料可以製作自己<code>IMetadataAware</code>介面標籤.</p>
<blockquote>
<p>我有做一個可以針對於<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2lzZGFuaWVsL0FzcC5uZXQtTVZDLURlYnVnZXI=" title="https://github.com/isdaniel/Asp.net-MVC-Debuger">Asp.net MVC Debugger<i class="fa fa-external-link"></i></span>的專案，只要下中斷點就可輕易進入Asp.net MVC原始碼.</p>
</blockquote>
<h3 id="AllowHtmlAttribute標籤"><a href="#AllowHtmlAttribute標籤" class="headerlink" title="AllowHtmlAttribute標籤"></a>AllowHtmlAttribute標籤</h3><p>為了防止<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLXR3LyVFOCVCNyVBOCVFNyVCNiVCMiVFNyVBQiU5OSVFNiU4QyU4NyVFNCVCQiVBNCVFNyVBMiVCQw==" title="https://zh.wikipedia.org/zh-tw/%E8%B7%A8%E7%B6%B2%E7%AB%99%E6%8C%87%E4%BB%A4%E7%A2%BC">(Cross-site scripting)XSS攻擊<i class="fa fa-external-link"></i></span>通過在針對某些輸入框中寫入或注入<code>HTML</code>來攻擊我們<code>Web</code>應用</p>
<p>針對<code>HTML</code>標記驗證通過<code>ModelMetadata</code>的<code>RequestValidationEnabled</code>來控制，如下面程式碼顯示</p>
<p>這是一個布爾類型的可讀寫屬性。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ModelMetadata</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">bool</span> RequestValidationEnabled &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>此屬性在默認情況下為<code>True</code>進行驗證防護</p>
</blockquote>
<p><strong>ASP.NET MVC</strong>有一個預設標籤<code>AllowHtmlAttribute</code>在進行<code>Model</code>綁定之前會對對應請求資料進行驗證，確保沒有任何<code>HTML</code>標記包含其中。</p>
<p>如果在<code>Input</code> tag輸入有關<code>Html</code>資料就會出現下面錯誤.(這是<strong>MVC</strong>貼心幫我們開啟防護XSS攻擊的機制)</p>
<blockquote>
<p>具有潛在危險<code>Request.Form</code> 的值已從用戶端 (xxxxxx) 偵測到。</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/isdaniel/MyBlog/master/source/images/itHelp/19/XSS.PNG" alt="UML_Model"></p>
<p>如果查看<code>AllowHtmlAttribute</code>原始碼就很簡單只是把<code>metadata.RequestValidationEnabled</code>設成<code>false</code>允許使用者上傳<code>Html</code>資料.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">AttributeUsage(AttributeTargets.Property, AllowMultiple = false, Inherited = true)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">AllowHtmlAttribute</span> : <span class="title">Attribute</span>, <span class="title">IMetadataAware</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnMetadataCreated</span>(<span class="params">ModelMetadata metadata</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (metadata == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="string">"metadata"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        metadata.RequestValidationEnabled = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>我們就可以把<code>Html</code>資料傳送到<strong>AP</strong>端了</p>
<blockquote>
<p>只是這個標籤請斟酌使用打開有一定風險.</p>
</blockquote>
<h3 id="為何可以透過實現IMetadataAware介面來擴充對於metadata操作"><a href="#為何可以透過實現IMetadataAware介面來擴充對於metadata操作" class="headerlink" title="為何可以透過實現IMetadataAware介面來擴充對於metadata操作"></a>為何可以透過實現IMetadataAware介面來擴充對於metadata操作</h3><p>在<code>AssociatedMetadataProvider</code>抽象類別中有個<code>ApplyMetadataAwareAttributes</code>方法.</p>
<p>參數物件上屬性進行反射取得使用到<code>IMetadataAware</code>的標籤,並呼叫他的<code>OnMetadataCreated</code>方法.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">AssociatedMetadataProvider</span> : <span class="title">ModelMetadataProvider</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ApplyMetadataAwareAttributes</span>(<span class="params">IEnumerable&lt;Attribute&gt; attributes, ModelMetadata result</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">foreach</span> (IMetadataAware awareAttribute <span class="keyword">in</span> attributes.OfType&lt;IMetadataAware&gt;())</span><br><span class="line">        &#123;</span><br><span class="line">            awareAttribute.OnMetadataCreated(result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="CachedDataAnnotationsModelMetadataProvider"><a href="#CachedDataAnnotationsModelMetadataProvider" class="headerlink" title="CachedDataAnnotationsModelMetadataProvider"></a>CachedDataAnnotationsModelMetadataProvider</h2><p>在<strong>MVC</strong> <code>Action</code>傳入參數上可以標示許多標籤例如</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">VerifyCodeViewModel</span></span><br><span class="line">&#123;</span><br><span class="line">	[<span class="meta">Required</span>]</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">string</span> Provider &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">	[<span class="meta">Required</span>]</span><br><span class="line">	[<span class="meta">Display(Name = <span class="meta-string">"代碼"</span>)</span>]</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">string</span> Code &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">string</span> ReturnUrl &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">	[<span class="meta">Display(Name = <span class="meta-string">"記住此瀏覽器?"</span>)</span>]</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">bool</span> RememberBrowser &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">bool</span> RememberMe &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ForgotViewModel</span></span><br><span class="line">&#123;</span><br><span class="line">	[<span class="meta">Required</span>]</span><br><span class="line">	[<span class="meta">Display(Name = <span class="meta-string">"電子郵件"</span>)</span>]</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">string</span> Email &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<ul>
<li><code>RequiredAttribute</code></li>
<li><code>DisplayAttribute</code></li>
</ul>
<p>還有其他一大堆,下面會跟大家介紹<strong>MVC</strong>是怎麼取得並使用這些標籤,<code>ModelMetadataProviders</code>這個類別會提供使用哪個<code>ModelMetadataProvider</code></p>
<p>在原始碼建構子預設使用<code>CachedDataAnnotationsModelMetadataProvider</code></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ModelMetadataProviders</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ModelMetadataProviders _instance = <span class="keyword">new</span> ModelMetadataProviders();</span><br><span class="line">    <span class="keyword">private</span> ModelMetadataProvider _currentProvider;</span><br><span class="line">    <span class="keyword">private</span> IResolver&lt;ModelMetadataProvider&gt; _resolver;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">internal</span> <span class="title">ModelMetadataProviders</span>(<span class="params">IResolver&lt;ModelMetadataProvider&gt; resolver = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        _resolver = resolver ?? <span class="keyword">new</span> SingleServiceResolver&lt;ModelMetadataProvider&gt;(</span><br><span class="line">                                    () =&gt; _currentProvider,</span><br><span class="line">                                    <span class="keyword">new</span> CachedDataAnnotationsModelMetadataProvider(),</span><br><span class="line">                                    <span class="string">"ModelMetadataProviders.Current"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>在<code>CachedDataAnnotationsModelMetadataProvider</code>類別有一個<code>CreateMetadataPrototype</code>方法返回一個<code>CachedDataAnnotationsModelMetadata</code>物件,這個物件存放參數上屬性欄位使用標籤資訊.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line">public class CachedDataAnnotationsModelMetadataProvider : CachedAssociatedMetadataProvider&lt;CachedDataAnnotationsModelMetadata&gt;</span><br><span class="line">&#123;</span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> CachedDataAnnotationsModelMetadata <span class="title">CreateMetadataPrototype</span>(<span class="params">IEnumerable&lt;Attribute&gt; attributes, Type containerType, Type modelType, <span class="keyword">string</span> propertyName</span>)</span></span><br><span class="line"><span class="function"></span>	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> CachedDataAnnotationsModelMetadata(<span class="keyword">this</span>, containerType, modelType, propertyName, attributes);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> CachedDataAnnotationsModelMetadata <span class="title">CreateMetadataFromPrototype</span>(<span class="params">CachedDataAnnotationsModelMetadata prototype, Func&lt;<span class="keyword">object</span>&gt; modelAccessor</span>)</span></span><br><span class="line"><span class="function"></span>	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> CachedDataAnnotationsModelMetadata(prototype, modelAccessor);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="CachedDataAnnotationsModelMetadata"><a href="#CachedDataAnnotationsModelMetadata" class="headerlink" title="CachedDataAnnotationsModelMetadata"></a>CachedDataAnnotationsModelMetadata</h3><p><code>CachedDataAnnotationsModelMetadata</code>類別上有許多屬性,主要是方便日後來判斷使用<strong>MVC</strong>使用標籤</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line">public class CachedDataAnnotationsModelMetadata : CachedModelMetadata&lt;CachedDataAnnotationsMetadataAttributes&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">bool</span> _isEditFormatStringFromCache;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CachedDataAnnotationsModelMetadata</span>(<span class="params">CachedDataAnnotationsModelMetadata prototype, Func&lt;<span class="keyword">object</span>&gt; modelAccessor</span>)</span></span><br><span class="line"><span class="function">        : <span class="title">base</span>(<span class="params">prototype, modelAccessor</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CachedDataAnnotationsModelMetadata</span>(<span class="params">CachedDataAnnotationsModelMetadataProvider provider, Type containerType, Type modelType, <span class="keyword">string</span> propertyName, IEnumerable&lt;Attribute&gt; attributes</span>)</span></span><br><span class="line"><span class="function">        : <span class="title">base</span>(<span class="params">provider, containerType, modelType, propertyName, new CachedDataAnnotationsMetadataAttributes(attributes.ToArray(</span>)))</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">bool</span> <span class="title">ComputeConvertEmptyStringToNull</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> PrototypeCache.DisplayFormat != <span class="literal">null</span></span><br><span class="line">                    ? PrototypeCache.DisplayFormat.ConvertEmptyStringToNull</span><br><span class="line">                    : <span class="keyword">base</span>.ComputeConvertEmptyStringToNull();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">string</span> <span class="title">ComputeDataTypeName</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (PrototypeCache.DataType != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> PrototypeCache.DataType.ToDataTypeName();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (PrototypeCache.DisplayFormat != <span class="literal">null</span> &amp;&amp; !PrototypeCache.DisplayFormat.HtmlEncode)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> DataTypeUtil.HtmlTypeName;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">base</span>.ComputeDataTypeName();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>有一個蠻特別事情是<code>CachedDataAnnotationsModelMetadata : CachedModelMetadata&lt;CachedDataAnnotationsMetadataAttributes&gt;</code>他繼承一個泛型類別<code>CachedDataAnnotationsMetadataAttributes</code>存放取得物件標籤的資訊.</p>
<h3 id="CachedDataAnnotationsMetadataAttributes"><a href="#CachedDataAnnotationsMetadataAttributes" class="headerlink" title="CachedDataAnnotationsMetadataAttributes"></a>CachedDataAnnotationsMetadataAttributes</h3><p><code>CachedDataAnnotationsMetadataAttributes</code>類別主要把屬性上的某些標籤給值到類別的屬性上,方便<code>CachedDataAnnotationsModelMetadata</code>來操作使用.</p>
<p>這也是為什麼只有某些標籤掛在屬性上可以被使用.預設只有<code>CachedDataAnnotationsMetadataAttributes</code>才會被反射取得.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CachedDataAnnotationsMetadataAttributes</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">CachedDataAnnotationsMetadataAttributes</span>(<span class="params">Attribute[] attributes</span>)</span></span><br><span class="line"><span class="function"></span>	&#123;</span><br><span class="line">		DataType = attributes.OfType&lt;DataTypeAttribute&gt;().FirstOrDefault();</span><br><span class="line">		Display = attributes.OfType&lt;DisplayAttribute&gt;().FirstOrDefault();</span><br><span class="line">		DisplayColumn = attributes.OfType&lt;DisplayColumnAttribute&gt;().FirstOrDefault();</span><br><span class="line">		DisplayFormat = attributes.OfType&lt;DisplayFormatAttribute&gt;().FirstOrDefault();</span><br><span class="line">		DisplayName = attributes.OfType&lt;DisplayNameAttribute&gt;().FirstOrDefault();</span><br><span class="line">		Editable = attributes.OfType&lt;EditableAttribute&gt;().FirstOrDefault();</span><br><span class="line">		HiddenInput = attributes.OfType&lt;HiddenInputAttribute&gt;().FirstOrDefault();</span><br><span class="line">		ReadOnly = attributes.OfType&lt;ReadOnlyAttribute&gt;().FirstOrDefault();</span><br><span class="line">		Required = attributes.OfType&lt;RequiredAttribute&gt;().FirstOrDefault();</span><br><span class="line">		ScaffoldColumn = attributes.OfType&lt;ScaffoldColumnAttribute&gt;().FirstOrDefault();</span><br><span class="line">        <span class="comment">//.....</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> DataTypeAttribute DataType &#123; <span class="keyword">get</span>; <span class="keyword">protected</span> <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> DisplayAttribute Display &#123; <span class="keyword">get</span>; <span class="keyword">protected</span> <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> DisplayColumnAttribute DisplayColumn &#123; <span class="keyword">get</span>; <span class="keyword">protected</span> <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> DisplayFormatAttribute DisplayFormat &#123; <span class="keyword">get</span>; <span class="keyword">protected</span> <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> DisplayNameAttribute DisplayName &#123; <span class="keyword">get</span>; <span class="keyword">protected</span> <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> EditableAttribute Editable &#123; <span class="keyword">get</span>; <span class="keyword">protected</span> <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> HiddenInputAttribute HiddenInput &#123; <span class="keyword">get</span>; <span class="keyword">protected</span> <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment">//.....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="小結："><a href="#小結：" class="headerlink" title="小結："></a>小結：</h2><p><code>ModelMetaData</code>是一個<strong>Model Binding</strong>很重要物件,裡面存放許多調用參數的資訊.</p>
<p><strong>MVC</strong>提供一個<code>IMetadataAware</code>介面可以改變<code>ModelMetaData</code>中資訊,提高更高的彈性.</p>
<p>這篇也介紹了<code>IMetadataAware</code>介面是在哪邊做攔截.</p>
<p>另外也分享常掛在屬性上標籤取得的類別跟機制</p>
<ul>
<li><code>DisplayNameAttribute</code></li>
<li><code>RequiredAttribute</code></li>
<li><code>DisplayAttribute</code></li>
</ul>
<p>透過<code>CachedDataAnnotationsModelMetadataProvider</code>這個類別來取得以上標籤,並在日後做判斷.</p>
<p>下篇會和大家分享另一種屬性標籤<code>ValidationAttribute</code>的取得和呼叫過程.</p>
<p><strong>此文作者</strong>：Daniel Shih(石頭)<br><strong>此文地址</strong>： <a href="https://isdaniel.github.io/ithelp-day20/">https://isdaniel.github.io/ithelp-day20/</a> <br><strong>版權聲明</strong>：本博客所有文章除特別聲明外，均採用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC90dy8=" title="https://creativecommons.org/licenses/by-nc-sa/3.0/tw/">CC BY-NC-SA 3.0 TW<i class="fa fa-external-link"></i></span> 許可協議。轉載請註明出處！</p>
]]></content>
      <categories>
        <category>11th鐵人賽</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>Asp.net</tag>
        <tag>Asp.net-MVC</tag>
        <tag>SourceCode</tag>
        <tag>11th鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>探討Model驗證標籤(ValidationAttribute) (第21天)</title>
    <url>/ithelp-day21/</url>
    <content><![CDATA[<h1 id="Agenda"><a href="#Agenda" class="headerlink" title="Agenda"></a>Agenda<!-- omit in toc --></h1><ul>
<li><a href="#%e5%89%8d%e8%a8%80">前言</a></li>
<li><a href="#validationattribute">ValidationAttribute</a><ul>
<li><a href="#modelvalidatorproviders">ModelValidatorProviders</a></li>
<li><a href="#modelvalidator">ModelValidator</a></li>
</ul>
</li>
<li><a href="#compositemodelvalidator">CompositeModelValidator</a></li>
<li><a href="#dataannotationsmodelvalidator">DataAnnotationsModelValidator</a><ul>
<li><a href="#dataannotationsmodelvalidatorprovider">DataAnnotationsModelValidatorProvider</a></li>
</ul>
</li>
<li><a href="#%e5%b0%8f%e7%b5%90">小結:</a></li>
</ul>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>CachedDataAnnotationsMetadataAttributes</code>這個類別攔截某些標籤可被攔截驗證.</p>
<p>本篇會介紹另一個可以客製化驗證<code>ValidationAttribute</code>,常用驗證標籤並講述是如何參數屬性是如何取得這個標籤和使用過程.</p>
<blockquote>
<p>我有做一個可以針對於<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2lzZGFuaWVsL0FzcC5uZXQtTVZDLURlYnVnZXI=" title="https://github.com/isdaniel/Asp.net-MVC-Debuger">Asp.net MVC Debugger<i class="fa fa-external-link"></i></span>的專案，只要下中斷點就可輕易進入Asp.net MVC原始碼.</p>
</blockquote>
<h2 id="ValidationAttribute"><a href="#ValidationAttribute" class="headerlink" title="ValidationAttribute"></a>ValidationAttribute</h2><p><code>ValidationAttribute</code>類別在<code>System.ComponentModel.DataAnnotations</code>命名空間下.</p>
<p>我們可以建立一個類別繼承<code>ValidationAttribute</code>並<code>bool IsValid(object value)</code>重載方法來製做我們客制化驗證機制.</p>
<p><code>IsValid</code>方法有一個<code>Bool</code>回傳值回傳<code>true</code>代表驗證通過<code>false</code>反之</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">ValidationAttribute</span> : <span class="title">Attribute</span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">IsValid</span>(<span class="params"><span class="keyword">object</span> <span class="keyword">value</span></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">//....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<ul>
<li><code>RegularExpressionAttribute</code></li>
<li><code>StringLengthAttribute</code></li>
<li><code>RangeAttribute</code></li>
</ul>
<p>如果查看上面幾個標籤原始碼可發現這幾個標籤都是繼承於一個<code>ValidationAttribute</code>類別(這也是為什麼我們可以透過繼承<code>ValidationAttribute</code>來擴充自己驗證方式).</p>
<h3 id="ModelValidatorProviders"><a href="#ModelValidatorProviders" class="headerlink" title="ModelValidatorProviders"></a>ModelValidatorProviders</h3><p><code>ModelValidatorProviders</code>提供</p>
<ul>
<li><code>DataAnnotationsModelValidatorProvider</code></li>
<li><code>DataErrorInfoModelValidatorProvider</code></li>
<li><code>ClientDataTypeModelValidatorProvider</code></li>
</ul>
<p><code>ModelValidatorProviderCollection</code>是一個<code>ModelValidatorProvider</code>集合,可對於此集合加入<code>ModelValidatorProvider</code>物件.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">ModelValidatorProviders</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> ModelValidatorProviderCollection _providers = <span class="keyword">new</span> ModelValidatorProviderCollection()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">new</span> DataAnnotationsModelValidatorProvider(),</span><br><span class="line">		<span class="keyword">new</span> DataErrorInfoModelValidatorProvider(),</span><br><span class="line">		<span class="keyword">new</span> ClientDataTypeModelValidatorProvider()</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> ModelValidatorProviderCollection Providers</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">get</span> &#123; <span class="keyword">return</span> _providers; &#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">public class ModelValidatorProviderCollection : Collection&lt;ModelValidatorProvider&gt;</span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>如果我們需要加入一個客製化<code>ModelValidatorProvider</code>，可以直接將相應物件新增到<code>ModelValidatorProviders</code>的<code>Providers</code>集合中。</p>
<h3 id="ModelValidator"><a href="#ModelValidator" class="headerlink" title="ModelValidator"></a>ModelValidator</h3><p>所有的參數驗證都繼承自抽像類型<code>ModelValidator</code>,這個抽象類別有幾個重要成員.</p>
<ul>
<li><code>IsRequired</code>:表示該<code>ModelValidator</code>是否是對目標屬性進行必要性驗證，默認是<code>False</code></li>
<li><code>GetClientValidationRules</code>方法：<code>ModelClientValidationRule</code>是對客戶端驗證規則的封裝，我們會在進行客戶端驗證時對其進行詳細介紹。</li>
<li><code>Validate</code>方法:對於屬性實施驗證,驗證完後回傳一個<code>ModelValidationResult</code>的集合物件.</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">ModelValidator</span></span><br><span class="line">&#123;  </span><br><span class="line">	<span class="comment"><span class="doctag">///</span>....</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> IEnumerable&lt;ModelValidationResult&gt; <span class="title">Validate</span>(<span class="params"><span class="keyword">object</span> container</span>)</span>;</span><br><span class="line">    </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> IEnumerable&lt;ModelClientValidationRule&gt; <span class="title">GetClientValidationRules</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">bool</span> IsRequired &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="CompositeModelValidator"><a href="#CompositeModelValidator" class="headerlink" title="CompositeModelValidator"></a>CompositeModelValidator</h2><p>從類別名稱可看出<code>CompositeModelValidator</code>,實並不是一個真正對<code>Model</code>物件實施驗證<code>ModelValidator</code>，它是一系列<code>ModelValidator</code>組合,根據基於<code>Model</code>本身類型及其屬性的<code>Model</code>元數據動態的取得<code>ModelValidator</code>（通過調用<code>ModelMetadata.GetValidators</code>方法）對<code>Model</code>參數實施驗證。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title">CompositeModelValidator</span> : <span class="title">ModelValidator</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">override</span> IEnumerable&lt;ModelValidationResult&gt; <span class="title">Validate</span>(<span class="params"><span class="keyword">object</span> container</span>)</span></span><br><span class="line"><span class="function"></span>	&#123;</span><br><span class="line">		<span class="keyword">bool</span> propertiesValid = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">		ModelMetadata[] properties = Metadata.PropertiesAsArray;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> propertyIndex = <span class="number">0</span>; propertyIndex &lt; properties.Length; propertyIndex++)</span><br><span class="line">		&#123;</span><br><span class="line">			ModelMetadata propertyMetadata = properties[propertyIndex];</span><br><span class="line">			<span class="keyword">foreach</span> (ModelValidator propertyValidator <span class="keyword">in</span> propertyMetadata.GetValidators(ControllerContext))</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">foreach</span> (ModelValidationResult propertyResult <span class="keyword">in</span> propertyValidator.Validate(Metadata.Model))</span><br><span class="line">				&#123;</span><br><span class="line">					propertiesValid = <span class="literal">false</span>;</span><br><span class="line">					<span class="function"><span class="keyword">yield</span> return <span class="title">CreateSubPropertyResult</span>(<span class="params">propertyMetadata, propertyResult</span>)</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (propertiesValid)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">foreach</span> (ModelValidator typeValidator <span class="keyword">in</span> Metadata.GetValidators(ControllerContext))</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">foreach</span> (ModelValidationResult typeResult <span class="keyword">in</span> typeValidator.Validate(container))</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">yield</span> <span class="keyword">return</span> typeResult;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>下圖是<code>ModelValidator、ModelValidatorProvider、ModelValidatorProviders</code>UML關係圖</p>
<p><img src="https://raw.githubusercontent.com/isdaniel/MyBlog/master/source/images/itHelp/20/uml_img.png" alt="UML_Model"></p>
<h2 id="DataAnnotationsModelValidator"><a href="#DataAnnotationsModelValidator" class="headerlink" title="DataAnnotationsModelValidator"></a>DataAnnotationsModelValidator</h2><p><code>ModelValidator</code>物件是用於進行<code>Model</code>參數驗證的模組類別中的<code>ValidationAttribute</code>透過建構子設定檢驗的標籤.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DataAnnotationsModelValidator</span> : <span class="title">ModelValidator</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">DataAnnotationsModelValidator</span>(<span class="params">ModelMetadata metadata, ControllerContext context, ValidationAttribute attribute</span>)</span>;</span><br><span class="line">	<span class="keyword">protected</span> <span class="keyword">internal</span> ValidationAttribute Attribute &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">bool</span> IsRequired</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">get</span> &#123; <span class="keyword">return</span> Attribute <span class="keyword">is</span> RequiredAttribute; &#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">internal</span> <span class="keyword">static</span> ModelValidator <span class="title">Create</span>(<span class="params">ModelMetadata metadata, ControllerContext context, ValidationAttribute attribute</span>)</span></span><br><span class="line"><span class="function"></span>	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> DataAnnotationsModelValidator(metadata, context, attribute);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">override</span> IEnumerable&lt;ModelClientValidationRule&gt; <span class="title">GetClientValidationRules</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>	&#123;</span><br><span class="line">		<span class="comment">//....</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">override</span> IEnumerable&lt;ModelValidationResult&gt; <span class="title">Validate</span>(<span class="params"><span class="keyword">object</span> container</span>)</span></span><br><span class="line"><span class="function"></span>	&#123;</span><br><span class="line">		<span class="comment">//....</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>###　DataAnnotationsModelValidator<tattribute></tattribute></p>
<p><code>DataAnnotationsModelValidator&lt;TAttribute&gt;</code>這個泛型類別有一個合約<code>TAttribute</code>必須為<code>ValidationAttribute</code></p>
<p><code>DataAnnotationsModelValidator&lt;TAttribute&gt;</code>的子類。當我們將這些<code>ValidationAttribute</code>應用到<code>Model</code>型別時，真正用於<code>Model</code>參數驗證是<code>ModelValidator</code>的轉接器類別</p>
<blockquote>
<p>在這裡使用<strong>轉接器模式</strong>把每個繼承<code>ValidationAttribute</code>標籤適配給一個<code>ModelValidator</code>物件.</p>
</blockquote>
<p>例如下面程式碼每個<code>ModelValidator</code>都有自己的轉接器類別.</p>
<ul>
<li><code>RangeAttributeAdapter</code> = <code>RangeAttribute</code></li>
<li><code>RequiredAttributeAdapter</code> = <code>RequiredAttribute</code></li>
<li><code>StringLengthAttributeAdapter</code> = <code>StringLengthAttribute</code></li>
<li><code>RegularExpressionAttributeAdapter</code> = <code>RegularExpressionAttribute</code></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span></span><br><span class="line">DataAnnotationsModelValidator&lt;TAttribute&gt; : DataAnnotationsModelValidator</span><br><span class="line"><span class="keyword">where</span> TAttribute : ValidationAttribute</span><br><span class="line">&#123;	</span><br><span class="line">	<span class="comment">//....</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class RequiredAttributeAdapter : DataAnnotationsModelValidator&lt;RequiredAttribute&gt;</span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">//....</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">public class RangeAttributeAdapter : DataAnnotationsModelValidator&lt;RangeAttribute&gt;</span><br><span class="line">&#123;    </span><br><span class="line">   <span class="comment">//....</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">public class RegularExpressionAttributeAdapter : DataAnnotationsModelValidator&lt;				RegularExpressionAttribute&gt;</span><br><span class="line">&#123;    </span><br><span class="line">	<span class="comment">//....</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">public class StringLengthAttributeAdapter : DataAnnotationsModelValidator&lt;						StringLengthAttribute&gt;</span><br><span class="line">&#123;    </span><br><span class="line">	<span class="comment">//....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="DataAnnotationsModelValidatorProvider"><a href="#DataAnnotationsModelValidatorProvider" class="headerlink" title="DataAnnotationsModelValidatorProvider"></a>DataAnnotationsModelValidatorProvider</h3><p>有一個委派<code>DataAnnotationsModelValidationFactory</code>主要可以存放一個執行動作且回傳一個<code>ModelValidator</code></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">delegate</span> ModelValidator <span class="title">DataAnnotationsModelValidationFactory</span>(<span class="params">ModelMetadata metadata, ControllerContext context, ValidationAttribute attribute</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">delegate</span> ModelValidator <span class="title">DataAnnotationsValidatableObjectAdapterFactory</span>(<span class="params">ModelMetadata metadata, ControllerContext context</span>)</span>;</span><br></pre></td></tr></table></figure></div>
<ul>
<li><code>AttributeFactories</code>：一個字典集合從屬性載入預設擁有<code>ValidationAttribute</code>標籤(上面介紹的轉接器<code>RegularExpressionAttributeAdapter</code>….)</li>
<li><code>DefaultAttributeFactory</code>：如果從<code>AttributeFactories</code>這個字典無法取得繼承<code>ValidationAttribute</code>標籤(自己客製化)就藉由<code>DataAnnotationsModelValidator</code>取得.</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="keyword">static</span> DataAnnotationsModelValidationFactory DefaultAttributeFactory =</span><br><span class="line">	(metadata, context, attribute) =&gt; <span class="keyword">new</span> DataAnnotationsModelValidator(metadata, context, attribute);</span><br><span class="line"></span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">static</span> DataAnnotationsValidatableObjectAdapterFactory DefaultValidatableFactory =</span><br><span class="line">            (metadata, context) =&gt; <span class="keyword">new</span> ValidatableObjectAdapter(metadata, context);</span><br><span class="line"></span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">static</span> Dictionary&lt;Type, DataAnnotationsModelValidationFactory&gt; AttributeFactories = BuildAttributeFactoriesDictionary();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> IEnumerable&lt;ModelValidator&gt; <span class="title">GetValidators</span>(<span class="params">ModelMetadata metadata, ControllerContext context, IEnumerable&lt;Attribute&gt; attributes</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//..</span></span><br><span class="line">	<span class="keyword">foreach</span> (ValidationAttribute attribute <span class="keyword">in</span> attributes.OfType&lt;ValidationAttribute&gt;())</span><br><span class="line">	&#123;</span><br><span class="line">		DataAnnotationsModelValidationFactory factory;</span><br><span class="line">		<span class="keyword">if</span> (!AttributeFactories.TryGetValue(attribute.GetType(), <span class="keyword">out</span> factory))</span><br><span class="line">		&#123;</span><br><span class="line">			factory = DefaultAttributeFactory;</span><br><span class="line">		&#125;</span><br><span class="line">		results.Add(factory(metadata, context, attribute));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Produce a validator if the type supports IValidatableObject</span></span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">typeof</span>(IValidatableObject).IsAssignableFrom(metadata.ModelType))</span><br><span class="line">	&#123;</span><br><span class="line">		DataAnnotationsValidatableObjectAdapterFactory factory;</span><br><span class="line">		<span class="keyword">if</span> (!ValidatableFactories.TryGetValue(metadata.ModelType, <span class="keyword">out</span> factory))</span><br><span class="line">		&#123;</span><br><span class="line">			factory = DefaultValidatableFactory;</span><br><span class="line">		&#125;</span><br><span class="line">		results.Add(factory(metadata, context));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>最後從<code>Model</code>元數據中載入所有<code>ValidationAttribute</code>驗證標籤後就會在<code>DefaultModelBinder.BindProperties</code>呼叫方法時被觸發驗證</p>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結:"></a>小結:</h2><p>在整個<strong>Model-Binding</strong>流程中,算是蠻複雜的石頭希望可以跟大家簡述一些綁定概念和做法.</p>
<p><code>ValidationAttribute</code>是舊有的類別,<strong>MVC</strong>利用一系列手法將她很好融入系統中.</p>
<p>原本<code>ValidationAttribute</code>被多個標籤繼承,透過<code>DataAnnotationsModelValidator&lt;TAttribute&gt;</code>設計(讓我驚豔),變成一個1對1關係(每個<code>ValidationAttribute</code>都有自己的轉接器物件),之後就可以在<code>BuildAttributeFactoriesDictionary()</code>更方便使用.</p>
<p><strong>此文作者</strong>：Daniel Shih(石頭)<br><strong>此文地址</strong>： <a href="https://isdaniel.github.io/ithelp-day21/">https://isdaniel.github.io/ithelp-day21/</a> <br><strong>版權聲明</strong>：本博客所有文章除特別聲明外，均採用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC90dy8=" title="https://creativecommons.org/licenses/by-nc-sa/3.0/tw/">CC BY-NC-SA 3.0 TW<i class="fa fa-external-link"></i></span> 許可協議。轉載請註明出處！</p>
]]></content>
      <categories>
        <category>11th鐵人賽</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>Asp.net</tag>
        <tag>Asp.net-MVC</tag>
        <tag>SourceCode</tag>
        <tag>11th鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>View是如何被建立(一) (第22天)</title>
    <url>/ithelp-day22/</url>
    <content><![CDATA[<h1 id="Agenda"><a href="#Agenda" class="headerlink" title="Agenda"></a>Agenda<!-- omit in toc --></h1><ul>
<li><a href="#%e5%89%8d%e8%a8%80">前言</a></li>
<li><a href="#action%e6%96%b9%e6%b3%95%e6%98%af%e5%a6%82%e4%bd%95%e8%a2%ab%e5%91%bc%e5%8f%ab%e5%bf%ab%e9%80%9f%e6%95%b4%e7%90%86">Action方法是如何被呼叫(快速整理)</a></li>
<li><a href="#actionmethoddispatcher-%e5%8f%96%e5%be%97%e5%9f%b7%e8%a1%8caction%e6%96%b9%e6%b3%95">ActionMethodDispatcher 取得(執行Action方法)</a><ul>
<li><a href="#expression%e5%8b%95%e6%85%8b%e7%94%a2%e7%94%9f%e5%91%bc%e5%8f%abaction%e6%96%b9%e6%b3%95-getexecutor">Expression動態產生呼叫Action方法 (GetExecutor)</a><ul>
<li><a href="#getexecutor%e6%96%b9%e6%b3%95-expression%e7%94%a2%e7%94%9f%e5%91%bc%e5%8f%ab%e7%a8%8b%e5%bc%8f%e7%a2%bc%e8%a7%a3%e8%aa%aa">GetExecutor方法 Expression產生呼叫程式碼解說</a></li>
</ul>
</li>
<li><a href="#dispatchercache">DispatcherCache</a></li>
</ul>
</li>
<li><a href="#createactionresult">CreateActionResult</a></li>
<li><a href="#%e5%b0%8f%e7%b5%90">小結:</a></li>
</ul>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>不知道大家有沒有點暈頭轉向XD,<strong>MVC</strong>的<code>Model</code>綁定機制真的蠻複雜,希望大家有跟上來</p>
<p>透過<code>DefaultModelBinder</code>的<code>BindComplexElementalModel</code>方法綁定複雜模型的值.</p>
<p>在<code>BindProperty</code>方法時填充子節點<code>ModelMetadata</code>的<code>Model</code>屬性,透過<code>(DefaultModelBinder)</code>再次綁定物件動作如下</p>
<ul>
<li><code>ModelMetadata</code>是簡單模型就會把值填充給此次<code>ModelMetadata.Model</code></li>
<li><code>ModelMetadata</code>是複雜模型就建立一個物件後呼叫<code>BindProperty</code>直到找到最後的簡單模型.</li>
</ul>
<p>在<code>BindComplexElementalModel</code>方法做幾個主要動作</p>
<ol>
<li><code>BindProperties</code>:透過<code>MetaData</code>取得屬性資訊並利用反射把值添加上去.</li>
<li><code>OnModelUpdated</code>:找尋<code>Model</code>上<code>MetaData</code>的<code>ModelValidator</code>進行屬性驗證,如果驗證失敗會把資料資訊加到<code>ModelState.AddModelError</code>(<code>ModelStateDictionary</code>)可在<code>View</code>搭配顯示<code>error</code>訊息</li>
</ol>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">internal</span> <span class="keyword">void</span> <span class="title">BindComplexElementalModel</span>(<span class="params">ControllerContext controllerContext, ModelBindingContext bindingContext, <span class="keyword">object</span> model</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ModelBindingContext newBindingContext = CreateComplexElementalModelBindingContext(controllerContext, bindingContext, model);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (OnModelUpdating(controllerContext, newBindingContext))</span><br><span class="line">    &#123;</span><br><span class="line">        BindProperties(controllerContext, newBindingContext);</span><br><span class="line">        OnModelUpdated(controllerContext, newBindingContext);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>如果前面幾篇看不懂的小夥伴沒關係只要記得,主要透過<code>GetParameterValues</code>方法取得<code>IDictionary&lt;string, object</code>把<code>Http</code>傳送過來參數綁定到<strong>MVC</strong>使用<code>Model</code>參數上</p>
<ul>
<li>字典<code>Key</code>就是<code>Model</code>傳入名稱</li>
<li>字典<code>object</code>就是<code>Model</code>的值</li>
</ul>
<blockquote>
<p>我有做一個可以針對於<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2lzZGFuaWVsL0FzcC5uZXQtTVZDLURlYnVnZXI=" title="https://github.com/isdaniel/Asp.net-MVC-Debuger">Asp.net MVC Debugger<i class="fa fa-external-link"></i></span>的專案，只要下中斷點就可輕易進入Asp.net MVC原始碼.</p>
</blockquote>
<h2 id="Action方法是如何被呼叫-快速整理"><a href="#Action方法是如何被呼叫-快速整理" class="headerlink" title="Action方法是如何被呼叫(快速整理)"></a>Action方法是如何被呼叫(快速整理)</h2><p>前幾篇有說過<code>InvokeActionMethodWithFilters</code>方法，執行會產生要執行<code>ActionResult</code>物件並使用字典當作參數傳入</p>
<p><code>InvokeActionMethodWithFilters</code>方法中透過<code>InvokeActionMethod</code>方法來產生要執行的<code>ActionResult</code></p>
<blockquote>
<p><code>ActionExecutingContext</code>這個物件比其他過濾器參數多了一個重要的成員<code>IDictionary&lt;string, object&gt; parameters</code>,有這個成員我們可以針對呼叫<code>Action</code>參數處理.</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">virtual</span> ActionExecutedContext <span class="title">InvokeActionMethodWithFilters</span>(<span class="params">ControllerContext controllerContext, IList&lt;IActionFilter&gt; filters, ActionDescriptor actionDescriptor, IDictionary&lt;<span class="keyword">string</span>, <span class="keyword">object</span>&gt; parameters</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ActionExecutingContext preContext = <span class="keyword">new</span> ActionExecutingContext(controllerContext, actionDescriptor, parameters);</span><br><span class="line">	Func&lt;ActionExecutedContext&gt; continuation = () =&gt;</span><br><span class="line">		<span class="keyword">new</span> ActionExecutedContext(controllerContext, actionDescriptor, <span class="literal">false</span> <span class="comment">/* canceled */</span>, <span class="literal">null</span> <span class="comment">/* exception */</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			Result = InvokeActionMethod(controllerContext, actionDescriptor, parameters)</span><br><span class="line">		&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//preContext 執行前Context   next執行後Context</span></span><br><span class="line">	Func&lt;ActionExecutedContext&gt; thunk = filters.Reverse().Aggregate(continuation,(next, filter) =&gt; () =&gt; InvokeActionMethodFilter(filter, preContext, next));</span><br><span class="line">	<span class="keyword">return</span> thunk();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>在<code>InvokeActionMethod</code>這個方法主要透過<code>ActionDescriptor</code>來回傳此次使用<code>ActionResult</code>物件</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">virtual</span> ActionResult <span class="title">InvokeActionMethod</span>(<span class="params">ControllerContext controllerContext, ActionDescriptor actionDescriptor, IDictionary&lt;<span class="keyword">string</span>, <span class="keyword">object</span>&gt; parameters</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">object</span> returnValue = actionDescriptor.Execute(controllerContext, parameters);</span><br><span class="line">	ActionResult result = CreateActionResult(controllerContext, actionDescriptor, returnValue);</span><br><span class="line">	<span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>上面呼叫的是<code>ReflectedActionDescriptor.Execute</code></p>
</blockquote>
<p><code>ExtractParameterFromDictionary</code>主要透過字典的<code>TryGetValue</code>方法取值(另外還做參數型別驗證)</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">object</span> <span class="title">Execute</span>(<span class="params">ControllerContext controllerContext, IDictionary&lt;<span class="keyword">string</span>, <span class="keyword">object</span>&gt; parameters</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//.....</span></span><br><span class="line">	ParameterInfo[] parameterInfos = MethodInfo.GetParameters();</span><br><span class="line">	<span class="keyword">object</span>[] parametersArray = <span class="keyword">new</span> <span class="keyword">object</span>[parameterInfos.Length];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; parameterInfos.Length; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		ParameterInfo parameterInfo = parameterInfos[i];</span><br><span class="line">		<span class="keyword">object</span> parameter = ExtractParameterFromDictionary(parameterInfo, parameters, MethodInfo);</span><br><span class="line">		parametersArray[i] = parameter;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	ActionMethodDispatcher dispatcher = DispatcherCache.GetDispatcher(MethodInfo);</span><br><span class="line">	<span class="keyword">object</span> actionReturnValue = dispatcher.Execute(controllerContext.Controller, parametersArray);</span><br><span class="line">	<span class="keyword">return</span> actionReturnValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="ActionMethodDispatcher-取得-執行Action方法"><a href="#ActionMethodDispatcher-取得-執行Action方法" class="headerlink" title="ActionMethodDispatcher 取得(執行Action方法)"></a>ActionMethodDispatcher 取得(執行Action方法)</h2><p><code>ActionMethodDispatcher</code>原始碼能看到在建構子有一個<code>GetExecutor</code>方法(使用<code>Expression</code>表達式產生委派物件).產生<code>ActionExecutor</code>委派物件</p>
<p>裡面有幾個重要的成員</p>
<ul>
<li><code>ActionExecutor</code>:執行<code>Action</code>方法有回傳值</li>
<li><code>VoidActionExecutor</code>:執行<code>Action</code>方法回傳值是<code>void</code></li>
</ul>
<p>透過<code>GetExecutor</code>組成要使用方法委派,等待外部呼叫<code>Execute</code>方法.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">ActionMethodDispatcher</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">private</span> ActionExecutor _executor;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ActionMethodDispatcher</span>(<span class="params">MethodInfo methodInfo</span>)</span></span><br><span class="line"><span class="function"></span>	&#123;</span><br><span class="line">		_executor = GetExecutor(methodInfo);</span><br><span class="line">		MethodInfo = methodInfo;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">delegate</span> <span class="keyword">object</span> <span class="title">ActionExecutor</span>(<span class="params">ControllerBase controller, <span class="keyword">object</span>[] parameters</span>)</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">delegate</span> <span class="keyword">void</span> <span class="title">VoidActionExecutor</span>(<span class="params">ControllerBase controller, <span class="keyword">object</span>[] parameters</span>)</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> MethodInfo MethodInfo &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">object</span> <span class="title">Execute</span>(<span class="params">ControllerBase controller, <span class="keyword">object</span>[] parameters</span>)</span></span><br><span class="line"><span class="function"></span>	&#123;</span><br><span class="line">		<span class="keyword">return</span> _executor(controller, parameters);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> ActionExecutor <span class="title">GetExecutor</span>(<span class="params">MethodInfo methodInfo</span>)</span></span><br><span class="line"><span class="function"></span>	&#123;</span><br><span class="line">		<span class="comment">//...</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> ActionExecutor <span class="title">WrapVoidAction</span>(<span class="params">VoidActionExecutor executor</span>)</span></span><br><span class="line"><span class="function"></span>	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">delegate</span>(ControllerBase controller, <span class="keyword">object</span>[] parameters)</span><br><span class="line">		&#123;</span><br><span class="line">			executor(controller, parameters);</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">		&#125;;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>前篇有說過在.net原始碼為了確保執行<code>ResultFilter</code>順序在<code>InvokeActionResultWithFilters</code>方法使用遞迴呼叫.</p>
<h3 id="Expression動態產生呼叫Action方法-GetExecutor"><a href="#Expression動態產生呼叫Action方法-GetExecutor" class="headerlink" title="Expression動態產生呼叫Action方法 (GetExecutor)"></a>Expression動態產生呼叫Action方法 (GetExecutor)</h3><p><strong>MVC</strong>透過<code>Route</code>機制解析我們要呼叫<code>Controller</code>跟<code>Action</code>方法,但在呼叫時動態去判斷要呼叫哪個<code>Action</code>方法,說到動態呼叫方法,有點經驗的人就會想到使用反射(<code>reflection</code>).</p>
<p>反射固然好用,但反射對於效能來說有些不太好(因為要動態到dll <code>metadata</code>找尋取得資訊).</p>
<p><code>.net MVC</code>工程師也知道上面問題所以這邊他們使用另一種設計方式來避免此問題</p>
<blockquote>
<p>使用<code>Expression</code>表達式動態產生呼叫程式碼(也可以使用<code>Emit</code>)並呼叫使用.</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/isdaniel/MyBlog/master/source/images/itHelp/22/2019-09-30_113857.png" alt="UML_Model"></p>
<p>先來看看<code>Expreesion</code>產生呼叫<code>HomeController</code>中<code>Index</code>方法的程式碼吧.</p>
<p><code>Expression</code>表達式沒有帶參數<code>Action</code>方法</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line">.Lambda <span class="meta">#Lambda1&lt;System.Web.Mvc.ActionMethodDispatcher+ActionExecutor&gt;(</span></span><br><span class="line">    System.Web.Mvc.ControllerBase $controller,</span><br><span class="line">    System.Object[] $parameters) &#123;</span><br><span class="line">    (System.Object).Call ((Asp.net_MVC_Debuger.Controllers.HomeController)$controller).Index()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><code>Expression</code>表達式有帶參數<code>Action</code>方法</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line">.Lambda <span class="meta">#Lambda1&lt;System.Web.Mvc.ActionMethodDispatcher+ActionExecutor&gt;(</span></span><br><span class="line">    System.Web.Mvc.ControllerBase $controller,</span><br><span class="line">    System.Object[] $parameters) &#123;</span><br><span class="line">    (System.Object).Call ((Asp.net_MVC_Debuger.Controllers.HomeController)$controller).Index</span><br><span class="line">	(</span><br><span class="line">		(Asp.net_MVC_Debuger.Models.MessageViewModel)$parameters[<span class="number">0</span>]</span><br><span class="line">	)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>下面會對於<code>GetExecutor</code>方法透過<code>Expression</code>產生呼叫程式碼解說</p>
<h4 id="GetExecutor方法-Expression產生呼叫程式碼解說"><a href="#GetExecutor方法-Expression產生呼叫程式碼解說" class="headerlink" title="GetExecutor方法 Expression產生呼叫程式碼解說"></a>GetExecutor方法 Expression產生呼叫程式碼解說</h4><p>下面是<code>GetExecutor</code>原始碼,讓我一步一步大家分析如何運行吧(介紹<code>Expression</code>表達式和原始碼是如何對照).</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> ActionExecutor <span class="title">GetExecutor</span>(<span class="params">MethodInfo methodInfo</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// Parameters to executor</span></span><br><span class="line">	ParameterExpression controllerParameter = Expression.Parameter(<span class="keyword">typeof</span>(ControllerBase), <span class="string">"controller"</span>);</span><br><span class="line">	ParameterExpression parametersParameter = Expression.Parameter(<span class="keyword">typeof</span>(<span class="keyword">object</span>[]), <span class="string">"parameters"</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Build parameter list</span></span><br><span class="line">	List&lt;Expression&gt; parameters = <span class="keyword">new</span> List&lt;Expression&gt;();</span><br><span class="line">	ParameterInfo[] paramInfos = methodInfo.GetParameters();</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; paramInfos.Length; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		ParameterInfo paramInfo = paramInfos[i];</span><br><span class="line">		BinaryExpression valueObj = Expression.ArrayIndex(parametersParameter, Expression.Constant(i));</span><br><span class="line">		UnaryExpression valueCast = Expression.Convert(valueObj, paramInfo.ParameterType);</span><br><span class="line"></span><br><span class="line">		parameters.Add(valueCast);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Call method</span></span><br><span class="line">	UnaryExpression instanceCast = (!methodInfo.IsStatic) ? Expression.Convert(controllerParameter, methodInfo.ReflectedType) : <span class="literal">null</span>;</span><br><span class="line">	MethodCallExpression methodCall = methodCall = Expression.Call(instanceCast, methodInfo, parameters);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// methodCall is "((TController) controller) method((T0) parameters[0], (T1) parameters[1], ...)"</span></span><br><span class="line">	<span class="comment">// Create function</span></span><br><span class="line">	<span class="keyword">if</span> (methodCall.Type == <span class="keyword">typeof</span>(<span class="keyword">void</span>))</span><br><span class="line">	&#123;</span><br><span class="line">		Expression&lt;VoidActionExecutor&gt; lambda = Expression.Lambda&lt;VoidActionExecutor&gt;(methodCall, controllerParameter, parametersParameter);</span><br><span class="line">		VoidActionExecutor voidExecutor = lambda.Compile();</span><br><span class="line">		<span class="keyword">return</span> WrapVoidAction(voidExecutor);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// must coerce methodCall to match ActionExecutor signature</span></span><br><span class="line">		UnaryExpression castMethodCall = Expression.Convert(methodCall, <span class="keyword">typeof</span>(<span class="keyword">object</span>));</span><br><span class="line">		Expression&lt;ActionExecutor&gt; lambda = Expression.Lambda&lt;ActionExecutor&gt;(castMethodCall, controllerParameter, parametersParameter);</span><br><span class="line">		<span class="keyword">return</span> lambda.Compile();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> ActionExecutor <span class="title">WrapVoidAction</span>(<span class="params">VoidActionExecutor executor</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">delegate</span>(ControllerBase controller, <span class="keyword">object</span>[] parameters)</span><br><span class="line">	&#123;</span><br><span class="line">		executor(controller, parameters);</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">	&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>第一步、先宣告兩個<code>Parameter</code>表達式</p>
<ol>
<li><code>controller</code></li>
<li><code>parameters</code>:是一個<strong>陣列物件</strong></li>
</ol>
<p><code>lambda</code>表達式呼叫方法參數</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#Lambda1&lt;System.Web.Mvc.ActionMethodDispatcher+ActionExecutor&gt;(</span></span><br><span class="line">    System.Web.Mvc.ControllerBase $controller,</span><br><span class="line">    System.Object[] $parameters)</span><br></pre></td></tr></table></figure></div>
<p>第二步、透過<code>for loop</code>建立要傳入<code>Action</code>方法參數陣列</p>
<p>產生完後加入<code>List&lt;Expression&gt;</code>集合中</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line">(Asp.net_MVC_Debuger.Models.MessageViewModel)$parameters[<span class="number">0</span>],</span><br><span class="line">(Asp.net_MVC_Debuger.Models.MessageViewModel1)$parameters[<span class="number">1</span>]</span><br><span class="line"><span class="comment">//....</span></span><br></pre></td></tr></table></figure></div>
<p>第三步、將<code>controllerParameter</code>強轉型成呼叫使用Controller型別</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line">((Asp.net_MVC_Debuger.Controllers.HomeController)$controller)</span><br></pre></td></tr></table></figure></div>
<p>第四步、使用<code>Expression.Call</code>產生呼叫<code>Action</code>方法動作</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line">(System.Object).Call ((Asp.net_MVC_Debuger.Controllers.HomeController)$controller).Index</span><br><span class="line">(</span><br><span class="line">	(Asp.net_MVC_Debuger.Models.MessageViewModel)$parameters[<span class="number">0</span>]</span><br><span class="line">)</span><br></pre></td></tr></table></figure></div>
<p>第五步、判斷呼叫方法是否有回傳值(<code>Void</code>),<code>compile</code>成不同程式碼</p>
<p>透過<code>Expression.Lambda</code>將上面程式碼,變成<code>Lambda</code>委派方法提供<code>Execute</code>方法呼叫使用.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line">.Lambda <span class="meta">#Lambda1&lt;System.Web.Mvc.ActionMethodDispatcher+ActionExecutor&gt;(</span></span><br><span class="line">    System.Web.Mvc.ControllerBase $controller,</span><br><span class="line">    System.Object[] $parameters) &#123;</span><br><span class="line">    (System.Object).Call ((Asp.net_MVC_Debuger.Controllers.HomeController)$controller).Index()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>能看到上面程式碼如果使用反射可以很輕易完成,但性能就沒有使用<code>Expression</code>或<code>emit</code>來得好</p>
<blockquote>
<p><code>Expression</code>表達式比起<code>emit</code>更簡單了解,所以我會優先使用<code>Expression</code>表達式 </p>
</blockquote>
<h3 id="DispatcherCache"><a href="#DispatcherCache" class="headerlink" title="DispatcherCache"></a>DispatcherCache</h3><p>在取得<code>ActionMethodDispatcher</code>透過一個<code>DispatcherCache</code>屬性.</p>
<blockquote>
<p>這是為什麼呢?</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line">ActionMethodDispatcher dispatcher = DispatcherCache.GetDispatcher(MethodInfo);</span><br><span class="line"><span class="keyword">object</span> actionReturnValue = dispatcher.Execute(controllerContext.Controller, parametersArray);</span><br></pre></td></tr></table></figure></div>
<p>在上面有分享<code>ActionMethodDispatcher</code>透過<code>Expression</code>表達式產生呼叫方法</p>
<blockquote>
<p>但<code>Http</code>請求很頻繁,雖然透過<code>Expression</code>表達式動態產生程式碼呼叫比反射效能來好,但一直重複產生程式碼也需要很多效能.</p>
</blockquote>
<p><strong>MVC</strong>使用一個<code>Cache</code>來保存已經呼叫過資訊<code>DispatcherCache</code></p>
<p>主要邏輯判斷此<code>MethodInfo</code>是否已經有存入快取字典中.如果沒有建立一個新<code>ActionMethodDispatcher</code>(產生一個新<code>Expression</code>)</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line">internal sealed class ActionMethodDispatcherCache : ReaderWriterCache&lt;MethodInfo, ActionMethodDispatcher&gt;</span><br><span class="line">&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ActionMethodDispatcherCache</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>	&#123;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> ActionMethodDispatcher <span class="title">GetDispatcher</span>(<span class="params">MethodInfo methodInfo</span>)</span></span><br><span class="line"><span class="function"></span>	&#123;</span><br><span class="line">		<span class="comment">// Frequently called, so ensure delegate remains static</span></span><br><span class="line">		<span class="keyword">return</span> FetchOrCreateItem(methodInfo, (MethodInfo methodInfoInner) =&gt; <span class="keyword">new</span> ActionMethodDispatcher(methodInfoInner), methodInfo);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="CreateActionResult"><a href="#CreateActionResult" class="headerlink" title="CreateActionResult"></a>CreateActionResult</h2><p><code>CreateActionResult</code>判斷剛剛產生的<code>ActionResult</code>物件進行下面簡單處理</p>
<ol>
<li><code>actionReturnValue</code>如果是<code>NULL</code>(回傳值是<code>void</code>)就回傳一個<code>EmptyResult</code>(什麼都不做)</li>
<li>是否是回傳<code>ActionResult</code>物件,如果不是就利用<code>ContentResult</code>來將結果包起來.</li>
</ol>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">virtual</span> ActionResult <span class="title">CreateActionResult</span>(<span class="params">ControllerContext controllerContext, ActionDescriptor actionDescriptor, <span class="keyword">object</span> actionReturnValue</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (actionReturnValue == <span class="literal">null</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> EmptyResult();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	ActionResult actionResult = (actionReturnValue <span class="keyword">as</span> ActionResult) ??</span><br><span class="line">	<span class="keyword">new</span> ContentResult &#123; Content = Convert.ToString(actionReturnValue, CultureInfo.InvariantCulture) &#125;;</span><br><span class="line">	<span class="keyword">return</span> actionResult;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>最後透過<code>ControllerActionInvoker.InvokeActionResult</code>來呼叫<code>ActionResult</code>抽象方法<code>ExecuteResult(ControllerContext context)</code>.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">InvokeActionResult</span>(<span class="params">ControllerContext controllerContext, ActionResult actionResult</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	actionResult.ExecuteResult(controllerContext);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結:"></a>小結:</h2><p>本篇介紹了在<code>ReflectedActionDescriptor.Execute</code>方法產生一個<code>ActionResult</code>物件.</p>
<p><code>ActionMethodDispatcher</code>這個類別負責產生要呼叫<code>ActionResult</code>方法(透過<code>RouteData</code>的<code>ActionNmae</code>和反射取得<code>Controller</code>的<code>MethInfo</code>最後透過<code>Expression</code>表達式組成一個呼叫委派方法)</p>
<p>利用<code>DispatcherCache</code>屬性對於每個呼叫過的<code>ActionMethodDispatcher</code>進行快取增加使用效率.</p>
<blockquote>
<p>上面使用<code>Expreesion</code>動態產生程式碼並使用<code>Cache</code>這個構想很適合應用在高併發且吃效率情境上.值得我們學習</p>
</blockquote>
<p>最後利用<code>CreateActionResult</code>判斷來產生要執行<code>ActionResult</code></p>
<blockquote>
<p><code>CreateActionResult</code>方法有用到一個設計技巧<span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTnVsbF9vYmplY3RfcGF0dGVybg==" title="https://en.wikipedia.org/wiki/Null_object_pattern">null object pattern<i class="fa fa-external-link"></i></span> 這個模式用意是為了讓<code>NULL</code>或預設情況也有物件來執行(因為<code>NULL</code>也有屬於它的處理情境)</p>
</blockquote>
<blockquote>
<p>今天介紹<strong>MVC</strong>如何運用<code>Expression</code>表達式,對於<code>Expression</code>表達式之後有機會在跟大家做更詳細分享介紹</p>
</blockquote>
<p>至於有那些<code>ActionResult</code>可以呼叫我們在下篇會再詳細介紹</p>
<p><strong>此文作者</strong>：Daniel Shih(石頭)<br><strong>此文地址</strong>： <a href="https://isdaniel.github.io/ithelp-day22/">https://isdaniel.github.io/ithelp-day22/</a> <br><strong>版權聲明</strong>：本博客所有文章除特別聲明外，均採用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC90dy8=" title="https://creativecommons.org/licenses/by-nc-sa/3.0/tw/">CC BY-NC-SA 3.0 TW<i class="fa fa-external-link"></i></span> 許可協議。轉載請註明出處！</p>
]]></content>
      <categories>
        <category>11th鐵人賽</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>Asp.net</tag>
        <tag>Asp.net-MVC</tag>
        <tag>SourceCode</tag>
        <tag>11th鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>6個基本(ActionResult) View是如何被建立(二) (第23天)</title>
    <url>/ithelp-day23/</url>
    <content><![CDATA[<h1 id="Agenda"><a href="#Agenda" class="headerlink" title="Agenda"></a>Agenda<!-- omit in toc --></h1><ul>
<li><a href="#%e5%89%8d%e8%a8%80">前言</a></li>
<li><a href="#6%e7%a8%ae%e5%9f%ba%e6%9c%ac%e7%9a%84actionresult">6種基本的ActionResult</a></li>
<li><a href="#contentresult">ContentResult</a></li>
<li><a href="#redirectresult--redirecttorouteresult">RedirectResult &amp; RedirectToRouteResult</a></li>
<li><a href="#emptyresult">EmptyResult</a></li>
<li><a href="#fileresult">FileResult</a><ul>
<li><a href="#filecontentresult">FileContentResult</a></li>
<li><a href="#filepathresult">FilePathResult</a></li>
</ul>
</li>
<li><a href="#%e5%b0%8f%e7%b5%90">小結:</a></li>
</ul>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上一篇介紹到<code>CreateActionResult</code>方法會產生一個<code>ActionResult</code>物件利用<code>MethodInfo</code>資訊.</p>
<p>最後透過<code>InvokeActionResult</code>來呼叫<code>ExecuteResult</code>方法來執行<code>ActionResult</code>的<code>ExecuteResult</code>方法,基本上<strong>MVC</strong>找到且執行<strong>Action</strong>方法後面就沒再做甚麼特別的事情了(後面做資源釋放…)</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">InvokeActionResult</span>(<span class="params">ControllerContext controllerContext, ActionResult actionResult</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	actionResult.ExecuteResult(controllerContext);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>本篇來介紹常用的<code>ActionResult</code>其內部運作程式碼</p>
<blockquote>
<p>我有做一個可以針對於<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2lzZGFuaWVsL0FzcC5uZXQtTVZDLURlYnVnZXI=" title="https://github.com/isdaniel/Asp.net-MVC-Debuger">Asp.net MVC Debugger<i class="fa fa-external-link"></i></span>的專案，只要下中斷點就可輕易進入Asp.net MVC原始碼.</p>
</blockquote>
<h2 id="6種基本的ActionResult"><a href="#6種基本的ActionResult" class="headerlink" title="6種基本的ActionResult"></a>6種基本的ActionResult</h2><p>下面這六個類別是直接繼承於<code>ActionResult</code>的類別(其中有標註<strong>Base class</strong>代表這是抽象類別另外有類別繼承它)</p>
<ul>
<li><code>ContentResult</code>:回傳一組字串,利用<code>response.Write</code>方法</li>
<li><code>EmptyResult</code>:什麼都不動作(當<code>Action</code>回傳<code>void</code>使用)</li>
<li><code>FileResult(Base class)</code>:把檔案當作回傳</li>
<li><code>HttpStatusCodeResult</code>:回傳<strong>HTTP</strong>狀態碼</li>
<li><code>RedirectResult &amp; RedirectToRouteResult</code>:使用<code>Response.Redirect</code>轉導到其他頁面</li>
<li><code>ViewResultBase(Base class)</code>:會找尋相對應<code>View</code>檔案(<code>cshtml</code>會編譯成一個<code>DLL</code>)來執行</li>
</ul>
<blockquote>
<p><code>ViewResultBase</code>會在另一篇介紹(因為機制比較複雜)</p>
</blockquote>
<h2 id="ContentResult"><a href="#ContentResult" class="headerlink" title="ContentResult"></a>ContentResult</h2><p>在<code>ContentResult</code>有三個屬性</p>
<ul>
<li><code>Content</code>:響應內容.</li>
<li><code>ContentType</code>:設置Http <code>Header</code>攔位<code>ContentType</code></li>
<li><code>ContentEncoding</code>:設置<code>Encoding</code>方式</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ContentResult</span> : <span class="title">ActionResult</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Content &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Encoding ContentEncoding &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> ContentType &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">ExecuteResult</span>(<span class="params">ControllerContext context</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (context == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="string">"context"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        HttpResponseBase response = context.HttpContext.Response;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!String.IsNullOrEmpty(ContentType))</span><br><span class="line">        &#123;</span><br><span class="line">            response.ContentType = ContentType;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ContentEncoding != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            response.ContentEncoding = ContentEncoding;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (Content != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            response.Write(Content);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><code>ContentResult</code>操作很簡單透過<code>response.Write</code>把內容<code>Print</code>出來</p>
<h2 id="RedirectResult-amp-RedirectToRouteResult"><a href="#RedirectResult-amp-RedirectToRouteResult" class="headerlink" title="RedirectResult &amp; RedirectToRouteResult"></a>RedirectResult &amp; RedirectToRouteResult</h2><p><code>RedirectResult</code>這個<code>ActionResult</code>如其名就是導轉頁面.</p>
<ul>
<li><code>Permanent</code>:屬性判斷是否需要<code>Permanently</code>導轉頁面(<strong>Http-Code</strong>:<code>RedirectPermanent=301</code>,<code>Redirect=302</code>)</li>
<li><code>Url</code>:轉導的<code>URL</code>透過<code>UrlHelper.GenerateContentUrl</code>產生<code>URL</code>.(在<code>GenerateContentUrl</code>會判斷第一個字元是否是<code>~</code>波浪號,如果是代表站內導轉.)</li>
</ul>
<p>最後利用<code>Permanent</code>布林判斷使用<code>RedirectPermanent</code>還是<code>Redirect</code>方法.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RedirectResult</span> : <span class="title">ActionResult</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">bool</span> Permanent &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">string</span> Url &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">ExecuteResult</span>(<span class="params">ControllerContext context</span>)</span></span><br><span class="line"><span class="function"></span>	&#123;</span><br><span class="line">		<span class="keyword">if</span> (context == <span class="literal">null</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="string">"context"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (context.IsChildAction)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(MvcResources.RedirectAction_CannotRedirectInChildAction);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">string</span> destinationUrl = UrlHelper.GenerateContentUrl(Url, context.HttpContext);</span><br><span class="line">		context.Controller.TempData.Keep();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (Permanent)</span><br><span class="line">		&#123;</span><br><span class="line">			context.HttpContext.Response.RedirectPermanent(destinationUrl, endResponse: <span class="literal">false</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			context.HttpContext.Response.Redirect(destinationUrl, endResponse: <span class="literal">false</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p><code>RedirectToRouteResult</code>基本流程跟上面一樣只是透過<code>UrlHelper.GenerateUrl</code>產生要導轉URL</p>
</blockquote>
<h2 id="EmptyResult"><a href="#EmptyResult" class="headerlink" title="EmptyResult"></a>EmptyResult</h2><p><code>EmptyResult</code>這個類別很有趣,只有override <code>ExecuteResult</code>方法但沒有實做,上篇小結有提到這裡使用一個設計模式<span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTnVsbF9vYmplY3RfcGF0dGVybg==" title="https://en.wikipedia.org/wiki/Null_object_pattern">null object pattern<i class="fa fa-external-link"></i></span>.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EmptyResult</span> : <span class="title">ActionResult</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> EmptyResult _singleton = <span class="keyword">new</span> EmptyResult();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">static</span> EmptyResult Instance</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> _singleton; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">ExecuteResult</span>(<span class="params">ControllerContext context</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="FileResult"><a href="#FileResult" class="headerlink" title="FileResult"></a>FileResult</h2><p><code>FileResult</code>是一個抽象類別,提供一個抽象方法給<code>abstract void WriteFile(HttpResponseBase response)</code>子類提供覆寫.</p>
<p>有兩個類別繼承於<code>FileResult</code>抽象類別</p>
<ul>
<li><code>FilePathResult</code></li>
<li><code>FileContentResult</code></li>
</ul>
<p><code>FileResult</code>抽象類別在<code>ExecuteResult</code>設置傳輸檔案需要的前置作業(設置<code>Content-Type</code>…),最後的資料傳輸透過各個子類別去實現.</p>
<blockquote>
<p>其中<code>headerValue</code>實做Http回應擋頭對於<code>RFC</code>規範.</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// From RFC 2183, Sec. 2.3:</span></span><br><span class="line"><span class="comment">// The sender may want to suggest a filename to be used if the entity is</span></span><br><span class="line"><span class="comment">// detached and stored in a separate file. If the receiving MUA writes</span></span><br><span class="line"><span class="comment">// the entity to a file, the suggested filename should be used as a</span></span><br><span class="line"><span class="comment">// basis for the actual filename, where possible.</span></span><br><span class="line"><span class="keyword">string</span> headerValue = ContentDispositionUtil.GetHeaderValue(FileDownloadName);</span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">FileResult</span> : <span class="title">ActionResult</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">string</span> _fileDownloadName;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="title">FileResult</span>(<span class="params"><span class="keyword">string</span> contentType</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">if</span> (String.IsNullOrEmpty(contentType))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(MvcResources.Common_NullOrEmpty, <span class="string">"contentType"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ContentType = contentType;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> ContentType &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> FileDownloadName</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span> &#123; <span class="keyword">return</span> _fileDownloadName ?? String.Empty; &#125;</span><br><span class="line">            <span class="keyword">set</span> &#123; _fileDownloadName = <span class="keyword">value</span>; &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">ExecuteResult</span>(<span class="params">ControllerContext context</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">if</span> (context == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="string">"context"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            HttpResponseBase response = context.HttpContext.Response;</span><br><span class="line">            response.ContentType = ContentType;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!String.IsNullOrEmpty(FileDownloadName))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">string</span> headerValue = ContentDispositionUtil.GetHeaderValue(FileDownloadName);</span><br><span class="line">                context.HttpContext.Response.AddHeader(<span class="string">"Content-Disposition"</span>, headerValue);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            WriteFile(response);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">WriteFile</span>(<span class="params">HttpResponseBase response</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="FileContentResult"><a href="#FileContentResult" class="headerlink" title="FileContentResult"></a>FileContentResult</h3><p><code>FileContentResult</code>將檔案已位元組方式轉存給<code>Client</code>端.</p>
<p>透過<code>HttpResponseBase.OutputStream.Write</code>方法.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FileContentResult</span> : <span class="title">FileResult</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FileContentResult</span>(<span class="params"><span class="keyword">byte</span>[] fileContents, <span class="keyword">string</span> contentType</span>)</span></span><br><span class="line"><span class="function">        : <span class="title">base</span>(<span class="params">contentType</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (fileContents == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="string">"fileContents"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        FileContents = fileContents;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] FileContents &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">WriteFile</span>(<span class="params">HttpResponseBase response</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        response.OutputStream.Write(FileContents, <span class="number">0</span>, FileContents.Length);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="FilePathResult"><a href="#FilePathResult" class="headerlink" title="FilePathResult"></a>FilePathResult</h3><p><code>FilePathResult</code>透過檔案名稱<code>FileName</code>將檔案提供給<code>Client</code></p>
<p>藉由<code>HttpResponseBase.TransmitFile</code>方法.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FilePathResult</span> : <span class="title">FileResult</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FilePathResult</span>(<span class="params"><span class="keyword">string</span> fileName, <span class="keyword">string</span> contentType</span>)</span></span><br><span class="line"><span class="function">        : <span class="title">base</span>(<span class="params">contentType</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (String.IsNullOrEmpty(fileName))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(MvcResources.Common_NullOrEmpty, <span class="string">"fileName"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        FileName = fileName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> FileName &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">WriteFile</span>(<span class="params">HttpResponseBase response</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        response.TransmitFile(FileName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結:"></a>小結:</h2><p>本篇介紹了幾個實現<code>ActionResult</code>類別,跟其內部程式碼,這裡能了解到<strong>MVC</strong>返回結果機於<code>ActionResult</code>方法.(這個概念我運用在<code>Web Api</code>服務,建立<code>ResponseBase</code>共同簽章,因為在做服務串接每個服務都有自己的加解密,回傳格式攔位.我可以統一透過一個<code>ResponseBase</code>類別裝載資料再藉由過濾器來幫忙組成相對應的資料回傳….)</p>
<p>下篇會來介紹繼承<code>ActionResult</code>最複雜的<code>ViewResultBase</code>相關程式碼.</p>
<p><strong>此文作者</strong>：Daniel Shih(石頭)<br><strong>此文地址</strong>： <a href="https://isdaniel.github.io/ithelp-day23/">https://isdaniel.github.io/ithelp-day23/</a> <br><strong>版權聲明</strong>：本博客所有文章除特別聲明外，均採用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC90dy8=" title="https://creativecommons.org/licenses/by-nc-sa/3.0/tw/">CC BY-NC-SA 3.0 TW<i class="fa fa-external-link"></i></span> 許可協議。轉載請註明出處！</p>
]]></content>
      <categories>
        <category>11th鐵人賽</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>Asp.net</tag>
        <tag>Asp.net-MVC</tag>
        <tag>SourceCode</tag>
        <tag>11th鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>探討ViewEngine機制 View是如何被建立(三) (第24天)</title>
    <url>/ithelp-day24/</url>
    <content><![CDATA[<h1 id="Agenda"><a href="#Agenda" class="headerlink" title="Agenda"></a>Agenda<!-- omit in toc --></h1><ul>
<li><a href="#%e5%89%8d%e8%a8%80">前言</a></li>
<li><a href="#viewresultbaseexecuteresult">ViewResultBase.ExecuteResult</a></li>
<li><a href="#iview">IView</a><ul>
<li><a href="#buildmanagercompiledview">BuildManagerCompiledView</a></li>
<li><a href="#razorview">RazorView</a></li>
</ul>
</li>
<li><a href="#iviewengine">IViewEngine</a><ul>
<li><a href="#virtualpathproviderviewengine">VirtualPathProviderViewEngine</a></li>
<li><a href="#razorviewengine">RazorViewEngine</a></li>
<li><a href="#viewengines-and-viewenginecollection">ViewEngines and ViewEngineCollection</a></li>
</ul>
</li>
<li><a href="#%e6%8f%90%e5%8d%87%e5%9f%b7%e8%a1%8c%e6%95%88%e7%8e%87%e5%b0%8f%e6%8a%80%e5%b7%a7">提升執行效率小技巧</a><ul>
<li><a href="#%e7%a7%bb%e9%99%a4%e4%b8%8d%e5%bf%85%e8%a6%81viewengine%e6%8f%90%e5%8d%87%e5%9f%b7%e8%a1%8c%e6%95%88%e7%8e%87">移除不必要ViewEngine提升執行效率</a></li>
<li><a href="#%e5%8f%aa%e5%85%81%e8%a8%b1%e6%9f%90%e5%80%8bview%e5%89%af%e6%aa%94%e5%90%8d">只允許某個View副檔名</a></li>
</ul>
</li>
<li><a href="#%e5%b0%8f%e7%b5%90">小結:</a></li>
</ul>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>繼承<code>ActiontResult</code>類別中<code>ViewResultBase</code>最為複雜,因為<code>ViewResultBase</code>要找到實現<code>IViewEngine</code>物件取得取得<code>View</code>檔案,在透過實現<code>IView</code>物件把頁面渲染出來.</p>
<p>這篇會跟大家分享值型上面動作核心類別.</p>
<p>個人覺得<strong>MVC</strong>運用很多物件導向概念和用法,在讀程式時有件事情很重要是理解類別負責的工作和類別之間關係.就像現實生活中人與人的關係要了解清楚.</p>
<blockquote>
<p>我有做一個可以針對於<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2lzZGFuaWVsL0FzcC5uZXQtTVZDLURlYnVnZXI=" title="https://github.com/isdaniel/Asp.net-MVC-Debuger">Asp.net MVC Debugger<i class="fa fa-external-link"></i></span>的專案，只要下中斷點就可輕易進入Asp.net MVC原始碼.</p>
</blockquote>
<h2 id="ViewResultBase-ExecuteResult"><a href="#ViewResultBase-ExecuteResult" class="headerlink" title="ViewResultBase.ExecuteResult"></a>ViewResultBase.ExecuteResult</h2><p>因為<code>ExecuteResult</code>是最終被呼叫方法,我們來解析<code>ViewResultBase.ExecuteResult</code>方法邏輯.</p>
<ol>
<li>透過子類別實現<code>FindView</code>取得<code>View</code>相關資料.</li>
<li>呼叫實現<code>IView</code>物件<code>Render</code>方法,並將渲染出來資料透過<code>Response.Output</code>輸出到<code>Client</code>端</li>
</ol>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">ExecuteResult</span>(<span class="params">ControllerContext context</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (context == <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="string">"context"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (String.IsNullOrEmpty(ViewName))</span><br><span class="line">    &#123;</span><br><span class="line">        ViewName = context.RouteData.GetRequiredString(<span class="string">"action"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ViewEngineResult result = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (View == <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        result = FindView(context);</span><br><span class="line">        View = result.View;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    TextWriter writer = context.HttpContext.Response.Output;</span><br><span class="line">    ViewContext viewContext = <span class="keyword">new</span> ViewContext(context, View, ViewData, TempData, writer);</span><br><span class="line">    View.Render(viewContext, writer);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (result != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        result.ViewEngine.ReleaseView(context, View);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> ViewEngineResult <span class="title">FindView</span>(<span class="params">ControllerContext context</span>)</span>;</span><br></pre></td></tr></table></figure></div>
<p>這張<code>UML</code>表示<code>ViewResultBase</code>繼承關係圖.</p>
<p>我們在<code>Controller</code>呼叫的<code>View()</code>和<code>PartailView()</code>方法就是建立<code>PartialViewResult</code>和<code>ViewResult</code>方法並且呼叫<code>ExecuteResult</code>進行<code>View</code>頁面渲染.</p>
<p><img src="https://raw.githubusercontent.com/isdaniel/MyBlog/master/source/images/itHelp/24/ViewResultBase_UML.png" alt="UML_Model"></p>
<h2 id="IView"><a href="#IView" class="headerlink" title="IView"></a>IView</h2><p>View是一個實現了<code>IView</code>介面物件。<code>IView</code>定義非常簡單，僅僅具有唯一<code>Render</code>方法根據指定<code>ViewContext</code>和<code>TextWriter</code>物件達成對於<code>View</code>渲染顯示</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IView</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Render</span>(<span class="params">ViewContext viewContext, TextWriter writer</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="BuildManagerCompiledView"><a href="#BuildManagerCompiledView" class="headerlink" title="BuildManagerCompiledView"></a>BuildManagerCompiledView</h3><p><code>BuildManagerCompiledView</code>類別實現<code>Render</code>對於<code>View</code>如何被渲染呈現.</p>
<p>主要透過下面幾個步驟.</p>
<ol>
<li><code>.cshtml,.aspx</code>頁面程式碼會轉成編譯成一個繼承<code>WebViewPage</code>類別的<code>dll</code>檔案.<code>BuildManagerWrapper</code>靜態方法<code>GetCompiledType</code>依據指定<code>View</code>檔案虛擬路徑得到編譯後<code>WebPageView</code>類型</li>
<li><code>IViewPageActivator(DefaultViewPageActivator)</code>利用反射建立<code>WebPageView</code>物件由頁面程式產生的<code>View</code>物件</li>
<li>最後再呼叫由子類實現<code>RenderView</code>方法</li>
</ol>
<blockquote>
<p><code>BuildManagerCompiledView</code>屬性<code>ViewPath</code>表示的就是<code>View</code>文件虛擬路徑.</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">BuildManagerCompiledView</span> : <span class="title">IView</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">internal</span> IViewPageActivator ViewPageActivator;</span><br><span class="line">	<span class="keyword">private</span> IBuildManager _buildManager;</span><br><span class="line">	<span class="keyword">private</span> ControllerContext _controllerContext;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">internal</span> IBuildManager BuildManager</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">get</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (_buildManager == <span class="literal">null</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				_buildManager = <span class="keyword">new</span> BuildManagerWrapper();</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> _buildManager;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">set</span> &#123; _buildManager = <span class="keyword">value</span>; &#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">string</span> ViewPath &#123; <span class="keyword">get</span>; <span class="keyword">protected</span> <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Render</span>(<span class="params">ViewContext viewContext, TextWriter writer</span>)</span></span><br><span class="line"><span class="function"></span>	&#123;</span><br><span class="line">		<span class="keyword">if</span> (viewContext == <span class="literal">null</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="string">"viewContext"</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">object</span> instance = <span class="literal">null</span>;</span><br><span class="line">		<span class="comment">//取得view型態</span></span><br><span class="line">		Type type = BuildManager.GetCompiledType(ViewPath);</span><br><span class="line">		<span class="keyword">if</span> (type != <span class="literal">null</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			instance = ViewPageActivator.Create(_controllerContext, type);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (instance == <span class="literal">null</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(</span><br><span class="line">				String.Format(</span><br><span class="line">					CultureInfo.CurrentCulture,</span><br><span class="line">					MvcResources.CshtmlView_ViewCouldNotBeCreated,</span><br><span class="line">					ViewPath));</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		RenderView(viewContext, writer, instance);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">RenderView</span>(<span class="params">ViewContext viewContext, TextWriter writer, <span class="keyword">object</span> instance</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="RazorView"><a href="#RazorView" class="headerlink" title="RazorView"></a>RazorView</h3><p><code>RazorView</code>繼承<code>BuildManagerCompiledView</code>,<code>RazorView</code>具有三個只讀屬性</p>
<ul>
<li><code>LayoutPath</code>：<code>View</code>佈局檔案虛擬路徑</li>
<li><code>ViewStartFileExtensions</code>：表示開始頁面文件的擴展名,對於<code>Razor</code>引擎默認創建<code>RazorView</code>,通過<code>_ViewStart.cshtml</code>檔案定義開始頁面相關資訊.</li>
<li><code>RunViewStartPages</code>:這個<code>bool</code>掌控執行開始頁面判斷</li>
<li><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RazorView</span> : <span class="title">BuildManagerCompiledView</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">string</span> LayoutPath &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">bool</span> RunViewStartPages &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> IEnumerable&lt;<span class="keyword">string</span>&gt; ViewStartFileExtensions &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">RenderView</span>(<span class="params">ViewContext viewContext, TextWriter writer, <span class="keyword">object</span> instance</span>)</span></span><br><span class="line"><span class="function"></span>	&#123;</span><br><span class="line">		<span class="keyword">if</span> (writer == <span class="literal">null</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="string">"writer"</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		WebViewPage webViewPage = instance <span class="keyword">as</span> WebViewPage;</span><br><span class="line">		<span class="keyword">if</span> (webViewPage == <span class="literal">null</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(</span><br><span class="line">				String.Format(</span><br><span class="line">					CultureInfo.CurrentCulture,</span><br><span class="line">					MvcResources.CshtmlView_WrongViewBase,</span><br><span class="line">					ViewPath));</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		webViewPage.OverridenLayoutPath = LayoutPath;</span><br><span class="line">		webViewPage.VirtualPath = ViewPath;</span><br><span class="line">		webViewPage.ViewContext = viewContext;</span><br><span class="line">		webViewPage.ViewData = viewContext.ViewData;</span><br><span class="line"></span><br><span class="line">		webViewPage.InitHelpers();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (VirtualPathFactory != <span class="literal">null</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			webViewPage.VirtualPathFactory = VirtualPathFactory;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (DisplayModeProvider != <span class="literal">null</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			webViewPage.DisplayModeProvider = DisplayModeProvider;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		WebPageRenderingBase startPage = <span class="literal">null</span>;</span><br><span class="line">		<span class="keyword">if</span> (RunViewStartPages)</span><br><span class="line">		&#123;</span><br><span class="line">			startPage = StartPageLookup(webViewPage, RazorViewEngine.ViewStartFileName, ViewStartFileExtensions);</span><br><span class="line">		&#125;</span><br><span class="line">		webViewPage.ExecutePageHierarchy(<span class="keyword">new</span> WebPageContext(context: viewContext.HttpContext, page: <span class="literal">null</span>, model: <span class="literal">null</span>), writer, startPage);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
</ul>
<p><code>RenderView</code>方法執行幾個步驟.</p>
<ol>
<li><code>RenderView</code>方法將<code>BuildManagerCompiledView</code>方法取得<code>instance</code>物件轉換型別成<code>WebViewPage</code></li>
<li>資料初始化(建立<code>UrlHelp</code>,….)物件</li>
<li>判斷是否使用<code>Razor</code>共用樣板</li>
<li>呼叫<code>ExecutePageHierarchy</code>,進行頁面渲染,最主要呼叫<code>Execute</code>方法來執行子類別實現邏輯.</li>
</ol>
<p>下面是<code>IView</code>類別關係圖</p>
<p><img src="https://raw.githubusercontent.com/isdaniel/MyBlog/master/source/images/itHelp/24/IView_Uml.png" alt="UML_Model"></p>
<p>最後由<code>WebFormView</code>,<code>RazorView</code>實現頁面的渲染工作.</p>
<h2 id="IViewEngine"><a href="#IViewEngine" class="headerlink" title="IViewEngine"></a>IViewEngine</h2><p>這個介面提供找尋使用<code>ViewEngineResult</code>,<code>View</code>和<code>ViewEngine</code>屬性找到<code>View</code>物件和使用的<code>ViewEngine</code>物件,<code>SearchedLocations</code>屬性表示在獲取目標搜索過程中使用的搜索位置列表</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IViewEngine</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">ViewEngineResult <span class="title">FindPartialView</span>(<span class="params">ControllerContext controllerContext, <span class="keyword">string</span> partialViewName, <span class="keyword">bool</span> useCache</span>)</span>;</span><br><span class="line">    <span class="function">ViewEngineResult <span class="title">FindView</span>(<span class="params">ControllerContext controllerContext, <span class="keyword">string</span> viewName, <span class="keyword">string</span> masterName, <span class="keyword">bool</span> useCache</span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ReleaseView</span>(<span class="params">ControllerContext controllerContext, IView view</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ViewEngineResult</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">public</span> IEnumerable&lt;<span class="keyword">string</span>&gt; SearchedLocations &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> IView View &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> IViewEngine ViewEngine &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="VirtualPathProviderViewEngine"><a href="#VirtualPathProviderViewEngine" class="headerlink" title="VirtualPathProviderViewEngine"></a>VirtualPathProviderViewEngine</h3><p><code>VirtualPathProviderViewEngine</code>這個抽象類別,實現<code>FindPartialView</code>和<code>FindView</code>方法,另外提供一個抽象方法<code>CreateView</code>和<code>CreatePartialView</code>提供子類(<code>WebFormViewEngine</code>,<code>RazorViewEngine</code>)來實現.</p>
<p>下面是<code>FindView</code>原始碼.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> ViewEngineResult <span class="title">FindView</span>(<span class="params">ControllerContext controllerContext, <span class="keyword">string</span> viewName, <span class="keyword">string</span> masterName, <span class="keyword">bool</span> useCache</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//....</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">string</span>[] viewLocationsSearched;</span><br><span class="line">    <span class="keyword">string</span>[] masterLocationsSearched;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">string</span> controllerName = controllerContext.RouteData.GetRequiredString(<span class="string">"controller"</span>);</span><br><span class="line">    <span class="keyword">string</span> viewPath = GetPath(controllerContext, ViewLocationFormats, AreaViewLocationFormats, <span class="string">"ViewLocationFormats"</span>, viewName, controllerName, CacheKeyPrefixView, useCache, <span class="keyword">out</span> viewLocationsSearched);</span><br><span class="line">    <span class="keyword">string</span> masterPath = GetPath(controllerContext, MasterLocationFormats, AreaMasterLocationFormats, <span class="string">"MasterLocationFormats"</span>, masterName, controllerName, CacheKeyPrefixMaster, useCache, <span class="keyword">out</span> masterLocationsSearched);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (String.IsNullOrEmpty(viewPath) || (String.IsNullOrEmpty(masterPath) &amp;&amp; !String.IsNullOrEmpty(masterName)))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ViewEngineResult(viewLocationsSearched.Union(masterLocationsSearched));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ViewEngineResult(CreateView(controllerContext, viewPath, masterPath), <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="RazorViewEngine"><a href="#RazorViewEngine" class="headerlink" title="RazorViewEngine"></a>RazorViewEngine</h3><p>前面有提到<code>VirtualPathProviderViewEngine</code>提供一個抽象類別給子類來實現如何建立一個<code>IView</code>物件.</p>
<p><code>RazorViewEngine</code>透過上面資訊建立一個<code>RazorView</code>(此類別實現<code>IView</code>介面),最終<code>ViewBaseResult</code>就是呼叫<code>IView</code>的<code>Render</code>方法.</p>
<blockquote>
<p><code>RazorViewEngine</code>就是建立到時候要<code>Render</code>到<code>OutputStream</code>物件.</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> IView <span class="title">CreateView</span>(<span class="params">ControllerContext controllerContext, <span class="keyword">string</span> viewPath, <span class="keyword">string</span> masterPath</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> view = <span class="keyword">new</span> RazorView(controllerContext, viewPath,</span><br><span class="line">                                layoutPath: masterPath, runViewStartPages: <span class="literal">true</span>, viewStartFileExtensions: FileExtensions, viewPageActivator: ViewPageActivator)</span><br><span class="line">    &#123;</span><br><span class="line">        DisplayModeProvider = DisplayModeProvider</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> view;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="ViewEngines-and-ViewEngineCollection"><a href="#ViewEngines-and-ViewEngineCollection" class="headerlink" title="ViewEngines and ViewEngineCollection"></a>ViewEngines and ViewEngineCollection</h3><p>透過<code>ViewEngines.Engines</code>可以取得目前可以使用<code>View</code>引擎.</p>
<p><strong>ASP.NET MVC</strong>為我們提供了兩種<code>View</code>引擎(<code>RazorViewEngine</code>,<code>WebFormViewEngine</code>)，</p>
<ul>
<li>提供傳統<strong>Web Form</strong>引擎，<code>.aspx</code>頁面一致<code>WebFormViewEngine</code>，</li>
<li>另一種預設使用也是推薦使用<strong>Razor</strong>引擎<code>RazorViewEngine</code>。</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">ViewEngines</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> ViewEngineCollection _engines = <span class="keyword">new</span> ViewEngineCollection</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">new</span> WebFormViewEngine(),</span><br><span class="line">        <span class="keyword">new</span> RazorViewEngine(),</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ViewEngineCollection Engines</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> _engines; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><code>ViewEngine</code>類別關係圖如下</p>
<p><img src="https://raw.githubusercontent.com/isdaniel/MyBlog/master/source/images/itHelp/24/IViewEngine_Uml.png" alt="UML_Model"></p>
<p>這邊以<code>RazorViewEngine</code>來介紹</p>
<ul>
<li><code>ViewLocationFormats</code>:預設找尋<code>View</code>實體檔案位置</li>
<li><code>PartialViewLocationFormats</code>:預設找尋<code>PartialView</code>實體檔案位置</li>
<li><code>FileExtensions</code>:<code>Razor</code>使用附檔名.</li>
</ul>
<h2 id="提升執行效率小技巧"><a href="#提升執行效率小技巧" class="headerlink" title="提升執行效率小技巧"></a>提升執行效率小技巧</h2><p>這裡有個小技巧可提高<strong>MVC</strong>執行效率.</p>
<h3 id="移除不必要ViewEngine提升執行效率"><a href="#移除不必要ViewEngine提升執行效率" class="headerlink" title="移除不必要ViewEngine提升執行效率"></a>移除不必要ViewEngine提升執行效率</h3><p><strong>MVC</strong>藉由<code>ViewEngineCollection</code>這個集合來判斷使用<code>ViewEngine</code>,且它預設有兩個<code>ViewEngines</code>提供給我們使用(<code>RazorViewEngine</code>,<code>WebFormViewEngine</code>)一般來說我們只使用一個<code>ViewEngine</code>另一個就不會用到.</p>
<p>如果我們只使用<code>RazorViewEngine</code>就可在<code>Global.cs</code>上撰寫這段程式碼,主要是把不必要<code>ViewEngine</code>移除只關注在我們使用<code>ViewEngine</code></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line">ViewEngines.Engines.Clear();</span><br><span class="line">ViewEngines.Engines.Add(<span class="keyword">new</span> RazorViewEngine());</span><br></pre></td></tr></table></figure></div>
<h3 id="只允許某個View副檔名"><a href="#只允許某個View副檔名" class="headerlink" title="只允許某個View副檔名"></a>只允許某個View副檔名</h3><p>在<code>Razor</code>有支援兩個副檔名</p>
<ol>
<li><code>vbhtml</code>:vb使用</li>
<li><code>cshtml</code>:c#使用</li>
</ol>
<p>如果我們想強制這個專案都使用C#的Razor撰寫view,可藉由幾個屬性來幫我們限制完成.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line">ViewEngines.Engines.Add(<span class="keyword">new</span> RazorViewEngine()</span><br><span class="line">&#123;</span><br><span class="line">	AreaViewLocationFormats = <span class="keyword">new</span>[]</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="string">"~/Areas/&#123;2&#125;/Views/&#123;1&#125;/&#123;0&#125;.cshtml"</span>,</span><br><span class="line">		<span class="string">"~/Areas/&#123;2&#125;/Views/Shared/&#123;0&#125;.cshtml"</span>,</span><br><span class="line">	&#125;,</span><br><span class="line">	AreaMasterLocationFormats = <span class="keyword">new</span>[]</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="string">"~/Areas/&#123;2&#125;/Views/&#123;1&#125;/&#123;0&#125;.cshtml"</span>,</span><br><span class="line">		<span class="string">"~/Areas/&#123;2&#125;/Views/Shared/&#123;0&#125;.cshtml"</span>,</span><br><span class="line">	&#125;,</span><br><span class="line">	AreaPartialViewLocationFormats = <span class="keyword">new</span>[]</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="string">"~/Areas/&#123;2&#125;/Views/&#123;1&#125;/&#123;0&#125;.cshtml"</span>,</span><br><span class="line">		<span class="string">"~/Areas/&#123;2&#125;/Views/Shared/&#123;0&#125;.cshtml"</span></span><br><span class="line">	&#125;,</span><br><span class="line"></span><br><span class="line">	ViewLocationFormats = <span class="keyword">new</span>[]</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="string">"~/Views/&#123;1&#125;/&#123;0&#125;.cshtml"</span>,</span><br><span class="line">		<span class="string">"~/Views/Shared/&#123;0&#125;.cshtml"</span>,</span><br><span class="line">	&#125;,</span><br><span class="line">	MasterLocationFormats = <span class="keyword">new</span>[]</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="string">"~/Views/&#123;1&#125;/&#123;0&#125;.cshtml"</span>,</span><br><span class="line">		<span class="string">"~/Views/Shared/&#123;0&#125;.cshtml"</span></span><br><span class="line">	&#125;,</span><br><span class="line">	PartialViewLocationFormats = <span class="keyword">new</span>[]</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="string">"~/Views/&#123;1&#125;/&#123;0&#125;.cshtml"</span>,</span><br><span class="line">		<span class="string">"~/Views/Shared/&#123;0&#125;.cshtml"</span></span><br><span class="line">	&#125;,</span><br><span class="line">	FileExtensions = <span class="keyword">new</span>[]</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="string">"cshtml"</span>,</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結:"></a>小結:</h2><p>本篇大致上把產生<code>View</code>頁面使用到的幾個核心介面和類別介紹完了,我們主要會使用繼承<code>ViewResultBase</code>物件並透過,相對應實現<code>IView</code>物件來進行畫面渲染,如何取得使用的<code>IView</code>物件就透過<code>ViewEngines</code>集合.</p>
<p>上面介紹了三個抽象類別和介面,每個都有自己核心職責並且和其他物件有清晰關係</p>
<ul>
<li><code>ViewResultBase</code>:實現<code>ActionResult</code>提供<code>Controller</code>呼叫產生頁面<code>ExecuteResult</code>方法.</li>
<li><code>IView</code>:提供如何渲染頁面</li>
<li><code>IViewEngine</code>:透過虛擬路徑找到要執行頁面(透過一些機制).</li>
</ul>
<p><strong>此文作者</strong>：Daniel Shih(石頭)<br><strong>此文地址</strong>： <a href="https://isdaniel.github.io/ithelp-day24/">https://isdaniel.github.io/ithelp-day24/</a> <br><strong>版權聲明</strong>：本博客所有文章除特別聲明外，均採用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC90dy8=" title="https://creativecommons.org/licenses/by-nc-sa/3.0/tw/">CC BY-NC-SA 3.0 TW<i class="fa fa-external-link"></i></span> 許可協議。轉載請註明出處！</p>
]]></content>
      <categories>
        <category>11th鐵人賽</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>Asp.net</tag>
        <tag>Asp.net-MVC</tag>
        <tag>SourceCode</tag>
        <tag>11th鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>動態產生程式碼(WebViewPage) View是如何被建立(四) (第25天)</title>
    <url>/ithelp-day25/</url>
    <content><![CDATA[<h1 id="Agenda"><a href="#Agenda" class="headerlink" title="Agenda"></a>Agenda<!-- omit in toc --></h1><ul>
<li><a href="#%e5%89%8d%e8%a8%80">前言</a></li>
<li><a href="#webviewpage">WebViewPage</a><ul>
<li><a href="#%e5%91%bc%e5%8f%abwebviewpageexecutepagehierarchy%e6%96%b9%e6%b3%95%e6%99%82%e6%a9%9f">呼叫WebViewPage.ExecutePageHierarchy方法時機</a></li>
<li><a href="#applicationstartpage-and-webpagerenderingbase">ApplicationStartPage and WebPageRenderingBase</a></li>
</ul>
</li>
<li><a href="#webviewpage-vs-webviewpagetmodel">WebViewPage vs WebViewPage<tmodel></tmodel></a></li>
<li><a href="#%e5%b0%8f%e7%b5%90">小結：</a></li>
</ul>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上一篇說到最終會透過一個實現<code>IView</code>物件(Razor是透過<code>RazorView</code>)來完成,<code>RenderView</code>方法將<code>BuildManagerCompiledView</code>方法取得物件轉換型別成<code>WebViewPage</code>.</p>
<p><code>.cshtml</code>最終會編譯成一個繼承<code>WebViewPage</code>檔案.</p>
<p>本篇會來解析<code>View</code>編譯原理</p>
<blockquote>
<p>我有做一個可以針對於<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2lzZGFuaWVsL0FzcC5uZXQtTVZDLURlYnVnZXI=" title="https://github.com/isdaniel/Asp.net-MVC-Debuger">Asp.net MVC Debugger<i class="fa fa-external-link"></i></span>的專案，只要下中斷點就可輕易進入Asp.net MVC原始碼.</p>
</blockquote>
<h2 id="WebViewPage"><a href="#WebViewPage" class="headerlink" title="WebViewPage"></a>WebViewPage</h2><p><code>WebViewPage</code>繼承樹最頂層有個<code>WebPageExecutingBase</code>抽象類別,他擁有一個抽象方法<code>Execute</code>,<code>View</code>轉成<code>c#</code>程式會建立一個類別就會繼承於<code>WebViewPage</code>並把使用者頁面程式碼實現在<code>Execute</code>方法.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Execute</span>(<span class="params"></span>)</span>;</span><br></pre></td></tr></table></figure></div>
<p>先來看一下<code>View</code>產生的DLL檔案會放在哪裡</p>
<p>透過在<code>View</code>檔案上寫<code>@GetType().Assembly.Location</code>.</p>
<p>在頁面上顯示<code>DLL</code>存放位置,一般會放在<code>Temp</code>資料夾區中</p>
<p>可以根據顯示路徑找到<code>View</code>編譯成<code>DLL</code></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line">public class _Page_Views_Shared__Layout_cshtml : WebViewPage&lt;object&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">protected</span> global_asax ApplicationInstance</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> (global_asax)<span class="keyword">this</span>.get_Context().ApplicationInstance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Execute</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="comment">//... user print logic</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>我使用<code>JustDecomplie</code>反編譯工具,查看原始碼.</p>
<p>下圖對於<code>View</code>檔案產生<code>DLL</code>反編譯</p>
<p><img src="https://raw.githubusercontent.com/isdaniel/MyBlog/master/source/images/itHelp/25/WebViewPage_decompile.PNG" alt="WebViewPage_decompile.PNG"></p>
<p>透過反編譯工具可以看到原始碼,每個頁面都會產生相對應的類別並繼承於<code>WebViewPage&lt;object&gt;</code>類別(會因為使用泛型,因為有一個<code>@Model</code>)</p>
<blockquote>
<p><code>Page_Views_Home_About_cshtml</code>類別命名有個規則.<br><code>Page_Views_{ViewfolderName}_{ViewFileName}_{ExtensionFileName}</code></p>
</blockquote>
<p>我目前看到的是一個<code>About</code>的<code>cshtml</code>檔案(<code>About.cshtml</code>).</p>
<p>看到<code>override void Execute()</code>將我們頁面上的邏輯透過<code>WriteLiteral</code>將資料寫到<code>Output</code>上,在<code>ApplicationStartPage</code>有<code>WriteLiteral</code>實作方式.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">WriteLiteral</span>(<span class="params"><span class="keyword">object</span> <span class="keyword">value</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Output.Write(<span class="keyword">value</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="呼叫WebViewPage-ExecutePageHierarchy方法時機"><a href="#呼叫WebViewPage-ExecutePageHierarchy方法時機" class="headerlink" title="呼叫WebViewPage.ExecutePageHierarchy方法時機"></a>呼叫WebViewPage.ExecutePageHierarchy方法時機</h3><p>在<code>RazorView</code>類別中的<code>RenderView</code>方法最下面有一段程式碼.</p>
<p>先判斷是否取得<code>StartPage</code>在呼叫<code>ExecutePageHierarchy</code>方法進行頁面的渲染.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line">WebPageRenderingBase startPage = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (RunViewStartPages)</span><br><span class="line">&#123;</span><br><span class="line">    startPage = StartPageLookup(webViewPage, RazorViewEngine.ViewStartFileName, ViewStartFileExtensions);</span><br><span class="line">&#125;</span><br><span class="line">webViewPage.ExecutePageHierarchy(<span class="keyword">new</span> WebPageContext(context: viewContext.HttpContext, page: <span class="literal">null</span>, model: <span class="literal">null</span>), writer, startPage);</span><br></pre></td></tr></table></figure></div>
<h3 id="ApplicationStartPage-and-WebPageRenderingBase"><a href="#ApplicationStartPage-and-WebPageRenderingBase" class="headerlink" title="ApplicationStartPage and WebPageRenderingBase"></a>ApplicationStartPage and WebPageRenderingBase</h3><p><code>WebViewPage</code>類別關係圖如下,<code>WebViewPage</code>擁有個複雜繼承樹.</p>
<p><img src="https://raw.githubusercontent.com/isdaniel/MyBlog/master/source/images/itHelp/25/WebViewPage_UML.png" alt="WebViewPage_UML.png"></p>
<p>主要分為兩派,在微軟官網有張圖來表示上面兩個比較</p>
<p><img src="https://docs.microsoft.com/zh-tw/aspnet/web-pages/overview/ui-layouts-and-themes/18-customizing-site-wide-behavior/_static/image1.jpg" alt="https://docs.microsoft.com/zh-tw/aspnet/web-pages/overview/ui-layouts-and-themes/18-customizing-site-wide-behavior/_static/image1.jpg"></p>
<ul>
<li><code>ApplicationStartPage</code>:當站台被啟動時會使用<code>WebPageHttpModule</code>(<code>IHttpModule</code>)初始化並呼叫<code>ApplicationStartPage</code>的<code>ExecuteStartPageInternal</code>找尋<code>_appstart.cshtml</code>檔案來執行.<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vemgtdHcvYXNwbmV0L3dlYi1wYWdlcy9vdmVydmlldy91aS1sYXlvdXRzLWFuZC10aGVtZXMvMTgtY3VzdG9taXppbmctc2l0ZS13aWRlLWJlaGF2aW9y" title="https://docs.microsoft.com/zh-tw/aspnet/web-pages/overview/ui-layouts-and-themes/18-customizing-site-wide-behavior">ASP.NET Web Pages (Razor) 網站的自訂全網站行為<i class="fa fa-external-link"></i></span></li>
</ul>
<blockquote>
<p><code>_AppStart.cshtml</code>頁面上運作。 當要求傳入頁面中，和如果這是第一個要求任何頁面在網站中，<code>ASP.NET</code>會先檢查是否 <code>_AppStart.cshtml</code>頁面存在。 如果是的話，任何程式碼中 <code>_AppStart.cshtml</code>頁面上執行，並執行要求的頁面。</p>
</blockquote>
<ul>
<li><code>WebPageRenderingBase</code>:透過<code>ExecutePageHierarchy</code>呼叫<code>BaseLayout</code>頁面或執行請求<code>Execute</code>方法</li>
</ul>
<p><code>WebPageBase</code>類別中<code>ExecutePageHierarchy</code>重載實作,透過<code>ExecutePageHierarchy</code>呼叫開發者實現<code>Execute</code>方法(<code>Page_Views_Home_About_cshtml.Execute</code>方法).</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">ExecutePageHierarchy</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (WebPageHttpHandler.ShouldGenerateSourceHeader(Context))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">try</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">string</span> vp = VirtualPath;</span><br><span class="line">			<span class="keyword">if</span> (vp != <span class="literal">null</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">string</span> path = Context.Request.MapPath(vp);</span><br><span class="line">				<span class="keyword">if</span> (!path.IsEmpty())</span><br><span class="line">				&#123;</span><br><span class="line">					PageContext.SourceFiles.Add(path);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">// we really don't care if this ever fails, so we swallow all exceptions</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	TemplateStack.Push(Context, <span class="keyword">this</span>);</span><br><span class="line">	<span class="keyword">try</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// Execute the developer-written code of the WebPage</span></span><br><span class="line">		Execute();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">finally</span></span><br><span class="line">	&#123;</span><br><span class="line">		TemplateStack.Pop(Context);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="WebViewPage-vs-WebViewPage"><a href="#WebViewPage-vs-WebViewPage" class="headerlink" title="WebViewPage vs WebViewPage"></a>WebViewPage vs WebViewPage<tmodel></tmodel></h2><p><code>c#</code> 有一個關鍵字<code>new</code>對於類別成員修飾詞</p>
<blockquote>
<p><code>new</code>關鍵字做為宣告修飾詞使用時，會明確隱藏繼承自基底類別的成員。當您隱藏繼承的成員時，該成員的衍生版本就會取代基底類別版本</p>
</blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vemgtdHcvZG90bmV0L2NzaGFycC9sYW5ndWFnZS1yZWZlcmVuY2Uva2V5d29yZHMvbmV3LW1vZGlmaWVy" title="https://docs.microsoft.com/zh-tw/dotnet/csharp/language-reference/keywords/new-modifier">new 修飾詞 (C# 參考)<i class="fa fa-external-link"></i></span></p>
<p>我覺得這個關鍵字有點打壞物件導向的概念,因為他會把父類別原本的成員隱藏起來.強制替換成子類.</p>
<p>但我看到<code>WebViewPage&lt;TModel&gt;</code>實作時覺得<code>new</code>原來可以這麼好用</p>
<p><code>WebViewPage&lt;TModel&gt;</code>很巧妙使用<code>new</code>把<code>View</code>重點成員物件轉成泛型.可以讓我們在<code>Razor</code>或<code>aspx</code>可以更方便使用.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line">public abstract class WebViewPage&lt;TModel&gt; : WebViewPage</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">private</span> ViewDataDictionary&lt;TModel&gt; _viewData;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">new</span> AjaxHelper&lt;TModel&gt; Ajax &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">new</span> HtmlHelper&lt;TModel&gt; Html &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">new</span> TModel Model</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">get</span> &#123; <span class="keyword">return</span> ViewData.Model; &#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	[<span class="meta">SuppressMessage(<span class="meta-string">"Microsoft.Usage"</span>, <span class="meta-string">"CA2227:CollectionPropertiesShouldBeReadOnly"</span>, Justification = <span class="meta-string">"This is the mechanism by which the ViewPage gets its ViewDataDictionary object."</span>)</span>]</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">new</span> ViewDataDictionary&lt;TModel&gt; ViewData</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">get</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (_viewData == <span class="literal">null</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				SetViewData(<span class="keyword">new</span> ViewDataDictionary&lt;TModel&gt;());</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> _viewData;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">set</span> &#123; SetViewData(<span class="keyword">value</span>); &#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>所以之後如果有遇到類似情況(需要使用泛型替代父類別<code>object</code>類型成員可以考慮使用<code>new</code>)</p>
<h2 id="小結："><a href="#小結：" class="headerlink" title="小結："></a>小結：</h2><p><code>View</code>頁面程式會轉成一個類別繼承於<code>WebViewPage</code>抽象類別,並把我們撰寫邏輯填充在<code>Execute</code>方法中.讓<strong>Asp.net MVC</strong>來呼叫.</p>
<p>這裡設計非常巧妙透過一個抽象類別和一個動態編譯程式,讓<code>View</code>更有彈性可以透過<code>Razor</code>語法實現<code>View</code>邏輯(更人性化).</p>
<p><code>WebViewPage&lt;TModel&gt;</code>很巧妙使用<code>new</code>把<code>View</code>重點成員物件轉成泛型.可以讓我們在<code>Razor</code>或<code>aspx</code>可以更方便使用.</p>
<p>最後透過呼叫<code>ActionResult.ExecuteResult</code>方法將資料塞到<code>Response</code>物件中,提供回傳給<code>Client</code>端,最後執行資源<code>Release</code>動作.</p>
<p>後面幾篇會利用前面所學來改寫<strong>MVC</strong>框架.</p>
<p><strong>此文作者</strong>：Daniel Shih(石頭)<br><strong>此文地址</strong>： <a href="https://isdaniel.github.io/ithelp-day25/">https://isdaniel.github.io/ithelp-day25/</a> <br><strong>版權聲明</strong>：本博客所有文章除特別聲明外，均採用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC90dy8=" title="https://creativecommons.org/licenses/by-nc-sa/3.0/tw/">CC BY-NC-SA 3.0 TW<i class="fa fa-external-link"></i></span> 許可協議。轉載請註明出處！</p>
]]></content>
      <categories>
        <category>11th鐵人賽</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>Asp.net</tag>
        <tag>Asp.net-MVC</tag>
        <tag>SourceCode</tag>
        <tag>11th鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>動手DIY改造 Asp.net MVC- Route解析機制 (第26天)</title>
    <url>/ithelp-day26/</url>
    <content><![CDATA[<h1 id="Agenda"><a href="#Agenda" class="headerlink" title="Agenda"></a>Agenda<!-- omit in toc --></h1><ul>
<li><a href="#%e5%89%8d%e8%a8%80">前言</a></li>
<li><a href="#routedata">RouteData</a></li>
<li><a href="#%e5%bb%ba%e7%ab%8b%e8%87%aa%e5%b7%b1route%e6%a9%9f%e5%88%b6">建立自己Route機制</a></li>
<li><a href="#%e5%b0%8f%e7%b5%90">小結:</a></li>
</ul>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>UrlRoutingModule</code>對於<code>OnPostResolveRequestCache</code>事件添加一個對於<strong>MVC</strong>很重要的動作,透過<code>RouteCollection</code>取得此次請求匹配<code>RouteData</code>物件.</p>
<p>利用此<code>RouteData</code>取得要使用的<code>IHttpHandler</code>來執行它.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line">RouteData routeData = RouteCollection.GetRouteData(context);</span><br></pre></td></tr></table></figure></div>
<p><code>RouteCollection</code>是全域路由註冊表.我們在一開始使用<code>MapRoute</code>註冊與之匹配<code>Controller</code>和<code>Action</code></p>
<blockquote>
<p><code>RouteCollection</code>是基於<code>RouteBase</code>物件集合,所以它可以存放所有繼承<code>RouteBase</code>物件,<code>RouteBase</code>這個類別有一個重要的方法來取得<code>RouteData</code>,<code>RouteData</code>封裝此次<code>Http</code>請求的<code>Controller</code>,<code>Action</code>…等資訊</p>
</blockquote>
<p>對於每個<code>Http</code>請求依序找尋第一個匹配路由規則</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line">routes.MapRoute(</span><br><span class="line">    name: <span class="string">"Default"</span>,</span><br><span class="line">    url: <span class="string">"&#123;controller&#125;/&#123;action&#125;/&#123;id&#125;"</span>,</span><br><span class="line">    defaults: <span class="keyword">new</span> &#123; controller = <span class="string">"Home"</span>, action = <span class="string">"Index"</span>, id = UrlParameter.Optional &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure></div>
<h2 id="RouteData"><a href="#RouteData" class="headerlink" title="RouteData"></a>RouteData</h2><p>在<code>RouteData</code>類別中有幾個重要屬性.</p>
<ul>
<li><code>RouteHandler</code>:存放<code>IRouteHandler</code>物件(提供<code>IHttpHander</code>並呼叫執行物件)</li>
<li><code>Values</code>: 一個字典集合,存放Key為<code>Controller</code>和<code>Action</code>,<code>Value</code>是<code>URL</code>參數值相對位置參數</li>
<li><code>GetRequiredString</code>:利用傳入<code>string</code>參數對於<code>Values</code>字典取匹配名稱.</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RouteData</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> RouteValueDictionary _values = <span class="keyword">new</span> RouteValueDictionary();</span><br><span class="line">    <span class="keyword">private</span> RouteValueDictionary _dataTokens = <span class="keyword">new</span> RouteValueDictionary();</span><br><span class="line">    <span class="keyword">private</span> IRouteHandler _routeHandler;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span>   使用指定的路由及路由處理常式，初始化 <span class="doctag">&lt;see cref="T:System.Web.Routing.RouteData" /&gt;</span> 類別的新執行個體。</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="route"&gt;</span>此物件會定義路由。<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="routeHandler"&gt;</span>處理要求的物件。<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RouteData</span>(<span class="params">RouteBase route, IRouteHandler routeHandler</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">      <span class="keyword">this</span>.Route = route;</span><br><span class="line">      <span class="keyword">this</span>.RouteHandler = routeHandler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span>   取得自訂值集合，當 ASP.NET 路由判斷路由是否符合要求時，會將這些值傳遞至路由處理常式但不會使用。</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> RouteValueDictionary DataTokens</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">get</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._dataTokens;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span>取得或設定代表路由的物件。<span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> RouteBase Route &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span>取得或設定處理要求路由的物件。<span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> IRouteHandler RouteHandler</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">get</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._routeHandler;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">set</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">this</span>._routeHandler = <span class="keyword">value</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span>取得 URL 參數值和預設路由值的集合。<span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> RouteValueDictionary Values</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">get</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._values;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span>擷取具有指定識別項的值。<span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">GetRequiredString</span>(<span class="params"><span class="keyword">string</span> valueName</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">      <span class="keyword">object</span> obj;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.Values.TryGetValue(valueName, <span class="keyword">out</span> obj))</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">string</span> str = obj <span class="keyword">as</span> <span class="keyword">string</span>;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">string</span>.IsNullOrEmpty(str))</span><br><span class="line">          <span class="keyword">return</span> str;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="keyword">string</span>.Format((IFormatProvider) CultureInfo.CurrentUICulture, System.Web.SR.GetString(<span class="string">"RouteData_RequiredValue"</span>), <span class="keyword">new</span> <span class="keyword">object</span>[<span class="number">1</span>]</span><br><span class="line">      &#123;</span><br><span class="line">        (<span class="keyword">object</span>) valueName</span><br><span class="line">      &#125;));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><code>RouteData</code>主要把<code>Client</code>傳送<strong>Http</strong>請求資訊經解析後存放在<code>Values</code>中.</p>
<p><code>RouteBase</code>中有個<code>GetRouteData</code>方法，藉由我們的路由設定去解析當前是否匹配到路由規則，如果有就回傳一個<code>RouteData</code>物件，否則回傳<code>Null</code></p>
<h2 id="建立自己Route機制"><a href="#建立自己Route機制" class="headerlink" title="建立自己Route機制"></a>建立自己Route機制</h2><p>一般使用<code>Route</code>這個物件是使用<code>/</code>當作註冊對應的規則</p>
<p><code>{Controller}/{Action}</code>在<code>Domian</code>後用<code>/</code>當作分隔</p>
<p>第一個區塊字串被當作<code>ControllerName</code></p>
<p>第二個區塊字串被當作<code>ActionName</code></p>
<blockquote>
<p>因為在<strong>Asp.net MVC</strong>透過<code>RouteData.GetRequiredString</code>傳入<code>ControllerName</code>或<code>ActionName</code>取得相對應的值.</p>
</blockquote>
<p>這次例子我們希望可以透過<code>QueryString</code>來製作<code>Route</code>對應規則</p>
<blockquote>
<p><code>{domain}?controller=home&amp;action=about</code></p>
</blockquote>
<p>透過上面<code>URL</code>期望呼叫<code>HomeController.About</code>方法</p>
<p>廢話不多說我們來看一下這個<code>QueryStringRoute</code>是如何被實現</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">QueryStringRoute</span> : <span class="title">RouteBase</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Url &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">bool</span> <span class="title">Match</span>(<span class="params">NameValueCollection queryString, <span class="keyword">out</span> IDictionary&lt;<span class="keyword">string</span>, <span class="keyword">string</span>&gt; variables</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        variables = <span class="keyword">new</span> Dictionary&lt;<span class="keyword">string</span>, <span class="keyword">string</span>&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> para = Url.Split(<span class="string">'&amp;'</span>);</span><br><span class="line">        <span class="keyword">if</span> (!para.All(x=&gt;queryString.AllKeys.Contains(x)))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        variables = para.ToDictionary(x =&gt; x, y =&gt; queryString[y]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> RouteData <span class="title">GetRouteData</span>(<span class="params">HttpContextBase httpContext</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        IDictionary&lt;<span class="keyword">string</span>, <span class="keyword">string</span>&gt; <span class="keyword">value</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (Match(httpContext.Request.QueryString,<span class="keyword">out</span> <span class="keyword">value</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            RouteData routeData = <span class="keyword">new</span> RouteData(<span class="keyword">this</span>, <span class="keyword">new</span> MvcRouteHandler());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> dict <span class="keyword">in</span> <span class="keyword">value</span>)</span><br><span class="line">                routeData.Values.Add(dict.Key,dict.Value);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> routeData;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> VirtualPathData <span class="title">GetVirtualPath</span>(<span class="params">RequestContext requestContext, RouteValueDictionary values</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>我們實現<code>RouteBase</code>抽象類別兩個方法</p>
<ul>
<li><code>GetRouteData</code></li>
<li><code>GetVirtualPath</code></li>
</ul>
<p>其中<code>GetRouteData</code>是我們主要要實作方法</p>
<p><code>Request.QueryString</code>這個集合封裝<strong>Http</strong> <code>QueryString</code>的資訊.</p>
<p>首先我們先判斷此次請求<code>QueryString</code>是否由傳<code>Controller</code>,<code>Action</code>資料過來,如果有把值填入<code>RouteData.Values</code>字典集合中,反之不匹配此<code>Route</code>規則就回傳<code>NULL</code>.</p>
<blockquote>
<p><strong>MVC</strong>從<code>RouteData.Values</code>取得對應的資料.</p>
</blockquote>
<p>使用上就可透過<code>RouteCollection.Add</code>將<code>Route</code>添加到集合中</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">RegisterRoutes</span>(<span class="params">RouteCollection routes</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    routes.Add(<span class="string">"customer"</span>,<span class="keyword">new</span> QueryStringRoute()</span><br><span class="line">    &#123;</span><br><span class="line">        Url = <span class="string">"controller&amp;action"</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><strong>Http</strong>請求就會依序找尋第一個匹配<code>Route</code>來執行.</p>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結:"></a>小結:</h2><p>透過繼承<code>RouteBase</code>抽象類別並實現<code>GetRouteData</code>方法透過返回<code>RouteData</code>物件對於<code>Http</code>請求資訊封裝到<code>RouteData.Values</code>字典集合.(在<strong>MVC</strong>框架中會對於<code>Values</code>字典中取<code>Key</code>為<code>Controller</code>和<code>Action</code>的值.)</p>
<p>最後再把新建立<code>RouteBase</code>物件加入到全域<code>RouteCollection</code>中.</p>
<p>希望大家看完這篇後可以了解並自行擴充自己<code>Route</code>機制.</p>
<p>本次範例程式碼<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2lzZGFuaWVsL0l0SGVscF9NVkNfMTB0aC90cmVlL0N1c3RvbWVyUm91dGU=" title="https://github.com/isdaniel/ItHelp_MVC_10th/tree/CustomerRoute">Git Sample<i class="fa fa-external-link"></i></span>(CustomerRoute Branch)</p>
<p><strong>此文作者</strong>：Daniel Shih(石頭)<br><strong>此文地址</strong>： <a href="https://isdaniel.github.io/ithelp-day26/">https://isdaniel.github.io/ithelp-day26/</a> <br><strong>版權聲明</strong>：本博客所有文章除特別聲明外，均採用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC90dy8=" title="https://creativecommons.org/licenses/by-nc-sa/3.0/tw/">CC BY-NC-SA 3.0 TW<i class="fa fa-external-link"></i></span> 許可協議。轉載請註明出處！</p>
]]></content>
      <categories>
        <category>11th鐵人賽</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>Asp.net</tag>
        <tag>Asp.net-MVC</tag>
        <tag>SourceCode</tag>
        <tag>11th鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>動手DIY改造 Asp.net MVC- 自己動作建立一個DependencyResolver解析器(Autofac) (第27天)</title>
    <url>/ithelp-day27/</url>
    <content><![CDATA[<h1 id="Agenda"><a href="#Agenda" class="headerlink" title="Agenda"></a>Agenda<!-- omit in toc --></h1><ul>
<li><a href="#%e5%89%8d%e8%a8%80">前言</a></li>
<li><a href="#aufofac%e4%be%9d%e8%b3%b4%e6%b3%a8%e5%85%a5%e5%ae%b9%e5%99%a8">Aufofac依賴注入容器</a></li>
<li><a href="#idependencyresolver%e4%bb%8b%e9%9d%a2">IDependencyResolver介面</a><ul>
<li><a href="#%e5%bb%ba%e7%ab%8bcustomerdependencyresolveridependencyresolver">建立CustomerDependencyResolver(IDependencyResolver)</a></li>
<li><a href="#customercontrolleractivatoricontrolleractivator">CustomerControllerActivator(IControllerActivator)</a></li>
</ul>
</li>
<li><a href="#%e5%9c%a8applicationstart%e4%b8%admvc%e6%9b%bf%e6%8f%9b%e6%88%90%e8%87%aa%e5%b7%b1%e7%9a%84%e8%a7%a3%e6%9e%90%e5%99%a8">在Application_Start中MVC替換成自己的解析器</a></li>
<li><a href="#%e5%9c%a8controller%e4%bd%bf%e7%94%a8%e6%b3%a8%e5%85%a5">在Controller使用注入</a></li>
<li><a href="#%e5%b0%8f%e7%b5%90">小結：</a></li>
</ul>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>產生<code>Controller</code>物件相關物件關係如下面<strong>UML圖</strong></p>
<p><img src="https://raw.githubusercontent.com/isdaniel/MyBlog/master/source/images/itHelp/13/IOC_Asp.netMVC.png" alt="relationship_pic.PNG"></p>
<p>透過<code>ControllerFactory</code>建立一個<code>Controller</code>控制器物件.而<code>ControllerFactory</code>依賴<code>IControllerActivator</code>物件產生<code>Controller</code>.</p>
<p>上面<code>IControllerActivator</code>可以透過建立使用我們的依賴注入容器來替換原本反射產生物件.</p>
<p><code>DependencyResolver</code>是<strong>MVC</strong>提供的一個可替換物注入點,今天我們會藉由他來我們實現注入<strong>MVC</strong>方式.</p>
<h2 id="Aufofac依賴注入容器"><a href="#Aufofac依賴注入容器" class="headerlink" title="Aufofac依賴注入容器"></a>Aufofac依賴注入容器</h2><p>在實現自己的<code>DependencyResolver</code>前先談談Autofac容器做甚麼用的?</p>
<p>我之前有寫一篇<a href="https://isdaniel.github.io/ioc-di.html">IOC(控制反轉)，DI(依賴注入) 深入淺出~~</a>,講述<strong>IOC(控制反轉)，DI(依賴注入)</strong>這兩個設計技巧的理念核心.</p>
<blockquote>
<p>言簡意賅可以統一交由容器來幫忙管理物件生命週期和建立方式,也管理物件相依性,兩個重點我們使得只需要提供使用類別的特徵(型別或其他可辨別特徵),容器就提供給我們相對應的物件.</p>
</blockquote>
<p>在<code>Autofac</code>有需多使用方式這裡就不一一介紹,有興趣讀者可以上網<code>google</code>或是查閱<code>Autofac</code>官方文件</p>
<h2 id="IDependencyResolver介面"><a href="#IDependencyResolver介面" class="headerlink" title="IDependencyResolver介面"></a>IDependencyResolver介面</h2><p><code>DependencyResolver</code>是一個靜態物件,<strong>MVC application</strong>使用同一個解析器(<code>DefaultDependencyResolver</code>)而他有一個<code>SetResolver</code>方法可以替換成其他<code>DependencyResolver</code></p>
<p><code>IDependencyResolver</code>有兩個方法需要實現.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IDependencyResolver</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">object</span> <span class="title">GetService</span>(<span class="params">Type serviceType</span>)</span>;</span><br><span class="line">    <span class="function">IEnumerable&lt;<span class="keyword">object</span>&gt; <span class="title">GetServices</span>(<span class="params">Type serviceType</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><strong>MVC</strong>依賴於<code>GetService</code>和<code>GetServices</code>,取得物件實例並提供一個抽象提供外部提供修改或擴充.</p>
<p>預設使用(<code>DefaultDependencyResolver</code>)這個解析器來取得我們物件(<code>DefaultDependencyResolver</code>解析器使用<code>Activator.CreateInstance(serviceType);</code>建立物件)</p>
<h3 id="建立CustomerDependencyResolver-IDependencyResolver"><a href="#建立CustomerDependencyResolver-IDependencyResolver" class="headerlink" title="建立CustomerDependencyResolver(IDependencyResolver)"></a>建立CustomerDependencyResolver(IDependencyResolver)</h3><p>這邊我們利用<code>autofac</code>來完成建立物件動作,先建立一個<code>ILifetimeScope _container</code>由建構子注入此物件.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CustomerDependencyResolver</span> : <span class="title">IDependencyResolver</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> ILifetimeScope _container;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomerDependencyResolver</span>(<span class="params">ILifetimeScope container</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (container == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="keyword">nameof</span> (container));</span><br><span class="line"></span><br><span class="line">        _container = container;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">object</span> <span class="title">GetService</span>(<span class="params">Type serviceType</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> _container.ResolveOptional(serviceType);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IEnumerable&lt;<span class="keyword">object</span>&gt; <span class="title">GetServices</span>(<span class="params">Type serviceType</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> (IEnumerable&lt;<span class="keyword">object</span>&gt;) _container.ResolveOptional(<span class="keyword">typeof</span> (IEnumerable&lt;&gt;).MakeGenericType(serviceType));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>在<code>GetService</code>呼叫<code>ResolveOptional</code>方法透過<code>Type</code>到容器中搜尋匹配的物件並返回.</p>
<h3 id="CustomerControllerActivator-IControllerActivator"><a href="#CustomerControllerActivator-IControllerActivator" class="headerlink" title="CustomerControllerActivator(IControllerActivator)"></a>CustomerControllerActivator(IControllerActivator)</h3><p><code>IControllerActivator</code>有一個<code>Create</code>方法,<code>ControllerFacotry</code>靠它來幫我們產生使用<code>Controller</code>物件,而我們在這邊建立自己<code>IControllerActivator</code>並在<code>Create</code>方法中實現自己得邏輯.透過<code>DependencyResolver</code>來產生物件(替換成<code>CustomerDependencyResolver</code>)</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CustomerControllerActivator</span> : <span class="title">IControllerActivator</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IController <span class="title">Create</span>(<span class="params">RequestContext requestContext, Type controllerType</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> (IController) DependencyResolver.Current.GetService(controllerType);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>我們會在<code>Autofac</code>容器註冊目前<code>Assembly</code>所有繼承<code>IController</code>物件.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//注入typeof(MvcApplication).Assembly 中所有繼承IController物件.</span></span><br><span class="line">builder.RegisterControllers(<span class="keyword">typeof</span>(MvcApplication).Assembly);</span><br></pre></td></tr></table></figure></div>
<p>在上面<code>CustomerControllerActivator.Create</code>會透<code>Autofac</code>解析器幫我們建立<code>Controller</code></p>
<h2 id="在Application-Start中MVC替換成自己的解析器"><a href="#在Application-Start中MVC替換成自己的解析器" class="headerlink" title="在Application_Start中MVC替換成自己的解析器"></a>在Application_Start中MVC替換成自己的解析器</h2><ol>
<li><p>首先利用<code>ControllerBuilder</code>的<code>SetControllerFactory</code>方法,重新替換使用<code>ControllerFacotry</code>.</p>
</li>
<li><p>在利用<code>builder.RegisterControllers</code>注入<code>typeof(MvcApplication).Assembly</code>中所有繼承<code>IController</code>物件.</p>
</li>
<li><p>註冊<code>IMemberService</code>介面物件(裡面有一個<code>int GetMemberBalance(int memberId);</code>方法來模擬取得會員餘額)</p>
</li>
<li><p><code>DependencyResolver.SetResolver(new CustomerDependencyResolver(builder.Build()))</code>替換成我們使用的解析器</p>
</li>
</ol>
<blockquote>
<p>因為<code>ControllerFacotry</code>預設使用<code>DefaultControllerActivator</code>,而我們需要替換成自己建立得<code>CustomerControllerActivator</code>並利用容器來幫我們注入.</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MvcApplication</span> : <span class="title">HttpApplication</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">Application_Start</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        RouteConfig.RegisterRoutes(RouteTable.Routes);</span><br><span class="line">        BundleConfig.RegisterBundles(BundleTable.Bundles);</span><br><span class="line">        <span class="comment">//把DefaultControllerFactory 中的IControllerActivator替換成我們自己寫的CustomerControllerActivator</span></span><br><span class="line">        ControllerBuilder.Current.SetControllerFactory(</span><br><span class="line">            <span class="keyword">new</span> DefaultControllerFactory(<span class="keyword">new</span> CustomerControllerActivator()));</span><br><span class="line">        AutofacRegister();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">AutofacRegister</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        ContainerBuilder builder = <span class="keyword">new</span> ContainerBuilder();</span><br><span class="line">        <span class="comment">//注入typeof(MvcApplication).Assembly 中所有繼承IController物件.</span></span><br><span class="line">        builder.RegisterControllers(<span class="keyword">typeof</span>(MvcApplication).Assembly);</span><br><span class="line">        builder.RegisterType&lt;MemberService&gt;().As&lt;IMemberService&gt;();</span><br><span class="line">        <span class="comment">//替換成自己的DependencyResolver</span></span><br><span class="line">        DependencyResolver.SetResolver(<span class="keyword">new</span> CustomerDependencyResolver(builder.Build()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="在Controller使用注入"><a href="#在Controller使用注入" class="headerlink" title="在Controller使用注入"></a>在Controller使用注入</h2><p><code>HomeController</code>控制器中在建構子注入,並呼叫<code>IMemberService.GetMemberBalance</code>方法</p>
<p>執行專案請求<code>Home/About</code>頁面可以看到<code>ViewBag.Message</code>已經成功顯示一個<strong>HardCode</strong>餘額了.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">HomeController</span> : <span class="title">Controller</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IMemberService _service;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HomeController</span>(<span class="params">IMemberService service</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        _service = service;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ActionResult <span class="title">About</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        ViewBag.Message = <span class="string">$"Member Balance <span class="subst">&#123; _service.GetMemberBalance(<span class="number">123</span>)&#125;</span>"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> View();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="小結："><a href="#小結：" class="headerlink" title="小結："></a>小結：</h2><p><code>DefaultControllerActivator</code>使用反射建立一個<code>Controller</code>物件</p>
<p>然而<code>IControllerActivator</code>提供一個產生<code>Controller</code>接口,而我們可以藉由實現此介面並使用<code>DependencyResolver</code>靜態物件產生<code>Controller</code>物件(藉由容器框架產生).</p>
<p>最後會把<code>Controller</code>依賴物件藉由<strong>依賴注入容器</strong>注入進去.</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2lzZGFuaWVsL0l0SGVscF9NVkNfMTB0aC90cmVlL0N1c3RvbWVyQ29udGFpbmVy" title="https://github.com/isdaniel/ItHelp_MVC_10th/tree/CustomerContainer">Github範例程式原始碼<i class="fa fa-external-link"></i></span> <code>CustomerContainer</code>分支上</p>
<p><strong>此文作者</strong>：Daniel Shih(石頭)<br><strong>此文地址</strong>： <a href="https://isdaniel.github.io/ithelp-day27/">https://isdaniel.github.io/ithelp-day27/</a> <br><strong>版權聲明</strong>：本博客所有文章除特別聲明外，均採用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC90dy8=" title="https://creativecommons.org/licenses/by-nc-sa/3.0/tw/">CC BY-NC-SA 3.0 TW<i class="fa fa-external-link"></i></span> 許可協議。轉載請註明出處！</p>
]]></content>
      <categories>
        <category>11th鐵人賽</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>Asp.net</tag>
        <tag>Asp.net-MVC</tag>
        <tag>SourceCode</tag>
        <tag>11th鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>動手DIY改造 Asp.net MVC- 建立自己ActionInvoker和Model綁定機制 (第28天)</title>
    <url>/ithelp-day28/</url>
    <content><![CDATA[<h1 id="Agenda"><a href="#Agenda" class="headerlink" title="Agenda"></a>Agenda<!-- omit in toc --></h1><ul>
<li><a href="#%e5%89%8d%e8%a8%80">前言</a></li>
<li><a href="#%e5%bb%ba%e7%ab%8b%e8%87%aa%e5%b7%b1%e7%9a%84iactioninvokercustomeractioninvoker">建立自己的IActionInvoker(CustomerActionInvoker)</a><ul>
<li><a href="#%e9%80%b2%e8%a1%8c%e5%91%bc%e5%8f%ab%e6%b8%ac%e8%a9%a6">進行呼叫測試</a></li>
</ul>
</li>
<li><a href="#%e6%94%b9%e9%80%b2getvaluetypeinstance%e6%96%b9%e6%b3%95%e5%bb%ba%e7%ab%8bvalueprovider">改進GetValueTypeInstance方法(建立ValueProvider)</a><ul>
<li><a href="#%e5%bb%ba%e7%ab%8b%e4%b8%80%e5%80%8bvalueproviderbase%e6%8a%bd%e8%b1%a1%e9%a1%9e%e5%88%a5">建立一個ValueProviderBase抽象類別</a></li>
<li><a href="#%e4%bc%bc%e6%88%90%e7%9b%b8%e8%ad%98ivalueprovider%e4%bb%8b%e9%9d%a2">似成相識IValueProvider介面</a></li>
</ul>
</li>
<li><a href="#%e5%b0%8f%e7%b5%90">小結:</a></li>
</ul>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天要分享對於<code>ActionInvoker</code>進行替換成自己客制化的<code>IActionInvoker</code></p>
<p>在<strong>MVC</strong>原始碼中有個<code>CreateActionInvoker</code>方法來取得一個<code>IActionInvoker</code>物件,可以看到她會先透過<code>Resolver.GetService</code>從解析器中取得我們的<code>IActionInvoker</code>如果沒有在<code>new</code>一個<code>AsyncControllerActionInvoker</code>物件.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">virtual</span> IActionInvoker <span class="title">CreateActionInvoker</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    IAsyncActionInvokerFactory asyncActionInvokerFactory = Resolver.GetService&lt;IAsyncActionInvokerFactory&gt;();</span><br><span class="line">    <span class="keyword">if</span> (asyncActionInvokerFactory != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> asyncActionInvokerFactory.CreateInstance();</span><br><span class="line">    &#125;</span><br><span class="line">    IActionInvokerFactory actionInvokerFactory = Resolver.GetService&lt;IActionInvokerFactory&gt;();</span><br><span class="line">    <span class="keyword">if</span> (actionInvokerFactory != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> actionInvokerFactory.CreateInstance();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Note that getting a service from the current cache will return the same instance for every request.</span></span><br><span class="line">    <span class="keyword">return</span> Resolver.GetService&lt;IAsyncActionInvoker&gt;() ??</span><br><span class="line">        Resolver.GetService&lt;IActionInvoker&gt;() ??</span><br><span class="line">        <span class="keyword">new</span> AsyncControllerActionInvoker();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>我們解析器一樣使用<code>Autofac</code>容器來幫我們完成(程式碼會基於昨天<code>Autofac</code>範例往上擴充)</p>
<h2 id="建立自己的IActionInvoker-CustomerActionInvoker"><a href="#建立自己的IActionInvoker-CustomerActionInvoker" class="headerlink" title="建立自己的IActionInvoker(CustomerActionInvoker)"></a>建立自己的IActionInvoker(CustomerActionInvoker)</h2><p>在取得<code>IActionInvoker</code>首先會透過<code>Resolver</code>解析器來取得,這就提供我們一個可替換接口.</p>
<p>藉由這個機制讓我們可以重寫自己<code>ActionInvoker</code>物件.</p>
<p>我們自行撰寫的<code>CustomerActionInvoker</code>支援簡單模型綁定(這個版本支援由<code>Request.Form</code>和<code>Request.QueryString</code>參數綁定)</p>
<ol>
<li>首先利用反射先取得呼叫<code>Action</code>方法資訊,我再呼叫<code>BindModel</code>利用<code>linq</code>對於<code>Action</code>方法需要參數進行動態綁定</li>
<li><code>BindModel</code>方法中先判斷目前參數型別是否是字串型別,如果是透過<code>GetValueTypeInstance</code>從<code>ValueProvider</code>(<code>Request.Form</code>和<code>Request.QueryString</code>)取值,如果方法使用參數非簡單型別參數就會呼叫<code>SimpleModelBinding</code>方法</li>
<li><code>SimpleModelBinding</code>利用反射動態建立此物件,取得此物件屬性資訊並一一把值給填充到屬性上.</li>
</ol>
<blockquote>
<p>在<code>SimpleModelBinding</code>會判斷屬性型別和可否寫入<code>!property.CanWrite || IsSimpleType(property)</code>來填值.</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CustomerActionInvoker</span> : <span class="title">IActionInvoker</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">bool</span> <span class="title">InvokeAction</span>(<span class="params">ControllerContext controllerContext, <span class="keyword">string</span> actionName</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="comment">//取得執行Action方法</span></span><br><span class="line">        MethodInfo method = controllerContext.Controller</span><br><span class="line">            .GetType()</span><br><span class="line">            .GetMethods()</span><br><span class="line">            .First(m =&gt; <span class="keyword">string</span>.Compare(actionName, m.Name, StringComparison.OrdinalIgnoreCase) == <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//取得Action使用的參數,並利用反射將值填充</span></span><br><span class="line">        <span class="keyword">var</span> parameters = method.GetParameters().Select(parameter =&gt;</span><br><span class="line">            BindModel(controllerContext, parameter.Name, parameter.ParameterType));</span><br><span class="line"></span><br><span class="line">        ActionResult actionResult = method.Invoke(controllerContext.Controller, parameters.ToArray()) <span class="keyword">as</span> ActionResult;</span><br><span class="line"></span><br><span class="line">        actionResult.ExecuteResult(controllerContext);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">object</span> <span class="title">BindModel</span>(<span class="params">ControllerContext controllerContext,<span class="keyword">string</span> modelName, Type modelType</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (modelType.IsValueType || <span class="keyword">typeof</span>(<span class="keyword">string</span>) == modelType)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">object</span> instance;</span><br><span class="line">            <span class="keyword">if</span> (GetValueTypeInstance(controllerContext, modelName, modelType, <span class="keyword">out</span> instance))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> instance;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> Activator.CreateInstance(modelType);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> SimpleModelBinding(controllerContext, modelType);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">object</span> <span class="title">SimpleModelBinding</span>(<span class="params">ControllerContext controllerContext, Type modelType</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">object</span> modelInstance = Activator.CreateInstance(modelType);</span><br><span class="line">        <span class="keyword">foreach</span> (PropertyInfo property <span class="keyword">in</span> modelType.GetProperties())</span><br><span class="line">        &#123;</span><br><span class="line">           <span class="comment">//針對基本型別或string型別給值</span></span><br><span class="line">            <span class="keyword">if</span> (!property.CanWrite || IsSimpleType(property))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">object</span> propertyValue;</span><br><span class="line">                <span class="keyword">if</span> (GetValueTypeInstance(controllerContext, property.Name, property.PropertyType, <span class="keyword">out</span> propertyValue))</span><br><span class="line">                &#123;</span><br><span class="line">                    property.SetValue(modelInstance, propertyValue);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> modelInstance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">bool</span> <span class="title">GetValueTypeInstance</span>(<span class="params">ControllerContext controllerContext, <span class="keyword">string</span> modelName, Type modelType, <span class="keyword">out</span> <span class="keyword">object</span> <span class="keyword">value</span></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">var</span> form = controllerContext.RequestContext.HttpContext.Request.Form;</span><br><span class="line">        <span class="keyword">var</span> queryString = controllerContext.RequestContext.HttpContext.Request.QueryString;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">string</span> key = form.AllKeys.FirstOrDefault(x =&gt; <span class="keyword">string</span>.Compare(x, modelName, StringComparison.OrdinalIgnoreCase) == <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (key != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">value</span> = Convert.ChangeType(form[key], modelType);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">string</span> queryKey = queryString.AllKeys.FirstOrDefault(x =&gt; <span class="keyword">string</span>.Compare(x, modelName, StringComparison.OrdinalIgnoreCase) == <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (queryKey != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">value</span> = Convert.ChangeType(queryString[queryKey], modelType);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">value</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">IsSimpleType</span>(<span class="params">PropertyInfo property</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> property.PropertyType == <span class="keyword">typeof</span>(<span class="keyword">string</span>) || property.PropertyType.IsValueType;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>最後在<code>Autofac</code>中多註冊一組<code>IActionInvoker</code>,<strong>MVC</strong>就會使用<code>CustomerActionInvoker</code>而不是原本的<code>ControllerActionInvoker</code></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line">builder.RegisterType&lt;CustomerActionInvoker&gt;().As&lt;IActionInvoker&gt;();</span><br></pre></td></tr></table></figure></div>
<h3 id="進行呼叫測試"><a href="#進行呼叫測試" class="headerlink" title="進行呼叫測試"></a>進行呼叫測試</h3><p>我在<code>HomeController</code>下新增一個<code>About</code>方法傳入一個<code>Person</code>類別.</p>
<p>後面請求 <code>http:xxx/Home/About?name=daniel</code> 我們就可以看到方法使用<code>p</code>參數已經可以成功填值瞜</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Name&#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> ActionResult <span class="title">About</span>(<span class="params">Person p</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ViewBag.Message = <span class="string">$"Member <span class="subst">&#123;p?.Name??<span class="keyword">string</span>.Empty&#125;</span> Balance <span class="subst">&#123; _service.GetMemberBalance(<span class="number">123</span>)&#125;</span>"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> View();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="改進GetValueTypeInstance方法-建立ValueProvider"><a href="#改進GetValueTypeInstance方法-建立ValueProvider" class="headerlink" title="改進GetValueTypeInstance方法(建立ValueProvider)"></a>改進GetValueTypeInstance方法(建立ValueProvider)</h2><p>在<code>GetValueTypeInstance</code>方法中透過<code>Http</code>上請求獲取資料目前有兩種方式<code>Request.Form</code>和<code>Request.QueryString</code>,我們可以看到上面的方法有許多重複程式碼</p>
<p>這次要做動作是<strong>重構</strong>把上面重複程式碼提取到一個父類別(長出父類別或介面).</p>
<blockquote>
<p>我覺得在物件導向程式設計介面和父類別是長出來,寫一寫code發現有重複的部分就可以考慮提取方法或提取成父類別.</p>
</blockquote>
<p>首先我們先對於<code>GetValueTypeInstance</code>進行分析.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">bool</span> <span class="title">GetValueTypeInstance</span>(<span class="params">ControllerContext controllerContext, <span class="keyword">string</span> modelName, Type modelType, <span class="keyword">out</span> <span class="keyword">object</span> <span class="keyword">value</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> form = controllerContext.RequestContext.HttpContext.Request.Form;</span><br><span class="line">    <span class="keyword">var</span> queryString = controllerContext.RequestContext.HttpContext.Request.QueryString;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">string</span> key = form.AllKeys.FirstOrDefault(x =&gt; <span class="keyword">string</span>.Compare(x, modelName, StringComparison.OrdinalIgnoreCase) == <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (key != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">value</span> = Convert.ChangeType(form[key], modelType);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">string</span> queryKey = queryString.AllKeys.FirstOrDefault(x =&gt; <span class="keyword">string</span>.Compare(x, modelName, StringComparison.OrdinalIgnoreCase) == <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (queryKey != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">value</span> = Convert.ChangeType(queryString[queryKey], modelType);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">value</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>發現到下面這段程式碼基本是重複的除了一個是透過<code>form</code>,另一個是透過<code>queryString</code>取得比對取得使用<code>key</code>.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">string</span> key = form.AllKeys.FirstOrDefault(x =&gt; <span class="keyword">string</span>.Compare(x, modelName, StringComparison.OrdinalIgnoreCase) == <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (key != <span class="literal">null</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">value</span> = Convert.ChangeType(form[key], modelType);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>看到重複動作就可以考慮提取成抽象並把特徵交給子類別來實現或提供.</p>
</blockquote>
<h3 id="建立一個ValueProviderBase抽象類別"><a href="#建立一個ValueProviderBase抽象類別" class="headerlink" title="建立一個ValueProviderBase抽象類別"></a>建立一個ValueProviderBase抽象類別</h3><p>在下面有一個<code>GetValue</code>方法我們把上面重複的程式碼放進裡面,提供一個<code>abstract NameValueCollection nameValueCollection</code>抽象屬性給自類別提供實現.</p>
<blockquote>
<p>因為<code>QueryString</code>和<code>Form</code>都是<code>NameValueCollection</code>型態的集合.</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">ValueProviderBase</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">protected</span> ControllerContext _controllerContext;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ValueProviderBase</span>(<span class="params">ControllerContext controllerContext</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        _controllerContext = controllerContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> NameValueCollection nameValueCollection &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">object</span> <span class="title">GetValue</span>(<span class="params"><span class="keyword">string</span> modelName,Type modelType</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">string</span> key = nameValueCollection.AllKeys.FirstOrDefault(x =&gt; <span class="keyword">string</span>.Compare(x, modelName, StringComparison.OrdinalIgnoreCase) == <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (key != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> Convert.ChangeType(nameValueCollection[key], modelType);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>建立兩個類別<code>FormValueProvider</code>,<code>QueryStringValueProvider</code>繼承於<code>ValueProviderBase</code>並實現<code>NameValueCollection</code>抽象屬性</p>
<ol>
<li><code>FormValueProvider</code>:提供<code>Request.Form</code></li>
<li><code>QueryStringValueProvider</code>:提供<code>Request.QueryString</code></li>
</ol>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FormValueProvider</span> : <span class="title">ValueProviderBase</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FormValueProvider</span>(<span class="params">ControllerContext controllerContext</span>) : <span class="title">base</span>(<span class="params">controllerContext</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">override</span> NameValueCollection nameValueCollection =&gt; _controllerContext.RequestContext.HttpContext.Request.Form;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">QueryStringValueProvider</span> : <span class="title">ValueProviderBase</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">QueryStringValueProvider</span>(<span class="params">ControllerContext controllerContext</span>) : <span class="title">base</span>(<span class="params">controllerContext</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">override</span> NameValueCollection nameValueCollection =&gt; _controllerContext.RequestContext.HttpContext.Request.QueryString;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>最後在<code>GetValueTypeInstance</code>方法會改寫成</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">bool</span> <span class="title">GetValueTypeInstance</span>(<span class="params">ControllerContext controllerContext, <span class="keyword">string</span> modelName, Type modelType, <span class="keyword">out</span> <span class="keyword">object</span> <span class="keyword">value</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    List&lt;ValueProviderBase&gt; _valueProvider = <span class="keyword">new</span> List&lt;ValueProviderBase&gt;()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">new</span> FormValueProvider(controllerContext),</span><br><span class="line">        <span class="keyword">new</span> QueryStringValueProvider(controllerContext)</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> valueProvider <span class="keyword">in</span> _valueProvider)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">value</span> = valueProvider.GetValue(modelName, modelType);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">value</span> != <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">value</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>建立一個列表存放<code>ValueProvider</code>集合並使用迴圈來一個一個判斷是否有值匹配到.</p>
<blockquote>
<p>改寫完後有沒有發覺<code>GetValueTypeInstance</code>方法比上面版本更好理解呢?</p>
</blockquote>
<p>我把細部邏輯都封裝到類別中,閱讀上也變得更容易.</p>
<h3 id="似成相識IValueProvider介面"><a href="#似成相識IValueProvider介面" class="headerlink" title="似成相識IValueProvider介面"></a>似成相識IValueProvider介面</h3><p>還記得之前我們有介紹到一個<code>IValueProvider</code>介面提供一個重要方法<code>GetValue</code>如何從<code>Http</code>請求中取得資料藉由傳入<code>key</code>.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> Defines the methods that are required for a value provider in ASP.NET MVC.</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IValueProvider</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">	<span class="comment"><span class="doctag">///</span> Determines whether the collection contains the specified prefix.</span></span><br><span class="line">	<span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">ContainsPrefix</span>(<span class="params"><span class="keyword">string</span> prefix</span>)</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">	<span class="comment"><span class="doctag">///</span> Retrieves a value object using the specified key.</span></span><br><span class="line">	<span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">	<span class="function">ValueProviderResult <span class="title">GetValue</span>(<span class="params"><span class="keyword">string</span> key</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>這次重構<code>IValueProvider</code>很類似之前介紹的<code>IValueProvider</code>介面,上面<code>List&lt;ValueProviderBase&gt;</code>就是之前介紹<code>ValueProviderFactories</code>工廠.</p>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結:"></a>小結:</h2><p>今天利用一個範例建立<strong>自己的簡單模型綁定ActionInvoker</strong>向大家分享如何建立自己的<code>ActionInvoker</code>只需要透過一個<code>Resolver</code>解析器和繼承<code>IActionInvoker</code>即可完成.</p>
<p>後面再利用重構技巧優化本次程式.希望今天使用到的技巧對於大家有所幫助</p>
<blockquote>
<p>設計模式不是把程式碼變簡單而是整理得更有條理(程式碼可能會更複雜但卻很合理,更好去理解複雜邏輯)</p>
</blockquote>
<p>一個房間很亂經過整理後東西不會變少(排除丟掉東西),但物品位置會變得更有條理</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2lzZGFuaWVsL0l0SGVscF9NVkNfMTB0aC90cmVlL2N1c3RvbWVyQWN0aW9uSW52b2tlcg==" title="https://github.com/isdaniel/ItHelp_MVC_10th/tree/customerActionInvoker">Github範例程式原始碼<i class="fa fa-external-link"></i></span> <code>customerActionInvoker</code>分支上</p>
<p><strong>此文作者</strong>：Daniel Shih(石頭)<br><strong>此文地址</strong>： <a href="https://isdaniel.github.io/ithelp-day28/">https://isdaniel.github.io/ithelp-day28/</a> <br><strong>版權聲明</strong>：本博客所有文章除特別聲明外，均採用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC90dy8=" title="https://creativecommons.org/licenses/by-nc-sa/3.0/tw/">CC BY-NC-SA 3.0 TW<i class="fa fa-external-link"></i></span> 許可協議。轉載請註明出處！</p>
]]></content>
      <categories>
        <category>11th鐵人賽</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>Asp.net</tag>
        <tag>Asp.net-MVC</tag>
        <tag>SourceCode</tag>
        <tag>11th鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>動手DIY改造 Asp.net MVC- 擴充在擴充,強化WebViewPage製作多國貨幣機制 (第29天)</title>
    <url>/ithelp-day29/</url>
    <content><![CDATA[<h1 id="Agenda"><a href="#Agenda" class="headerlink" title="Agenda"></a>Agenda<!-- omit in toc --></h1><ul>
<li><a href="#%e5%89%8d%e8%a8%80">前言</a></li>
<li><a href="#%e5%a4%9a%e5%9c%8b%e8%b7%af%e7%94%b1%e8%a8%ad%e5%ae%9a">多國路由設定</a></li>
<li><a href="#%e5%8f%96%e5%be%97%e8%b2%a8%e5%b9%a3%e7%ac%a6%e8%99%9f">取得貨幣符號</a></li>
<li><a href="#%e6%93%b4%e5%85%85-webviewpagetmodel">擴充 WebViewPage<tmodel></tmodel></a></li>
<li><a href="#razorview%e4%bd%bf%e7%94%a8%e6%93%b4%e5%85%85%e5%be%8cwebviewpagetmodel">RazorView使用擴充後WebViewPage<tmodel></tmodel></a></li>
<li><a href="#%e5%b0%8f%e7%b5%90">小結:</a></li>
</ul>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>View</code>頁面(<code>razor</code>,<code>aspx</code>…)都是繼承<code>WebViewPage&lt;TModel&gt;</code>頁面,</p>
<p>今天會帶大家寫一個範例完成透過<code>Route</code>判斷多國錢幣符號.</p>
<h2 id="多國路由設定"><a href="#多國路由設定" class="headerlink" title="多國路由設定"></a>多國路由設定</h2><p>在<code>Route</code>設定上多一個<code>{culture}</code>區塊.如果使用者沒有輸入預設使用英文(<code>en</code>).</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line">routes.MapRoute(</span><br><span class="line">    name: <span class="string">"Default"</span>,</span><br><span class="line">    url: <span class="string">"&#123;culture&#125;/&#123;controller&#125;/&#123;action&#125;"</span>,</span><br><span class="line">    defaults: <span class="keyword">new</span> &#123; controller = <span class="string">"Home"</span>, action = <span class="string">"Index"</span>, culture = <span class="string">"en"</span> &#125;);</span><br></pre></td></tr></table></figure></div>
<h2 id="取得貨幣符號"><a href="#取得貨幣符號" class="headerlink" title="取得貨幣符號"></a>取得貨幣符號</h2><p>建立一個介面<code>ICurrency</code>裡面有個方法可以取得傳入國家貨幣符號.</p>
<p>在<code>CurrencyProvider</code>類別透過<code>Routes.Values[&quot;culture&quot;]</code>取得使用者傳遞語系國家.</p>
<p>透過此參數可以知道使用者想要使用哪個國家貨幣.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ICurrency</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">string</span> <span class="title">GetCurrencySymbol</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CurrencyProvider</span> : <span class="title">ICurrency</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">GetCurrencySymbol</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        HttpContextBase contextWrapper = <span class="keyword">new</span> HttpContextWrapper(HttpContext.Current);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">string</span> culture = RouteTable.Routes.GetRouteData(contextWrapper)?.Values[<span class="string">"culture"</span>] <span class="keyword">as</span> <span class="keyword">string</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> GetSymbol(culture);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">string</span> <span class="title">GetSymbol</span>(<span class="params"><span class="keyword">string</span> culture</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">switch</span> (culture)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"en"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"$"</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"eu"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"£"</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"$"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="擴充-WebViewPage"><a href="#擴充-WebViewPage" class="headerlink" title="擴充 WebViewPage"></a>擴充 WebViewPage<tmodel></tmodel></h2><p>在<code>Autofac</code>多註冊一個</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line">builder.RegisterType&lt;CurrencyProvider&gt;().As&lt;ICurrency&gt;();</span><br><span class="line">DependencyResolver.SetResolver(<span class="keyword">new</span> CustomerDependencyResolver(builder.Build()));</span><br></pre></td></tr></table></figure></div>
<p>最後在建立一個<code>CountryViewPage&lt;TModel&gt;</code>抽象類別繼承於<code>WebViewPage&lt;TModel&gt;</code>.</p>
<p>在此類別中建立一個<code>ICurrency</code>屬性,並在建構子中透過<code>DependencyResolver.Current.GetService</code>給值</p>
<blockquote>
<p>因為這間已經替換成<code>Autofac</code>解析器,所以會吃<code>Autofac</code>註冊的類別.</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line">public abstract class CountryViewPage&lt;TModel&gt; : WebViewPage&lt;TModel&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CountryViewPage</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Currency = DependencyResolver.Current.GetService&lt;ICurrency&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> ICurrency Currency &#123; <span class="keyword">get</span>;  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="RazorView使用擴充後WebViewPage"><a href="#RazorView使用擴充後WebViewPage" class="headerlink" title="RazorView使用擴充後WebViewPage"></a>RazorView使用擴充後WebViewPage<tmodel></tmodel></h2><p>在<code>View</code>上使用新<code>WebViewPage&lt;TModel&gt;</code>只需要在最上面加<code>@inherits CountryViewPage&lt;object&gt;</code>.<br>我們就可以透過<code>@</code>呼叫<code>Currency</code>物件.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line">@inherits CountryViewPage&lt;<span class="keyword">object</span>&gt;</span><br><span class="line"></span><br><span class="line">@&#123;</span><br><span class="line">    ViewBag.Title = <span class="string">"About"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;h2&gt;@ViewBag.Title.&lt;/h2&gt;</span><br><span class="line">&lt;h3&gt;@ViewBag.Message @Currency.GetCurrencySymbol()&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;Use <span class="keyword">this</span> area to provide additional information.&lt;/p&gt;</span><br></pre></td></tr></table></figure></div>
<p>如果每個頁面都需要使用新的<code>WebViewPage&lt;TModel&gt;</code>可以透過<code>web.config</code>新增加一個<code>&lt;pages pageBaseType=&quot;CountryViewPage&quot;&gt;</code>將<code>Razor</code>產生的<code>C#</code>程式碼繼承於此類別</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="XML"><figure class="iseeu highlight /xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">system.web.webPages.razor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pages</span> <span class="attr">pageBaseType</span>=<span class="string">"CountryViewPage"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">namespaces</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">add</span> <span class="attr">namespace</span>=<span class="string">"System.Web.Mvc"</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">add</span> <span class="attr">namespace</span>=<span class="string">"System.Web.Mvc.Ajax"</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">add</span> <span class="attr">namespace</span>=<span class="string">"System.Web.Mvc.Html"</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">add</span> <span class="attr">namespace</span>=<span class="string">"System.Web.Routing"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">namespaces</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pages</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">system.web.webPages.razor</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結:"></a>小結:</h2><p>其實我們也可以繼承<code>WebViewPage&lt;TModel&gt;</code>來擴充<code>View</code>多變性</p>
<p>這邊有一個題目提供讀者來完成透過上面概念完成多國語系,這裡提供一條方法完成</p>
<blockquote>
<p>寫一個<code>string transfer(string key)</code>透過<code>Resource</code>檔案來完成;</p>
</blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2lzZGFuaWVsL0l0SGVscF9NVkNfMTB0aC90cmVlL0N1c3RvbWVyV2ViVmlld1BhZ2U=" title="https://github.com/isdaniel/ItHelp_MVC_10th/tree/CustomerWebViewPage">Github範例程式原始碼<i class="fa fa-external-link"></i></span> <code>CustomerWebViewPage</code>分支上</p>
<p><strong>此文作者</strong>：Daniel Shih(石頭)<br><strong>此文地址</strong>： <a href="https://isdaniel.github.io/ithelp-day29/">https://isdaniel.github.io/ithelp-day29/</a> <br><strong>版權聲明</strong>：本博客所有文章除特別聲明外，均採用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC90dy8=" title="https://creativecommons.org/licenses/by-nc-sa/3.0/tw/">CC BY-NC-SA 3.0 TW<i class="fa fa-external-link"></i></span> 許可協議。轉載請註明出處！</p>
]]></content>
      <categories>
        <category>11th鐵人賽</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>Asp.net</tag>
        <tag>Asp.net-MVC</tag>
        <tag>SourceCode</tag>
        <tag>11th鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>啟動吧!Asp.Net IsapiRunTime &amp; HttpRuntime (第3天)</title>
    <url>/ithelp-day3/</url>
    <content><![CDATA[<h1 id="Agenda"><a href="#Agenda" class="headerlink" title="Agenda"></a>Agenda<!-- omit in toc --></h1><ul>
<li><a href="#%e5%89%8d%e8%a8%80">前言:</a></li>
<li><a href="#iis-%e8%88%87-asp-net-w3svc%e6%9c%8d%e5%8b%99">IIS 與 Asp net (W3SVC服務)</a></li>
<li><a href="#iisapiruntime%e4%bb%8b%e9%9d%a2">IISAPIRuntime介面</a></li>
<li><a href="#isapiruntimeprocessrequest">IsapiRunTime.ProcessRequest</a></li>
<li><a href="#httpruntimeprocessrequestnodemand">HttpRuntime.ProcessRequestNoDemand</a><ul>
<li><a href="#processrequestinternal">ProcessRequestInternal</a></li>
</ul>
</li>
<li><a href="#%e5%b0%8f%e7%b5%90">小結</a></li>
</ul>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h2><p>上一篇我們介紹<code>HttpModule &amp; HttpHandler</code>對於</p>
<p>今天正式進入<code>.Net CLR</code>處理Http請求的世界.</p>
<p>先附上<code>Asp.net</code>執行請求流程圖.</p>
<p><img src="https://raw.githubusercontent.com/isdaniel/MyBlog/master/source/images/IIS_Asp.net_Process.png" alt="瀏覽器請求IIS流程"></p>
<p>現在開始講解藍色區塊.</p>
<blockquote>
<p>　查看原始碼好站 <span class="exturl" data-url="aHR0cHM6Ly9yZWZlcmVuY2Vzb3VyY2UubWljcm9zb2Z0LmNvbS8=" title="https://referencesource.microsoft.com/">Reference Source<i class="fa fa-external-link"></i></span> </p>
</blockquote>
<h2 id="IIS-與-Asp-net-W3SVC服務"><a href="#IIS-與-Asp-net-W3SVC服務" class="headerlink" title="IIS 與 Asp net (W3SVC服務)"></a>IIS 與 Asp net (W3SVC服務)</h2><p><code>World Wide Web Publishing Service</code>（簡稱<code>W3SVC</code>）是一個Window Service.</p>
<p><code>W3SVC</code>在<code>SvcHost.exe</code>這個應用程式上被執行.</p>
<p><code>W3SVC</code>主要功能</p>
<ol>
<li><strong>HTTP</strong>請求的監聽</li>
<li>工作執行緒的管理以及配置管理</li>
</ol>
<p>當檢測到某個<code>HTTP Request</code>後，先根據一個註冊表判斷請求的副檔名是否是靜態資源(比如<code>.html,.img,.txt,.xml</code>…)<br>如果是則直接將文件內容以<strong>HTTP Response</strong>的形式返回。</p>
<p>如果是動態資源（比如<code>.aspx,asp,php</code>等等），則通過副檔名從<code>IIS</code>的<code>Script Map</code>找到相應<code>ISAPI.dll</code></p>
<h2 id="IISAPIRuntime介面"><a href="#IISAPIRuntime介面" class="headerlink" title="IISAPIRuntime介面"></a>IISAPIRuntime介面</h2><p>前面說到透過<code>W3SVC</code>服務</p>
<p><code>System.Web.Hosting.IISAPIRuntime</code>這個介面是一個基於<code>COM</code>的<code>Interface</code>,<br><code>ASP.NET ISAPI</code>可以通過<code>COM</code>的方式調用實現該<code>Interface</code>的<code>Class</code>物件的<code>ProcessRequest</code>方法，從非託管環境進入了託管的環境。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">ComImport, Guid(<span class="meta-string">"08a2c56f-7c16-41c1-a8be-432917a1a2d1"</span>), InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIUnknown)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IISAPIRuntime</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">StartProcessing</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">StopProcessing</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line">	[<span class="meta">return: MarshalAs(UnmanagedType.I4)</span>]</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">ProcessRequest</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">					  [In]</span></span></span><br><span class="line"><span class="function"><span class="params">					  IntPtr ecb, </span></span></span><br><span class="line"><span class="function"><span class="params">					  [In, MarshalAs(UnmanagedType.I4</span>)]</span></span><br><span class="line"><span class="function">					  <span class="keyword">int</span> useProcessModel)</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">DoGCCollect</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>　所以<code>IISAPIRuntime.ProcessRequest</code>是我們探討原始碼起始點.</p>
</blockquote>
<h2 id="IsapiRunTime-ProcessRequest"><a href="#IsapiRunTime-ProcessRequest" class="headerlink" title="IsapiRunTime.ProcessRequest"></a>IsapiRunTime.ProcessRequest</h2><p>一開始會先呼叫<code>IsapiRunTime</code>的<code>ProcessRequest</code>方法來執行此次請求.</p>
<p>在<code>CreateWorkerRequest</code>會依據不同IIS版本建立不同<code>ISAPIWorkerRequest</code>物件,之後在呼叫<code>Initialize</code>方法把<code>Http</code>請求內容初次填入這個對象.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">ProcessRequest</span>(<span class="params">IntPtr ecb, <span class="keyword">int</span> iWRType</span>)</span> &#123;</span><br><span class="line">	IntPtr pHttpCompletion = IntPtr.Zero;</span><br><span class="line">	<span class="keyword">if</span> (iWRType == WORKER_REQUEST_TYPE_IN_PROC_VERSION_2) &#123;</span><br><span class="line">		pHttpCompletion = ecb;</span><br><span class="line">		ecb = UnsafeNativeMethods.GetEcb(pHttpCompletion);</span><br><span class="line">	&#125; </span><br><span class="line">	ISAPIWorkerRequest wr = <span class="literal">null</span>;</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		<span class="keyword">bool</span> useOOP = (iWRType == WORKER_REQUEST_TYPE_OOP);</span><br><span class="line">		wr = ISAPIWorkerRequest.CreateWorkerRequest(ecb, useOOP);</span><br><span class="line">		wr.Initialize();             </span><br><span class="line">		String wrPath = wr.GetAppPathTranslated();</span><br><span class="line">		String adPath = HttpRuntime.AppDomainAppPathInternal;                </span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span> (adPath == <span class="literal">null</span> ||</span><br><span class="line">			StringUtil.EqualsIgnoreCase(wrPath, adPath)) &#123;</span><br><span class="line">			</span><br><span class="line">			HttpRuntime.ProcessRequestNoDemand(wr);</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="comment">// need to restart app domain</span></span><br><span class="line">			HttpRuntime.ShutdownAppDomain(ApplicationShutdownReason.PhysicalApplicationPathChanged,</span><br><span class="line">										  SR.GetString(SR.Hosting_Phys_Path_Changed,</span><br><span class="line">																		   adPath,</span><br><span class="line">																		   wrPath));</span><br><span class="line">			<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			WebBaseEvent.RaiseRuntimeError(e, <span class="keyword">this</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> &#123;&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span> (wr != <span class="literal">null</span> &amp;&amp; wr.Ecb == IntPtr.Zero) &#123;</span><br><span class="line">			<span class="keyword">if</span> (pHttpCompletion != IntPtr.Zero) &#123;</span><br><span class="line">				UnsafeNativeMethods.SetDoneWithSessionCalled(pHttpCompletion);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (e <span class="keyword">is</span> ThreadAbortException) &#123;</span><br><span class="line">				Thread.ResetAbort();</span><br><span class="line">			&#125;                    </span><br><span class="line"></span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">throw</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>這段程式碼有幾個重點:</p>
<ol>
<li>把Http請求內文封裝到<code>WorkerRequest</code>物件中,方便日後使用.</li>
<li><code>wr.Initialize()</code>初始化<code>WorkerRequest</code>物件</li>
<li>呼叫<code>HttpRuntime.ProcessRequestNoDemand</code>方法並把剛剛初始化的<code>WorkerRequest</code>物件當作參數傳入.</li>
</ol>
<p>其中參數<code>ecb</code>(<code>Execution Control Block</code>)是一個<strong>Unmanaged Pointer</strong></p>
<p><code>ISAPIRuntime</code>不能直接調用<code>ASP.NET ISAPI</code>,所以通過一個<code>ecb</code>物件指標,<code>ecb</code>實現<code>ISAPI</code>和<code>ISAPIRutime</code>之間溝通.</p>
<h2 id="HttpRuntime-ProcessRequestNoDemand"><a href="#HttpRuntime-ProcessRequestNoDemand" class="headerlink" title="HttpRuntime.ProcessRequestNoDemand"></a>HttpRuntime.ProcessRequestNoDemand</h2><p>先來看看剛剛呼叫的<code>HttpRuntime.ProcessRequestNoDemand</code>方法.</p>
<p>這裡需要注意兩個重點.</p>
<ol>
<li><p>判斷目前執行程序池是否已經超過負荷,如果是會把<code>wr</code>物件指向<code>null</code></p>
 <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (rq != <span class="literal">null</span>)  </span><br><span class="line">wr = rq.GetRequestToExecute(wr);</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>如果<code>wr!=null</code>(代表還有資源可以執行請求)就呼叫<code>ProcessRequestNow</code>方法會繼續呼叫<code>ProcessRequestInternal</code>方法.</p>
</li>
</ol>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">internal</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ProcessRequestNoDemand</span>(<span class="params">HttpWorkerRequest wr</span>)</span> &#123;</span><br><span class="line">    RequestQueue rq = _theRuntime._requestQueue;</span><br><span class="line"></span><br><span class="line">    wr.UpdateInitialCounters();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (rq != <span class="literal">null</span>)  <span class="comment">// could be null before first request</span></span><br><span class="line">        wr = rq.GetRequestToExecute(wr);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (wr != <span class="literal">null</span>) &#123;</span><br><span class="line">        CalculateWaitTimeAndUpdatePerfCounter(wr);</span><br><span class="line">        wr.ResetStartTime();</span><br><span class="line">        ProcessRequestNow(wr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">internal</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ProcessRequestNow</span>(<span class="params">HttpWorkerRequest wr</span>)</span> &#123;</span><br><span class="line">    _theRuntime.ProcessRequestInternal(wr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="ProcessRequestInternal"><a href="#ProcessRequestInternal" class="headerlink" title="ProcessRequestInternal"></a>ProcessRequestInternal</h3><p>在<code>HttpRuntime</code>很重要的方法之一是<code>ProcessRequestInternal</code></p>
<blockquote>
<p>下面程式碼，我把<code>ProcessRequestInternal</code>方法中註解移除且只貼出我覺得重要的程式碼</p>
</blockquote>
<p>此方法有做幾個事情:</p>
<ol>
<li>如果Server很忙碌回傳<code>wr.SendStatus(503, &quot;Server Too Busy&quot;);</code></li>
<li>利用<code>HttpWorkerRequest</code>物件封裝我們常常使用<code>HttpContext</code></li>
<li>透過<code>HttpApplicationFactory.GetApplicationInstance</code>返回一個<code>IHttpHandler</code>物件</li>
<li>如果返回的<code>IHttpHandler</code>物件支援異步請求優先執行,不然就執行同步請求.</li>
</ol>
<p>上面第3,4點最為重要,因為我們就可以很清楚了解到為什麼最後都會找到一個繼承<code>IHttpHandler</code>介面的物件來執行<code>ProcessRequest</code>方法.</p>
<p>因為<code>Asp.net</code>在<code>HttpRunTime</code>程式碼中倚賴一個<code>IHttpHandler</code>介面抽象才造就具有彈性的系統架構.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ProcessRequestInternal</span>(<span class="params">HttpWorkerRequest wr</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">    HttpContext context;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//封裝我們常常使用`HttpContext`</span></span><br><span class="line">        context = <span class="keyword">new</span> HttpContext(wr, <span class="literal">false</span> <span class="comment">/* initResponseWriter */</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            wr.SendStatus(<span class="number">400</span>, <span class="string">"Bad Request"</span>);</span><br><span class="line">            wr.SendKnownResponseHeader(HttpWorkerRequest.HeaderContentType, <span class="string">"text/html; charset=utf-8"</span>);</span><br><span class="line">            <span class="keyword">byte</span>[] body = Encoding.ASCII.GetBytes(<span class="string">"&lt;html&gt;&lt;body&gt;Bad Request&lt;/body&gt;&lt;/html&gt;"</span>);</span><br><span class="line">            wr.SendResponseFromMemory(body, body.Length);</span><br><span class="line">            wr.FlushResponse(<span class="literal">true</span>);</span><br><span class="line">            wr.EndOfRequest();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            Interlocked.Decrement(<span class="keyword">ref</span> _activeRequestCount);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            EnsureFirstRequestInit(context);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!context.Request.IsDebuggingRequest) &#123;</span><br><span class="line">                <span class="keyword">throw</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        context.Response.InitResponseWriter();</span><br><span class="line"></span><br><span class="line">        IHttpHandler app = HttpApplicationFactory.GetApplicationInstance(context);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (app == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> HttpException(SR.GetString(SR.Unable_create_app_object));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (EtwTrace.IsTraceEnabled(EtwTraceLevel.Verbose, EtwTraceFlags.Infrastructure)) EtwTrace.Trace(EtwTraceType.ETW_TYPE_START_HANDLER, context.WorkerRequest, app.GetType().FullName, <span class="string">"Start"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果返回的IHttpHandler物件支援異步請求優先執行,不然就執行同步請求.</span></span><br><span class="line">        <span class="keyword">if</span> (app <span class="keyword">is</span> IHttpAsyncHandler) &#123;</span><br><span class="line">            <span class="comment">// asynchronous handler</span></span><br><span class="line">            IHttpAsyncHandler asyncHandler = (IHttpAsyncHandler)app;</span><br><span class="line">            context.AsyncAppHandler = asyncHandler;</span><br><span class="line">            asyncHandler.BeginProcessRequest(context, _handlerCompletionCallback, context);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// synchronous handler</span></span><br><span class="line">            app.ProcessRequest(context);</span><br><span class="line">            FinishRequest(context.WorkerRequest, context, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        context.Response.InitResponseWriter();</span><br><span class="line">        FinishRequest(wr, context, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>下面此這個方法執行時兩個小重點.</p>
<blockquote>
<p><code>ProcessRequestInternal</code>方法初始化我們常用<code>HttpContext</code>物件,把<code>Http</code>內容封裝到這個類別中.</p>
</blockquote>
<blockquote>
<p>如果返回<code>IHttpHandler</code>物件支援異步請求優先執行,不然就執行同步請求.</p>
</blockquote>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>今天我們學到</p>
<ul>
<li><code>ISAPIRunTime.ProcessRequest</code>方法<ol>
<li>建立一個<code>WorkerRequest</code>物件把Http內容封裝到裡面,並呼叫</li>
<li><code>HttpRuntime.ProcessRequestNoDemand</code>方法.</li>
</ol>
</li>
<li><code>HttpRuntime.ProcessRequestNoDemand</code>方法<ol>
<li>檢查目前是否有資源可以處理請求</li>
<li>封裝<code>HttpContext</code>並初始化內容資料</li>
<li>利用<code>HttpApplicationFactory.GetApplicationInstance</code>取得<code>IHttpHanlder</code>物件</li>
<li>呼叫<code>IHttpHanlder</code> <code>ProcessRequest</code>方法</li>
</ol>
</li>
</ul>
<p>下篇我們會來好好介紹<code>HttpApplicationFactory</code>這個工廠到底如何返回<code>IHttpHanlder</code>物件.</p>
<p><strong>此文作者</strong>：Daniel Shih(石頭)<br><strong>此文地址</strong>： <a href="https://isdaniel.github.io/ithelp-day3/">https://isdaniel.github.io/ithelp-day3/</a> <br><strong>版權聲明</strong>：本博客所有文章除特別聲明外，均採用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC90dy8=" title="https://creativecommons.org/licenses/by-nc-sa/3.0/tw/">CC BY-NC-SA 3.0 TW<i class="fa fa-external-link"></i></span> 許可協議。轉載請註明出處！</p>
]]></content>
      <categories>
        <category>11th鐵人賽</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>Asp.net</tag>
        <tag>Asp.net-MVC</tag>
        <tag>SourceCode</tag>
        <tag>11th鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>鐵人賽完賽＆總結　(第30天)</title>
    <url>/ithelp-day30/</url>
    <content><![CDATA[<h1 id="Agenda"><a href="#Agenda" class="headerlink" title="Agenda"></a>Agenda<!-- omit in toc --></h1><ul>
<li><a href="#%e5%ae%8c%e8%b3%bd%e6%84%9f%e6%83%b3">完賽感想</a></li>
<li><a href="#%e6%84%9f%e8%ac%9d%e9%80%99%e6%ac%a1%e7%9a%84%e5%a4%a5%e4%bc%b4-it%e6%88%90%e9%95%b7%e5%9c%98">感謝這次的夥伴 [IT成長團]</a></li>
<li><a href="#%e5%ad%b8%e7%bf%92%e5%88%b0%e6%96%b0%e7%9f%a5%e8%ad%98-expression%e8%a1%a8%e9%81%94%e5%bc%8f">學習到新知識 (Expression表達式)</a></li>
<li><a href="#%e8%a8%ad%e8%a8%88%e6%a8%a1%e5%bc%8f%e9%81%8b%e7%94%a8%e5%9c%a8%e5%af%a6%e6%88%b0%e4%b8%ad">設計模式運用在實戰中</a></li>
<li><a href="#%e9%80%8f%e9%81%8emvc%e6%9f%90%e5%8d%80%e5%a1%8a%e6%a6%82%e5%bf%b5%e5%bc%95%e7%99%bc%e5%bb%ba%e7%ab%8b%e9%96%8b%e6%ba%90%e5%b0%88%e6%a1%88%e6%83%b3%e6%b3%95">透過<strong>MVC</strong>某區塊概念,引發建立開源專案想法</a></li>
<li><a href="#%e6%96%87%e7%ab%a0%e7%9b%ae%e9%8c%84">文章目錄</a><ul>
<li><a href="#01--08-day-%e4%bb%8b%e7%b4%b9http%e8%ab%8b%e6%b1%82%e5%88%b0mvc%e5%89%8daspnet%e5%81%9a%e4%ba%86%e4%ba%9b%e4%bb%80%e9%ba%bc%e4%ba%8b%e6%83%85">01 ~ 08 Day 介紹Http請求到MVC前Asp.net做了些什麼事情</a></li>
<li><a href="#09--25-day-%e4%bb%8b%e7%b4%b9mvc%e5%8e%9f%e5%a7%8b%e7%a2%bc">09 ~ 25 Day 介紹MVC原始碼</a></li>
<li><a href="#26--29-day-%e5%b0%8d%e6%96%bcmvc%e9%80%b2%e8%a1%8c%e6%93%b4%e5%85%85%e6%94%b9%e9%80%a0">26 ~ 29 Day 對於MVC進行擴充改造</a></li>
</ul>
</li>
</ul>
<h2 id="完賽感想"><a href="#完賽感想" class="headerlink" title="完賽感想"></a>完賽感想</h2><p>這三十天無法對於<strong>MVC</strong>全部原始碼做詳細介紹,我盡量在這三十篇講述<strong>MVC</strong>執行過程中重要知識點,閱讀<strong>MVC</strong>原始碼真不是很簡單事情.</p>
<p>但閱讀完後我對於OOP和<strong>如何合理</strong>撰寫程式碼一個系統有更深入了解(因為<strong>MVC</strong>很多地方很好運用OOP概念原則)</p>
<p>希望大家經過閱讀這三十篇文章可以對於<strong>IIS</strong>託管和<strong>Asp.net MVC</strong>原理有更深入了解.</p>
<ol>
<li><code>Http</code>對於<code>IIS Server</code>請求如何導向<code>Asp.net MVC</code>執行</li>
<li><code>Asp.net MVC</code>原始碼有基本了解和知道哪幾個重要類別,了解後能依照系統需要替換改寫.</li>
<li><code>Asp.net MVC</code>用到很多設計技巧,希望大家能更了解設計模式如何運用在實戰中</li>
<li>可以嘗試閱讀其他知名的開源框架(<code>Dapper</code>,<code>AutoMapper</code>,<code>Autofac</code>,<code>Json.net</code>…..)</li>
</ol>
<blockquote>
<p>如果想要了解<code>Dapper</code>原理讀者我推薦去閱讀,我隊友<code>暐翰</code>系列文章<span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDIxNTEyNw==" title="https://ithelp.ithome.com.tw/articles/10215127">進階學習 ADO.NET、Dapper、Entity Framework 系列<i class="fa fa-external-link"></i></span>寫得很詳細且有影片教學大推!!</p>
</blockquote>
<h2 id="感謝這次的夥伴-IT成長團"><a href="#感謝這次的夥伴-IT成長團" class="headerlink" title="感謝這次的夥伴 [IT成長團]"></a>感謝這次的夥伴 [IT成長團]</h2><p>感謝這次可以跟<strong>IT成長團</strong>的大家一起參與並完成<strong>It邦幫忙</strong>鐵人活動.</p>
<p>這三十天大家一起鼓勵,互相叮嚀鼓勵.這種感覺真的很棒 :)</p>
<p>下面是隊友們寫的優質系列文章,推薦大家一同去閱讀.</p>
<ul>
<li><p>小魚 :<span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy91c2Vycy8yMDEwNTY5NC9pcm9ubWFuLzIxMzk=" title="https://ithelp.ithome.com.tw/users/20105694/ironman/2139">Laravel從入門到放棄…………原生PHP (疑?<i class="fa fa-external-link"></i></span></p>
</li>
<li><p>暐翰 :<span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy91c2Vycy8yMDEwNTk4OC9pcm9ubWFuLzIxNjE=" title="https://ithelp.ithome.com.tw/users/20105988/ironman/2161">進階學習 ADO.NET、Dapper、Entity Framework <i class="fa fa-external-link"></i></span></p>
</li>
<li><p>Peter學程式 :<span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy91c2Vycy8yMDExMDg1MC9pcm9ubWFuLzIxNzE=" title="https://ithelp.ithome.com.tw/users/20110850/ironman/2171">超緊繃!30天Vue.js學習日記<i class="fa fa-external-link"></i></span></p>
</li>
<li><p>神Q超人 :<span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy91c2Vycy8yMDEwNjkzNS9pcm9ubWFuLzIxODg=" title="https://ithelp.ithome.com.tw/users/20106935/ironman/2188">在 React 生態圈內打滾的一年 feat. TypeScript<i class="fa fa-external-link"></i></span></p>
</li>
<li><p>Victor :<span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy91c2Vycy8yMDEwNTg2NS9pcm9ubWFuLzI0NjY=" title="https://ithelp.ithome.com.tw/users/20105865/ironman/2466">使用 Laravel 打造 RESTful API<i class="fa fa-external-link"></i></span></p>
</li>
</ul>
<p>希望明年還有機會可以跟大家一起在參加鐵人賽衝一波,寫文章.</p>
<h2 id="學習到新知識-Expression表達式"><a href="#學習到新知識-Expression表達式" class="headerlink" title="學習到新知識 (Expression表達式)"></a>學習到新知識 (Expression表達式)</h2><p>以前碰到動態建立物件或動作,我都是使用反射技巧來完成,透過了解<code>ActionMethodDispatcher</code>類別原始碼探討為何<strong>MVC</strong>不使用反射卻,而使用<code>Expression</code>表達式完成動態呼叫需求.</p>
<p>查了資料進而了解到<code>Expression</code>表達式用法且他想解決的問題,對於未來有多了一項武器可以運用.</p>
<h2 id="設計模式運用在實戰中"><a href="#設計模式運用在實戰中" class="headerlink" title="設計模式運用在實戰中"></a>設計模式運用在實戰中</h2><p>設計模式不是紙上談兵,某些問題會使用某些方法來解決.</p>
<blockquote>
<p>筆者對於設計模式也略有研究,對於<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2lzZGFuaWVsL0Rlc2lnblBhdHRlcm4=" title="https://github.com/isdaniel/DesignPattern">DesignPattern<i class="fa fa-external-link"></i></span>有一個<code>Repository</code>做介紹,陸陸續續會補上我對於<code>Design Pattern</code>在現實生活上理解</p>
</blockquote>
<p><strong>MVC</strong>使用的許多設計模式和技巧,使用這些模式為了可讓程式變得好理解有意義</p>
<blockquote>
<p>商業邏輯讓程式變複雜是必然,我們能做的是讓程式碼變得不會太難理解可以更好擴充</p>
</blockquote>
<p>每個設計模式都有適合使用場景.</p>
<ul>
<li><code>工廠模式</code>: 將使用動作和產生物件做一個區隔(依賴一個抽象).</li>
<li><code>代理模式</code>: 提供一個代理人不用對於原有程式碼進行修改(<code>AOP</code>就是利用此模式概念)</li>
<li><code>裝飾者模式</code>: 適合在需要一直改變物件狀態的情境</li>
<li><code>建立者模式</code>: 提供一個建立管道讓使用的提供要建立物件,最後可透過此模式來方便替換</li>
</ul>
<p>還有許多模式就不一一介紹</p>
<p>像我很久之前就學過組合模式,只是對於此模式運用場景一直找不到.</p>
<p>直到看到<span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDIyMjgzMSNyZXNwb25zZS0zMTE3NDc=" title="https://ithelp.ithome.com.tw/articles/10222831#response-311747">複雜模型和簡單模型綁定<i class="fa fa-external-link"></i></span>如何將<strong>組合模式</strong>運用在實戰中.</p>
<h2 id="透過MVC某區塊概念-引發建立開源專案想法"><a href="#透過MVC某區塊概念-引發建立開源專案想法" class="headerlink" title="透過MVC某區塊概念,引發建立開源專案想法"></a>透過<strong>MVC</strong>某區塊概念,引發建立開源專案想法</h2><p>筆者看完<code>Filter</code>機制後就有感而發,這麼好用的方式可否運用在<code>Service</code>或其他地方(非<code>Asp.net MVC</code>,<code>Web API</code>區域).</p>
<p>我就依照上面標籤概念建立一個<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2lzZGFuaWVsL0F3ZXNvbWVQcm94eS5OZXQ=" title="https://github.com/isdaniel/AwesomeProxy.Net">AwesomeProxy.Net<i class="fa fa-external-link"></i></span>AOP框架基於<code>RealProxy</code>這個物件.</p>
<p>想知道詳細資訊的讀者可自行查閱<code>AwesomeProxy.Net</code>的<code>Readme.md</code>.</p>
<p>看完三十篇分享文後,希望台灣會有越來越多大大投入開源社群,我個人感觸是投入社群後我觸碰,接觸事物比我想想遠遠多很多.</p>
<h2 id="文章目錄"><a href="#文章目錄" class="headerlink" title="文章目錄"></a>文章目錄</h2><p>此系列文分成三大部分</p>
<h3 id="01-08-Day-介紹Http請求到MVC前Asp-net做了些什麼事情"><a href="#01-08-Day-介紹Http請求到MVC前Asp-net做了些什麼事情" class="headerlink" title="01 ~ 08 Day 介紹Http請求到MVC前Asp.net做了些什麼事情"></a>01 ~ 08 Day 介紹Http請求到MVC前Asp.net做了些什麼事情</h3><p><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDIxNDg3Nw==" title="https://ithelp.ithome.com.tw/articles/10214877">[Day01] (開賽)Http 請求 Asp.net IIS伺服器架構<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDIxNDk5OQ==" title="https://ithelp.ithome.com.tw/articles/10214999">[Day02] Asp.Net支柱 IHttpMoudle &amp; IHttphandler<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDIxNTIyMQ==" title="https://ithelp.ithome.com.tw/articles/10215221">[Day03] 啟動吧!Asp.Net IsapiRunTime &amp; HttpRuntime<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDIxNTQwMA==" title="https://ithelp.ithome.com.tw/articles/10215400">[Day04] 掌控HttpApplication物件建立 - HttpApplicationFactory<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDIxNTY3Ng==" title="https://ithelp.ithome.com.tw/articles/10215676">[Day05] Asp.Net重要物件HttpApplication(一) 初始化建立IHttpMoudule<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDIxNjI5OQ==" title="https://ithelp.ithome.com.tw/articles/10216299">[Day06] Asp.Net重要物件HttpApplication(二) 建置執行管道<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDIxNjk2MA==" title="https://ithelp.ithome.com.tw/articles/10216960">[Day07] Asp.Net重要物件HttpApplication(三) 取得執行的IHttpHandler<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDIxNzM3NQ==" title="https://ithelp.ithome.com.tw/articles/10217375">[Day08] 揭密Mvc使用IHttpHandler by UrlRoutingModule-4.0<i class="fa fa-external-link"></i></span></p>
<h3 id="09-25-Day-介紹MVC原始碼"><a href="#09-25-Day-介紹MVC原始碼" class="headerlink" title="09 ~ 25 Day 介紹MVC原始碼"></a>09 ~ 25 Day 介紹MVC原始碼</h3><p><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDIxNzk3Mw==" title="https://ithelp.ithome.com.tw/articles/10217973">[Day09] 進入MVC原始碼世界 Route &amp; RouteTable 原始碼解析<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDIxODUyMQ==" title="https://ithelp.ithome.com.tw/articles/10218521">[Day10] 透過MvcRouteHandler取得呼叫IHttphandler<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDIxOTAyMA==" title="https://ithelp.ithome.com.tw/articles/10219020">[Day11] Asp.net MVC Controller是怎麼被建立(原始碼揭密)<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDIxOTQ3Nw==" title="https://ithelp.ithome.com.tw/articles/10219477">[Day12] 談談Controller幾個重要成員<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDIxOTk4MQ==" title="https://ithelp.ithome.com.tw/articles/10219981">[Day13] Asp.net MVC如何實現IOC解析器<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDIyMDUxMA==" title="https://ithelp.ithome.com.tw/articles/10220510">[Day14] 反轉起來~透過IOC解析來執行依賴反轉<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDIyMDk2NA==" title="https://ithelp.ithome.com.tw/articles/10220964">[Day15] Action方法如何被執行InvokeAction(一)<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDIyMTQwMw==" title="https://ithelp.ithome.com.tw/articles/10221403">[Day16] MVC Filter 機制解密<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDIyMTkwOA==" title="https://ithelp.ithome.com.tw/articles/10221908">[Day17] Action方法如何被執行InvokeAction(二)<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDIyMjM0MQ==" title="https://ithelp.ithome.com.tw/articles/10222341">[Day18] 提供ModelBing幾個重要功臣(Model)<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDIyMjgzMQ==" title="https://ithelp.ithome.com.tw/articles/10222831">[Day19] Http參數如何綁定到Action參數上(簡單和複雜模型綁定探討)<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDIyMzI0Nw==" title="https://ithelp.ithome.com.tw/articles/10223247">[Day20] 探討Model上客製化標籤如何被解析使用<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDIyMzcwNA==" title="https://ithelp.ithome.com.tw/articles/10223704">[Day21] Model 探討驗證標籤(ValidationAttribute)<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDIyNDA5Mg==" title="https://ithelp.ithome.com.tw/articles/10224092">[Day22] View是如何被建立(一)<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDIyNDU0Mg==" title="https://ithelp.ithome.com.tw/articles/10224542">[Day23] 6個基本(ActionResult) View是如何被建立(二)<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDIyNDg2NQ==" title="https://ithelp.ithome.com.tw/articles/10224865">[Day24] 探討ViewEngine機制 View是如何被建立(三)<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDIyNTIyOQ==" title="https://ithelp.ithome.com.tw/articles/10225229">[Day25] 動態產生程式碼(WebViewPage) View是如何被建立(四)<i class="fa fa-external-link"></i></span></p>
<h3 id="26-29-Day-對於MVC進行擴充改造"><a href="#26-29-Day-對於MVC進行擴充改造" class="headerlink" title="26 ~ 29 Day 對於MVC進行擴充改造"></a>26 ~ 29 Day 對於MVC進行擴充改造</h3><p><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDIyNTYxNg==" title="https://ithelp.ithome.com.tw/articles/10225616">[Day26] 動手DIY改造 Asp.net MVC- Route解析機制<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDIyNTk5Mw==" title="https://ithelp.ithome.com.tw/articles/10225993">[Day27] 動手DIY改造 Asp.net MVC- 自己動作建立一個DependencyResolver解析器(Autofac)<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDIyNjI4NQ==" title="https://ithelp.ithome.com.tw/articles/10226285">[Day28] 動手DIY改造 Asp.net MVC- 建立自己ActionInvoker和Model綁定機制<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDIyNjY4MA==" title="https://ithelp.ithome.com.tw/articles/10226680">[Day29] 動手DIY改造 Asp.net MVC- 擴充在擴充,強化WebViewPage製作多國貨幣機制<i class="fa fa-external-link"></i></span></p>
<p><strong>此文作者</strong>：Daniel Shih(石頭)<br><strong>此文地址</strong>： <a href="https://isdaniel.github.io/ithelp-day30/">https://isdaniel.github.io/ithelp-day30/</a> <br><strong>版權聲明</strong>：本博客所有文章除特別聲明外，均採用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC90dy8=" title="https://creativecommons.org/licenses/by-nc-sa/3.0/tw/">CC BY-NC-SA 3.0 TW<i class="fa fa-external-link"></i></span> 許可協議。轉載請註明出處！</p>
]]></content>
      <categories>
        <category>11th鐵人賽</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>Asp.net</tag>
        <tag>Asp.net-MVC</tag>
        <tag>SourceCode</tag>
        <tag>11th鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>掌控HttpApplication物件建立 - HttpApplicationFactory (第4天)</title>
    <url>/ithelp-day4/</url>
    <content><![CDATA[<h1 id="Agenda"><a href="#Agenda" class="headerlink" title="Agenda"></a>Agenda<!-- omit in toc --></h1><ul>
<li><a href="#%e5%89%8d%e8%a8%80">前言：</a></li>
<li><a href="#httpapplication%e7%89%a9%e4%bb%b6">HttpApplication物件</a></li>
<li><a href="#%e5%8f%96%e5%be%97%e4%bd%bf%e7%94%a8-httpapplication%e7%89%a9%e4%bb%b6-getapplicationinstance">取得使用 HttpApplication物件 (GetApplicationInstance)</a><ul>
<li><a href="#httpapplicationfactory-%e5%88%9d%e5%a7%8b%e5%8c%96-ensureinited%e6%96%b9%e6%b3%95">HttpApplicationFactory 初始化 (EnsureInited方法)</a></li>
<li><a href="#applicationstart%e6%96%b9%e6%b3%95%e7%82%ba%e4%bb%80%e9%ba%bc%e5%8f%aa%e6%9c%83%e5%91%bc%e5%8f%ab%e4%b8%80%e6%ac%a1-ensureappstartcalled">Application_Start方法為什麼只會呼叫一次? (EnsureAppStartCalled)</a></li>
</ul>
</li>
<li><a href="#%e8%bf%94%e5%9b%9e%e4%b8%80%e5%80%8b-httpapplication-%e7%89%a9%e4%bb%b6-getnormalapplicationinstance">返回一個 HttpApplication 物件 (GetNormalApplicationInstance)</a></li>
<li><a href="#%e5%b0%8f%e7%b5%90">小結</a></li>
</ul>
<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>附上<code>Asp.net</code>執行請求流程圖.</p>
<p><img src="https://raw.githubusercontent.com/isdaniel/MyBlog/master/source/images/IIS_Asp.net_Process.png" alt="瀏覽器請求IIS流程"></p>
<p>在前一篇我們說到<code>HttpRunTime</code>會透過<code>GetApplicationInstance</code>來取得一個<code>IHttpHandler</code>對象.</p>
<p>今天跟著原始碼來了解到底回傳一個什麼<code>IHttpHandler</code>物件給<code>HttpRunTime</code>使用.</p>
<blockquote>
<p>　查看原始碼好站 <span class="exturl" data-url="aHR0cHM6Ly9yZWZlcmVuY2Vzb3VyY2UubWljcm9zb2Z0LmNvbS8=" title="https://referencesource.microsoft.com/">Reference Source<i class="fa fa-external-link"></i></span> </p>
</blockquote>
<h2 id="HttpApplication物件"><a href="#HttpApplication物件" class="headerlink" title="HttpApplication物件"></a>HttpApplication物件</h2><p>HttpApplication是整個<code>ASP.NET</code>基礎的核心。一個HttpApplication物件在某個時刻只能處理一個請求,只有完成對某個請求處理後,該HttpApplication才能用於後續的請求的處理。</p>
<p>所以<code>ASP.NET</code>利用物件程序池機制來建立或者取得HttpApplication物件。具體來講,當第一個<code>Http</code>請求抵達的時候,<code>ASP.NET</code>會一次建立多個HttpApplication物件,並將其置於池中,選擇其中一個物件來處理該請求。</p>
<p>而如果程序池中沒有<code>HttpApplication</code>物件,<code>Asp.net</code>會建立新的<code>HttpApplication</code>物件處理請求</p>
<p><code>HttpApplication</code>物件處理<code>Http</code>請求整個生命週期是一個相對複雜的過程,在該過程的不同階段會觸發相應的事件。我們可以註冊相應的事件(如同<span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDIxNDk5OQ==" title="https://ithelp.ithome.com.tw/articles/10214999">上一篇<i class="fa fa-external-link"></i></span>介紹事件表)</p>
<p>下圖就是模擬<code>HttpApplication</code>的<code>ObjectPool</code>樣子</p>
<p><img src="https://raw.githubusercontent.com/isdaniel/MyBlog/master/source/images/itHelp/4/objectPool.png" alt="HttpApplication"></p>
<h2 id="取得使用-HttpApplication物件-GetApplicationInstance"><a href="#取得使用-HttpApplication物件-GetApplicationInstance" class="headerlink" title="取得使用 HttpApplication物件 (GetApplicationInstance)"></a>取得使用 HttpApplication物件 (GetApplicationInstance)</h2><p>讓我們看看<code>GetApplicationInstan</code>方法做了什麼事情.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> HttpApplicationFactory _theApplicationFactory = <span class="keyword">new</span> HttpApplicationFactory();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">internal</span> <span class="keyword">static</span> IHttpHandler <span class="title">GetApplicationInstance</span>(<span class="params">HttpContext context</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (_customApplication != <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> _customApplication;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check to see if it's a debug auto-attach request</span></span><br><span class="line">    <span class="keyword">if</span> (context.Request.IsDebuggingRequest)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HttpDebugHandler();</span><br><span class="line"></span><br><span class="line">    _theApplicationFactory.EnsureInited();</span><br><span class="line"></span><br><span class="line">    _theApplicationFactory.EnsureAppStartCalled(context);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> _theApplicationFactory.GetNormalApplicationInstance(context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><code>_theApplicationFactory</code>是一個靜態物件</p>
<p><code>_theApplicationFactory</code>呼叫三個方法<code>EnsureInited</code>,<code>EnsureAppStartCalled</code>,<code>GetNormalApplicationInstance</code>,讓我們一一來解析做了些什麼事情吧</p>
<h3 id="HttpApplicationFactory-初始化-EnsureInited方法"><a href="#HttpApplicationFactory-初始化-EnsureInited方法" class="headerlink" title="HttpApplicationFactory 初始化 (EnsureInited方法)"></a>HttpApplicationFactory 初始化 (EnsureInited方法)</h3><p>通過查找Init方法的代碼以及其中2行如下代碼裡的細節,我們可以得知,這2行代碼主要是從global.asax獲取內容,然後進行編譯。</p>
<p><code>HttpApplicationFactory.EnsureInited()</code>方法檢查<code>HttpApplicationFactory</code>是否已經被初始化,如果沒有就呼叫<code>HttpApplicationFactory.Init()</code>進行初始化。</p>
<p>在<code>Init()</code>中,先獲取網站下<code>global.asax</code>文件完整路徑(透過<code>GetApplicationFile</code>方法),最後呼叫<code>CompileApplication()</code>方法對<code>global.asax</code>進行編譯.</p>
<p>在EnsureInited方法</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">EnsureInited</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!_inited) &#123;</span><br><span class="line">        <span class="keyword">lock</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!_inited) &#123;</span><br><span class="line">                Init();</span><br><span class="line">                _inited = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">CompileApplication</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// Get the Application Type and AppState from the global file</span></span><br><span class="line">    _theApplicationType = BuildManager.GetGlobalAsaxType();</span><br><span class="line"></span><br><span class="line">    BuildResultCompiledGlobalAsaxType result = BuildManager.GetGlobalAsaxBuildResult();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (result != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (result.HasAppOrSessionObjects) &#123;</span><br><span class="line">            GetAppStateByParsingGlobalAsax();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        _fileDependencies = result.VirtualPathDependencies;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (_state == <span class="literal">null</span>) &#123;</span><br><span class="line">        _state = <span class="keyword">new</span> HttpApplicationState();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ReflectOnApplicationType();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><code>ReflectOnApplicationType</code>方法取得目前特別事件方法,並添加到相對應的<code>MethodInfo</code>成員上</p>
<p>會透過以下三類方法名稱去取方法資訊</p>
<ul>
<li><code>Application_OnStart</code> or <code>Application_Start</code></li>
<li><code>Application_OnEnd</code> or <code>Application_End</code></li>
<li><code>Session_OnEnd</code> or <code>Session_End</code></li>
</ul>
<blockquote>
<p>取得這些資訊會提供<code>EnsureAppStartCalled</code>去呼叫<code>Application_OnStart</code>方法</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ReflectOnApplicationType</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    ArrayList handlers = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    MethodInfo[] methods;</span><br><span class="line"></span><br><span class="line">    Debug.Trace(<span class="string">"PipelineRuntime"</span>, <span class="string">"ReflectOnApplicationType"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// get this class methods</span></span><br><span class="line">    methods = _theApplicationType.GetMethods(BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static);</span><br><span class="line">    <span class="keyword">foreach</span> (MethodInfo m <span class="keyword">in</span> methods) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ReflectOnMethodInfoIfItLooksLikeEventHandler(m))</span><br><span class="line">            handlers.Add(m);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// get base class private methods (GetMethods would not return those)</span></span><br><span class="line">    Type baseType = _theApplicationType.BaseType;</span><br><span class="line">    <span class="keyword">if</span> (baseType != <span class="literal">null</span> &amp;&amp; baseType != <span class="keyword">typeof</span>(HttpApplication)) &#123;</span><br><span class="line">        methods = baseType.GetMethods(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Static);</span><br><span class="line">        <span class="keyword">foreach</span> (MethodInfo m <span class="keyword">in</span> methods) &#123;</span><br><span class="line">            <span class="keyword">if</span> (m.IsPrivate &amp;&amp; ReflectOnMethodInfoIfItLooksLikeEventHandler(m))</span><br><span class="line">                handlers.Add(m);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// remember as an array</span></span><br><span class="line">    _eventHandlerMethods = <span class="keyword">new</span> MethodInfo[handlers.Count];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; _eventHandlerMethods.Length; i++)</span><br><span class="line">        _eventHandlerMethods[i] = (MethodInfo)handlers[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="Application-Start方法為什麼只會呼叫一次-EnsureAppStartCalled"><a href="#Application-Start方法為什麼只會呼叫一次-EnsureAppStartCalled" class="headerlink" title="Application_Start方法為什麼只會呼叫一次? (EnsureAppStartCalled)"></a>Application_Start方法為什麼只會呼叫一次? (EnsureAppStartCalled)</h3><p><code>HttpApplicationFactory.EnsureAppStartCalled</code>方法建立一個<code>HttpApplication</code>物件並觸發<code>Application_OnStart</code>事件(執行<code>Global.asax</code>中的<code>Application_Start(object sender, EventArgs e)</code>)</p>
<p>在處理完事件<code>Application_OnStart</code>後<code>HttpApplication</code>物件會立即被回收掉,因為系統初始化只需要一次</p>
<blockquote>
<p>但是其中<code>GetSpecialApplicationInstance</code>裡會對<code>IIS7</code>做一些特殊的事情這裡就不多提</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">EnsureAppStartCalled</span>(<span class="params">HttpContext context</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!_appOnStartCalled) &#123;</span><br><span class="line">        <span class="keyword">lock</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!_appOnStartCalled) &#123;</span><br><span class="line">                <span class="keyword">using</span> (<span class="keyword">new</span> DisposableHttpContextWrapper(context)) &#123;</span><br><span class="line"></span><br><span class="line">                    WebBaseEvent.RaiseSystemEvent(<span class="keyword">this</span>, WebEventCodes.ApplicationStart);</span><br><span class="line"></span><br><span class="line">                    FireApplicationOnStart(context);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                _appOnStartCalled = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">FireApplicationOnStart</span>(<span class="params">HttpContext context</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (_onStartMethod != <span class="literal">null</span>) &#123;</span><br><span class="line">        HttpApplication app = GetSpecialApplicationInstance();</span><br><span class="line"></span><br><span class="line">        app.ProcessSpecialRequest(</span><br><span class="line">                                    context,</span><br><span class="line">                                    _onStartMethod,</span><br><span class="line">                                    _onStartParamCount,</span><br><span class="line">                                    <span class="keyword">this</span>, </span><br><span class="line">                                    EventArgs.Empty, </span><br><span class="line">                                    <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        RecycleSpecialApplicationInstance(app);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>在處理完事件<code>Application_OnStart</code>呼叫<code>RecycleSpecialApplicationInstance</code>回收<code>HttpApplication</code>物件</p>
</blockquote>
<h2 id="返回一個-HttpApplication-物件-GetNormalApplicationInstance"><a href="#返回一個-HttpApplication-物件-GetNormalApplicationInstance" class="headerlink" title="返回一個 HttpApplication 物件 (GetNormalApplicationInstance)"></a>返回一個 HttpApplication 物件 (GetNormalApplicationInstance)</h2><p>方法中主要做.</p>
<ol>
<li>判斷<code>_freeList</code>集合中是否有可用<code>HttpApplication</code>物件(物件程序池中),如果沒有就利用<code>HttpRuntime.CreateNonPublicInstance(_theApplicationType)</code>透過反射建立一個新的<code>HttpApplication</code>返回(呼叫完<code>IHttpHandler.ProcessRequst</code>方法後會將這個物件存入<code>_freeList</code>中),最後將</li>
</ol>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> HttpApplication <span class="title">GetNormalApplicationInstance</span>(<span class="params">HttpContext context</span>)</span> &#123;</span><br><span class="line">    HttpApplication app = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!_freeList.TryTake(<span class="keyword">out</span> app)) &#123;</span><br><span class="line">        <span class="comment">// If ran out of instances, create a new one</span></span><br><span class="line">        app = (HttpApplication)HttpRuntime.CreateNonPublicInstance(_theApplicationType);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">new</span> ApplicationImpersonationContext()) &#123;</span><br><span class="line">            app.InitInternal(context, _state, _eventHandlerMethods);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (AppSettings.UseTaskFriendlySynchronizationContext) &#123;</span><br><span class="line">        <span class="comment">// When this HttpApplication instance is no longer in use, recycle it.</span></span><br><span class="line">        app.ApplicationInstanceConsumersCounter = <span class="keyword">new</span> CountdownTask(<span class="number">1</span>); <span class="comment">// representing required call to HttpApplication.ReleaseAppInstance</span></span><br><span class="line">        app.ApplicationInstanceConsumersCounter.Task.ContinueWith((_, o) =&gt; RecycleApplicationInstance((HttpApplication)o), app, TaskContinuationOptions.ExecuteSynchronously);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> app;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>所以最終我們是返回一個<code>HttpApplication</code>物件來使用.</p>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>今天我們學到</p>
<ol>
<li><code>IHttpHandler GetApplicationInstance(HttpContext context)</code>其實是返回一個<code>HttpApplication</code>物件.</li>
<li>在<code>EnsureAppStartCalled</code>方法中呼叫<code>FireApplicationOnStart</code>方法動態建立一個<code>HttpApplication</code>物件,呼叫完<code>Application_OnStart</code>事件就回收掉並使用一個<code>flag</code>布林值代表已經呼叫過.</li>
<li>這個工廠會有一個 <code>_freeList</code> 集合來存取之前用過的<code>HttpApplication</code>物件,如果集合中沒有適合的<code>HttpApplication</code>物件就會使用反射返回一個新的<code>HttpApplication</code>並將他初始化．</li>
<li>所以<code>HttpRuntime</code>呼叫的是<code>HttpApplication</code>物件的<code>ProcessRequest</code>方法</li>
</ol>
<p>下篇會跟大家介紹<code>HttpApplication</code>類別成員詳細資訊</p>
<p><strong>此文作者</strong>：Daniel Shih(石頭)<br><strong>此文地址</strong>： <a href="https://isdaniel.github.io/ithelp-day4/">https://isdaniel.github.io/ithelp-day4/</a> <br><strong>版權聲明</strong>：本博客所有文章除特別聲明外，均採用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC90dy8=" title="https://creativecommons.org/licenses/by-nc-sa/3.0/tw/">CC BY-NC-SA 3.0 TW<i class="fa fa-external-link"></i></span> 許可協議。轉載請註明出處！</p>
]]></content>
      <categories>
        <category>11th鐵人賽</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>Asp.net</tag>
        <tag>Asp.net-MVC</tag>
        <tag>SourceCode</tag>
        <tag>11th鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>Asp.Net重要物件HttpApplication(一) 初始化建立IHttpMoudule (第5天)</title>
    <url>/ithelp-day5/</url>
    <content><![CDATA[<h1 id="Agenda"><a href="#Agenda" class="headerlink" title="Agenda"></a>Agenda<!-- omit in toc --></h1><ul>
<li><a href="#%e5%89%8d%e8%a8%80">前言：</a></li>
<li><a href="#%e5%88%9d%e5%a7%8b%e5%8c%96httpapplication-initinternal">初始化HttpApplication (InitInternal)</a><ul>
<li><a href="#%e8%bc%89%e5%85%a5%e6%89%80%e6%9c%89%e8%a8%bb%e5%86%8ahttpmoduleinitmodules%e6%96%b9%e6%b3%95">載入所有註冊HttpModule(InitModules方法)</a></li>
</ul>
</li>
<li><a href="#httpmodule%e6%b7%bb%e5%8a%a0aspnet%e4%ba%8b%e4%bb%b6%e5%8e%9f%e7%90%86%e8%a7%a3%e6%9e%90">HttpModule添加Asp.net事件原理解析.</a></li>
<li><a href="#%e7%ae%a1%e9%81%93%e6%a8%a1%e5%bc%8f-vs-%e7%b6%93%e5%85%b8%e6%a8%a1%e5%bc%8f">管道模式 vs 經典模式</a></li>
<li><a href="#%e5%8f%96%e5%be%97%e5%9f%b7%e8%a1%8chttphandler%e7%89%a9%e4%bb%b6">取得執行HttpHandler物件</a></li>
<li><a href="#%e5%b0%8f%e7%b5%90">小結</a></li>
</ul>
<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>附上<code>Asp.net</code>執行請求流程圖.</p>
<p><img src="https://raw.githubusercontent.com/isdaniel/MyBlog/master/source/images/IIS_Asp.net_Process.png" alt="瀏覽器請求IIS流程"></p>
<p>上一篇文章分享<code>HttpApplicationFactory.GetApplicationInstance</code>方法返回一個<code>HttpApplication</code>給<code>HttpRuntime</code>來呼叫使用.</p>
<p>今天開始介紹<code>HttpApplication</code>這個很重要的類別,它可謂是我們<code>Asp.net</code>中很複雜但重要的類別</p>
<p><code>Global.cs</code>是繼承<code>HttpApplication</code>類別,但為什麼需要繼承這個類別呢? 讓我們繼續看下去.</p>
<blockquote>
<p>查看原始碼好站 <span class="exturl" data-url="aHR0cHM6Ly9yZWZlcmVuY2Vzb3VyY2UubWljcm9zb2Z0LmNvbS8=" title="https://referencesource.microsoft.com/">Reference Source<i class="fa fa-external-link"></i></span><br>此文的程式碼比較多我會在原始碼上邊上說明相對應編號方便大家觀看</p>
</blockquote>
<h2 id="初始化HttpApplication-InitInternal"><a href="#初始化HttpApplication-InitInternal" class="headerlink" title="初始化HttpApplication (InitInternal)"></a>初始化HttpApplication (InitInternal)</h2><p>在<code>GetNormalApplicationInstance</code>返回一個<code>HttpApplication</code>物件前會呼叫<code>初始化HttpApplication.InitInternal</code>方法</p>
<p>這個方法主要做下面幾件事情</p>
<ol>
<li>初始化<code>HttpModule</code>，讀取<code>Host config</code>或<code>appconfig</code> 註冊的HttpMoudle,並調用Init方法，使用<code>AOP</code>編成方式註冊使用事件</li>
<li>提供一個<code>Hock</code>給繼承<code>Application</code>物件來初始化設定使用</li>
<li>判斷要走<strong>管道模式</strong>還是<strong>經典模式</strong></li>
<li>建置<code>Pipleline</code>流程</li>
<li>建立許多實現<code>IExecutionStep</code>接口的物件並添加到目前<code>HttpApplication</code>物驗的<code>_execSteps</code>集合中.從這裡我們可以看到<code>HttpApplication</code>是以異步的方式處理請求</li>
</ol>
<p><code>HttpModule</code>是在<code>InitInternal</code>方法中被讀取執行.</p>
<blockquote>
<p>我們可以透過 <code>HttpContext.ApplicationInstance.Modules</code> ，得知目前所有載入<code>HttpModule</code>.</p>
</blockquote>
<p>下面是<code>InitInternal</code>原始碼(核心動作有寫中文註解)</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">internal</span> <span class="keyword">void</span> <span class="title">InitInternal</span>(<span class="params">HttpContext context, HttpApplicationState state, MethodInfo[] handlers</span>)</span>&#123;</span><br><span class="line">	<span class="comment">// Remember state</span></span><br><span class="line">	_state = state;</span><br><span class="line"></span><br><span class="line">	PerfCounters.IncrementCounter(AppPerfCounter.PIPELINES);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			_initContext = context;</span><br><span class="line">			_initContext.ApplicationInstance = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">			context.ConfigurationPath = context.Request.ApplicationPathObject;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">using</span> (<span class="keyword">new</span> DisposableHttpContextWrapper(context)) &#123;</span><br><span class="line"></span><br><span class="line">				<span class="comment">// 1.初始化HttpModule.</span></span><br><span class="line">				<span class="keyword">if</span> (HttpRuntime.UseIntegratedPipeline) &#123;</span><br><span class="line"></span><br><span class="line">					<span class="keyword">try</span> &#123;</span><br><span class="line">						context.HideRequestResponse = <span class="literal">true</span>;</span><br><span class="line">						_hideRequestResponse = <span class="literal">true</span>;</span><br><span class="line">						InitIntegratedModules();</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">finally</span> &#123;</span><br><span class="line">						context.HideRequestResponse = <span class="literal">false</span>;</span><br><span class="line">						_hideRequestResponse = <span class="literal">false</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> &#123;</span><br><span class="line">					InitModules();</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				<span class="comment">// Hookup event handlers via reflection</span></span><br><span class="line">				<span class="keyword">if</span> (handlers != <span class="literal">null</span>)</span><br><span class="line">					HookupEventHandlersForApplicationAndModules(handlers);</span><br><span class="line"></span><br><span class="line">				<span class="comment">// Initialization of the derived class</span></span><br><span class="line">				_context = context;</span><br><span class="line">				<span class="keyword">if</span> (HttpRuntime.UseIntegratedPipeline &amp;&amp; _context != <span class="literal">null</span>) &#123;</span><br><span class="line">					_context.HideRequestResponse = <span class="literal">true</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				_hideRequestResponse = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					<span class="comment">//2.提供一個Hock給繼承Application物件來初始化設定使用</span></span><br><span class="line">					Init();</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">					RecordError(e);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (HttpRuntime.UseIntegratedPipeline &amp;&amp; _context != <span class="literal">null</span>) &#123;</span><br><span class="line">				_context.HideRequestResponse = <span class="literal">false</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			_hideRequestResponse = <span class="literal">false</span>;</span><br><span class="line">			_context = <span class="literal">null</span>;</span><br><span class="line">			_resumeStepsWaitCallback= <span class="keyword">new</span> WaitCallback(<span class="keyword">this</span>.ResumeStepsWaitCallback);</span><br><span class="line"></span><br><span class="line">			<span class="comment">//3. 判斷要走管道模式還是經典模式</span></span><br><span class="line">			<span class="keyword">if</span> (HttpRuntime.UseIntegratedPipeline) &#123;</span><br><span class="line">				_stepManager = <span class="keyword">new</span> PipelineStepManager(<span class="keyword">this</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				_stepManager = <span class="keyword">new</span> ApplicationStepManager(<span class="keyword">this</span>);</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//4. 建置Pipleline流程</span></span><br><span class="line">			_stepManager.BuildSteps(_resumeStepsWaitCallback);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">finally</span> &#123;</span><br><span class="line">			_initInternalCompleted = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">			<span class="comment">// Reset config path</span></span><br><span class="line">			context.ConfigurationPath = <span class="literal">null</span>;</span><br><span class="line">			<span class="comment">// don't hold on to the context</span></span><br><span class="line">			_initContext.ApplicationInstance = <span class="literal">null</span>;</span><br><span class="line">			_initContext = <span class="literal">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">catch</span> &#123; <span class="comment">// Protect against exception filters</span></span><br><span class="line">		<span class="keyword">throw</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="載入所有註冊HttpModule-InitModules方法"><a href="#載入所有註冊HttpModule-InitModules方法" class="headerlink" title="載入所有註冊HttpModule(InitModules方法)"></a>載入所有註冊HttpModule(InitModules方法)</h3><p>這個方法讀取註冊的<code>HttpModule</code>並共同放在一起,在一起呼叫<code>InitModulesCommon</code>方法來呼叫所有Modules的<code>Init</code>方法</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">InitModules</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">	</span><br><span class="line">	HttpModulesSection pconfig = RuntimeConfig.GetAppConfig().HttpModules;</span><br><span class="line">	HttpModuleCollection moduleCollection = pconfig.CreateModules();</span><br><span class="line">	HttpModuleCollection dynamicModules = CreateDynamicModules();</span><br><span class="line">	moduleCollection.AppendCollection(dynamicModules);</span><br><span class="line"></span><br><span class="line">	_moduleCollection = moduleCollection; </span><br><span class="line"></span><br><span class="line">	InitModulesCommon();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">InitModulesCommon</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">	<span class="keyword">int</span> n = _moduleCollection.Count;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		_currentModuleCollectionKey = _moduleCollection.GetKey(i);</span><br><span class="line">		_moduleCollection[i].Init(<span class="keyword">this</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	_currentModuleCollectionKey = <span class="literal">null</span>;</span><br><span class="line">	InitAppLevelCulture();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p><code>_moduleCollection[i].Init(this);</code> 其中的<code>this</code>就是把<code>HttpApplication</code>物件本身傳入這也是為什麼我們繼承<code>IHttpMoudel</code>介面可以共同使用同一個<code>HttpApplication</code>物件.</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IHttpModule</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Init</span>(<span class="params">HttpApplication context</span>)</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Dispose</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>上面呼叫的就是<code>void Init(HttpApplication context)</code>方法.</p>
<blockquote>
<p>如果要取得目前所註冊<code>HttpModule</code>可透過<code>HttpApplication.Modules</code>屬性</p>
</blockquote>
<h2 id="HttpModule添加Asp-net事件原理解析"><a href="#HttpModule添加Asp-net事件原理解析" class="headerlink" title="HttpModule添加Asp.net事件原理解析."></a>HttpModule添加Asp.net事件原理解析.</h2><p>我們在<code>HttpModule</code>上10多個事件作擴充在<code>ASP.net</code>是如何完成呢?</p>
<p>首先我們來看看<strong>事件方法</strong>原始碼.</p>
<p>發現每個事件都會呼叫<code>AddSyncEventHookup</code>方法來建立事件,此方法有幾個參數</p>
<ol>
<li><code>object key</code>:此事件識別資訊(每個事件都有自己的Object),如<code>BeginRequest</code>事件傳入<code>EventBeginRequest</code>物件.</li>
<li><code>Delegate handler</code>:使用者撰寫事件方法.</li>
<li><code>RequestNotification notification</code>:屬於哪種分群.</li>
</ol>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;devdoc&gt;</span><span class="doctag">&lt;para&gt;</span>[To be supplied.]<span class="doctag">&lt;/para&gt;</span><span class="doctag">&lt;/devdoc&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">event</span> EventHandler BeginRequest &#123;</span><br><span class="line">	<span class="keyword">add</span> &#123; AddSyncEventHookup(EventBeginRequest, <span class="keyword">value</span>, RequestNotification.BeginRequest); &#125;</span><br><span class="line">	<span class="keyword">remove</span> &#123; RemoveSyncEventHookup(EventBeginRequest, <span class="keyword">value</span>, RequestNotification.BeginRequest); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;devdoc&gt;</span><span class="doctag">&lt;para&gt;</span>[To be supplied.]<span class="doctag">&lt;/para&gt;</span><span class="doctag">&lt;/devdoc&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">event</span> EventHandler AuthenticateRequest &#123;</span><br><span class="line">	<span class="keyword">add</span> &#123; AddSyncEventHookup(EventAuthenticateRequest, <span class="keyword">value</span>, RequestNotification.AuthenticateRequest); &#125;</span><br><span class="line">	<span class="keyword">remove</span> &#123; RemoveSyncEventHookup(EventAuthenticateRequest, <span class="keyword">value</span>, RequestNotification.AuthenticateRequest); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// internal - for back-stop module only</span></span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">event</span> EventHandler DefaultAuthentication &#123;</span><br><span class="line">	<span class="keyword">add</span> &#123; AddSyncEventHookup(EventDefaultAuthentication, <span class="keyword">value</span>, RequestNotification.AuthenticateRequest); &#125;</span><br><span class="line">	<span class="keyword">remove</span> &#123; RemoveSyncEventHookup(EventDefaultAuthentication, <span class="keyword">value</span>, RequestNotification.AuthenticateRequest); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//....</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">AddSyncEventHookup</span>(<span class="params"><span class="keyword">object</span> key, Delegate handler, RequestNotification notification, <span class="keyword">bool</span> isPostNotification = <span class="literal">false</span></span>)</span> &#123;</span><br><span class="line">	ThrowIfEventBindingDisallowed();</span><br><span class="line"></span><br><span class="line">	<span class="comment">// add the event to the delegate invocation list</span></span><br><span class="line">	<span class="comment">// this keeps non-pipeline ASP.NET hosts working</span></span><br><span class="line">	Events.AddHandler(key, handler);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// For integrated pipeline mode, add events to the IExecutionStep containers only if</span></span><br><span class="line">	<span class="comment">// InitSpecial has completed and InitInternal has not completed.</span></span><br><span class="line">	<span class="keyword">if</span> (IsContainerInitalizationAllowed) &#123;</span><br><span class="line">		<span class="comment">// lookup the module index and add this notification</span></span><br><span class="line">		PipelineModuleStepContainer container = GetModuleContainer(CurrentModuleCollectionKey);</span><br><span class="line">		<span class="comment">//WOS 1985878: HttpModule unsubscribing an event handler causes AV in Integrated Mode</span></span><br><span class="line">		<span class="keyword">if</span> (container != <span class="literal">null</span>) &#123;</span><br><span class="line">			SyncEventExecutionStep step = <span class="keyword">new</span> SyncEventExecutionStep(<span class="keyword">this</span>, (EventHandler)handler);</span><br><span class="line">			container.AddEvent(notification, isPostNotification, step);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>上面<code>AddSyncEventHookup</code>傳入<code>object key</code>在<code>Httpapplication</code>物件在一開始就會建立下面這些靜態方法(當作每個事件Key)</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// event handlers</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="keyword">object</span> EventDisposed = <span class="keyword">new</span> <span class="keyword">object</span>();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="keyword">object</span> EventErrorRecorded = <span class="keyword">new</span> <span class="keyword">object</span>();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="keyword">object</span> EventRequestCompleted = <span class="keyword">new</span> <span class="keyword">object</span>();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="keyword">object</span> EventPreSendRequestHeaders = <span class="keyword">new</span> <span class="keyword">object</span>();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="keyword">object</span> EventPreSendRequestContent = <span class="keyword">new</span> <span class="keyword">object</span>();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="keyword">object</span> EventBeginRequest = <span class="keyword">new</span> <span class="keyword">object</span>();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="keyword">object</span> EventAuthenticateRequest = <span class="keyword">new</span> <span class="keyword">object</span>();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="keyword">object</span> EventDefaultAuthentication = <span class="keyword">new</span> <span class="keyword">object</span>();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="keyword">object</span> EventPostAuthenticateRequest = <span class="keyword">new</span> <span class="keyword">object</span>();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="keyword">object</span> EventAuthorizeRequest = <span class="keyword">new</span> <span class="keyword">object</span>();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="keyword">object</span> EventPostAuthorizeRequest = <span class="keyword">new</span> <span class="keyword">object</span>();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="keyword">object</span> EventResolveRequestCache = <span class="keyword">new</span> <span class="keyword">object</span>();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="keyword">object</span> EventPostResolveRequestCache = <span class="keyword">new</span> <span class="keyword">object</span>();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="keyword">object</span> EventMapRequestHandler = <span class="keyword">new</span> <span class="keyword">object</span>();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="keyword">object</span> EventPostMapRequestHandler = <span class="keyword">new</span> <span class="keyword">object</span>();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="keyword">object</span> EventAcquireRequestState = <span class="keyword">new</span> <span class="keyword">object</span>();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="keyword">object</span> EventPostAcquireRequestState = <span class="keyword">new</span> <span class="keyword">object</span>();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="keyword">object</span> EventPreRequestHandlerExecute = <span class="keyword">new</span> <span class="keyword">object</span>();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="keyword">object</span> EventPostRequestHandlerExecute = <span class="keyword">new</span> <span class="keyword">object</span>();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="keyword">object</span> EventReleaseRequestState = <span class="keyword">new</span> <span class="keyword">object</span>();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="keyword">object</span> EventPostReleaseRequestState = <span class="keyword">new</span> <span class="keyword">object</span>();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="keyword">object</span> EventUpdateRequestCache = <span class="keyword">new</span> <span class="keyword">object</span>();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="keyword">object</span> EventPostUpdateRequestCache = <span class="keyword">new</span> <span class="keyword">object</span>();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="keyword">object</span> EventLogRequest = <span class="keyword">new</span> <span class="keyword">object</span>();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="keyword">object</span> EventPostLogRequest = <span class="keyword">new</span> <span class="keyword">object</span>();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="keyword">object</span> EventEndRequest = <span class="keyword">new</span> <span class="keyword">object</span>();</span><br></pre></td></tr></table></figure></div>
<p>最後把事件資訊添加到<code>Events</code>集合中,已便建立管道時使用.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;devdoc&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span>    <span class="doctag">&lt;para&gt;</span>[To be supplied.]<span class="doctag">&lt;/para&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/devdoc&gt;</span></span></span><br><span class="line"><span class="keyword">protected</span> EventHandlerList Events &#123;</span><br><span class="line">	<span class="keyword">get</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> (_events == <span class="literal">null</span>) &#123;</span><br><span class="line">			_events = <span class="keyword">new</span> EventHandlerList();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> _events;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>透過上面機制就可以確保對於<code>Events</code>取得事件時順序.</p>
<h2 id="管道模式-vs-經典模式"><a href="#管道模式-vs-經典模式" class="headerlink" title="管道模式 vs 經典模式"></a>管道模式 vs 經典模式</h2><p>下面兩張圖是<strong>管道模式</strong>和<strong>經典模式</strong></p>
<p><strong>經典模式</strong></p>
<p><img src="https://mytechnetknowhows.files.wordpress.com/2015/05/aspnet-integration-with-iis6-0.jpg" alt="經典模式"></p>
<p><strong>管道模式</strong></p>
<p><img src="https://mytechnetknowhows.files.wordpress.com/2015/05/aspnet-integration-with-iis-7-integrated-mode.jpg" alt="管道模式"></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9teXRlY2huZXRrbm93aG93cy53b3JkcHJlc3MuY29tLzIwMTUvMDUvMjQvYXNwLW5ldC1hbmQtaWlzLWludGVncmF0aW9uLWlpcy02LTAtYW5kLWlpNi0wLWlpcy03LTAtaWlzLTctNS1paXMtOC0wLw==" title="https://mytechnetknowhows.wordpress.com/2015/05/24/asp-net-and-iis-integration-iis-6-0-and-ii6-0-iis-7-0-iis-7-5-iis-8-0/">圖片來源<i class="fa fa-external-link"></i></span></p>
<p>除了執行流程不一樣跟一些差異外，他們最終還是為了要找到一個<code>HttpHandler</code>來執行.</p>
<h2 id="取得執行HttpHandler物件"><a href="#取得執行HttpHandler物件" class="headerlink" title="取得執行HttpHandler物件"></a>取得執行HttpHandler物件</h2><p>如果有認真看原始碼的小夥伴,會發現<code>HttpApplication</code>的<code>ProcessRequest</code>目前是<strong>throw</strong>一個錯誤.</p>
<p>那他是怎麼找到使用<code>HttpHandler</code>物件並完成請求的呢?</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> IHttpHandler.ProcessRequest(HttpContext context) &#123;</span><br><span class="line">	<span class="keyword">throw</span> <span class="keyword">new</span> HttpException(SR.GetString(SR.Sync_not_supported));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>因為<code>HttpRunTime</code>是呼叫異步請求<code>BeginProcessRequest</code>方法.</p>
</blockquote>
<p>這邊提一下 <span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDIxNTIyMQ==" title="https://ithelp.ithome.com.tw/articles/10215221">啟動吧!Asp.Net IsapiRunTime &amp; HttpRuntime<i class="fa fa-external-link"></i></span>會先判斷<code>app</code>物件是否實現<code>IHttpAsyncHandler</code>.</p>
<p><code>HttpApplication</code>有實現<code>IHttpAsyncHandler</code>介面.所以優先執行異步請求.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (app <span class="keyword">is</span> IHttpAsyncHandler) &#123;</span><br><span class="line">	<span class="comment">// asynchronous handler</span></span><br><span class="line">	IHttpAsyncHandler asyncHandler = (IHttpAsyncHandler)app;</span><br><span class="line">	context.AsyncAppHandler = asyncHandler;</span><br><span class="line">	asyncHandler.BeginProcessRequest(context, _handlerCompletionCallback, context);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">	<span class="comment">// synchronous handler</span></span><br><span class="line">	app.ProcessRequest(context);</span><br><span class="line">	FinishRequest(context.WorkerRequest, context, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>今天我們學到</p>
<ol>
<li><code>HttpApplication</code>去讀取所有註冊的<code>HttpModule</code>並呼叫他們的<code>Init</code>方法.</li>
<li><strong>經典模式</strong>和<strong>管道模式</strong>除了執行流程不同最終目標還是找尋一個<code>HttpHandler</code></li>
<li><code>HttpRunTime</code>是呼叫異步請求</li>
<li>了解<code>HttpModule</code>添加Asp.net事件原理解析</li>
</ol>
<p>很多文章都會提到10多個事件（<code>BeginRequest</code>, <code>EndRequest</code>…..等）</p>
<p>下篇會介紹<code>StepManager</code>如何建立管道和如何呼叫事件並找尋<code>HttpHandler</code>來執行.</p>
<p><strong>此文作者</strong>：Daniel Shih(石頭)<br><strong>此文地址</strong>： <a href="https://isdaniel.github.io/ithelp-day5/">https://isdaniel.github.io/ithelp-day5/</a> <br><strong>版權聲明</strong>：本博客所有文章除特別聲明外，均採用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC90dy8=" title="https://creativecommons.org/licenses/by-nc-sa/3.0/tw/">CC BY-NC-SA 3.0 TW<i class="fa fa-external-link"></i></span> 許可協議。轉載請註明出處！</p>
]]></content>
      <categories>
        <category>11th鐵人賽</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>Asp.net</tag>
        <tag>Asp.net-MVC</tag>
        <tag>SourceCode</tag>
        <tag>11th鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>Asp.Net重要物件HttpApplication(二) 建置執行管道 (第6天)</title>
    <url>/ithelp-day6/</url>
    <content><![CDATA[<h1 id="Agenda"><a href="#Agenda" class="headerlink" title="Agenda"></a>Agenda<!-- omit in toc --></h1><ul>
<li><a href="#%e5%89%8d%e8%a8%80">前言</a></li>
<li><a href="#applicationstepmanager">ApplicationStepManager</a><ul>
<li><a href="#buildsteps-%e5%bb%ba%e7%bd%aepipleline%e6%b5%81%e7%a8%8b">BuildSteps 建置Pipleline流程</a></li>
<li><a href="#createeventexecutionsteps-%e8%bc%89%e5%85%a5%e4%ba%8b%e4%bb%b6">CreateEventExecutionSteps 載入事件</a></li>
<li><a href="#httpapplication%e4%ba%8b%e4%bb%b6%e9%9b%86%e5%90%88">HttpApplication事件集合</a></li>
<li><a href="#iexecutionstep%e4%bb%8b%e9%9d%a2">IExecutionStep介面</a></li>
</ul>
</li>
<li><a href="#resumesteps%e6%96%b9%e6%b3%95%e5%91%bc%e5%8f%abiexecutionstep%e7%89%a9%e4%bb%b6">ResumeSteps方法呼叫IExecutionStep物件</a><ul>
<li><a href="#httpapplication%e7%9a%84executestep">HttpApplication的ExecuteStep</a></li>
</ul>
</li>
<li><a href="#%e9%87%8d%e8%a6%81%e7%9a%84%e5%85%a9%e5%80%8biexecutionstep">重要的兩個IExecutionStep</a></li>
<li><a href="#%e5%b0%8f%e7%b5%90">小結：</a></li>
</ul>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前面有提到<code>InitInternal</code>方法，是如何載入註冊<code>HttpModule</code>並呼叫<code>Init</code>方法，經典模式和管道模式比較.</p>
<blockquote>
<p>查看原始碼好站 <span class="exturl" data-url="aHR0cHM6Ly9yZWZlcmVuY2Vzb3VyY2UubWljcm9zb2Z0LmNvbS8=" title="https://referencesource.microsoft.com/">Reference Source<i class="fa fa-external-link"></i></span><br>此文的程式碼比較多我會在原始碼上邊上說明相對應編號方便大家觀看</p>
</blockquote>
<p>今天跟大家介紹<code>StepManager</code>是如何建立管道和依序呼叫<code>IHttpModule</code>註冊事件</p>
<h2 id="ApplicationStepManager"><a href="#ApplicationStepManager" class="headerlink" title="ApplicationStepManager"></a>ApplicationStepManager</h2><p>這部分可說是<code>Asp.net</code>最核心部分，利用<code>Event</code>事件和<code>AOP</code>概念,讓<code>Asp.net</code>可以擁有高度的可擴展性.</p>
<h3 id="BuildSteps-建置Pipleline流程"><a href="#BuildSteps-建置Pipleline流程" class="headerlink" title="BuildSteps 建置Pipleline流程"></a>BuildSteps 建置Pipleline流程</h3><p><code>BuildSteps</code>最主要透過<code>CreateEventExecutionSteps</code>方法，把所有<strong>Application</strong><code>event</code>註冊添加到<code>steps</code>集合中方便後面依照順序去呼叫使用.</p>
<blockquote>
<p><code>steps</code> 最後把載入所有事件給 <code>_execSteps</code></p>
</blockquote>
<p>這裡就是我們熟知的管道事件介紹 <span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDIxNDk5OQ==" title="https://ithelp.ithome.com.tw/articles/10214999">Asp.Net支柱 IHttpMoudle &amp; IHttphandler<i class="fa fa-external-link"></i></span> 有介紹到</p>
<p>透過<code>BuildSteps</code>方法<strong>step by step</strong>把<code>Asp.net</code>執行事件依照順序註冊進去.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">internal</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">BuildSteps</span>(<span class="params">WaitCallback stepCallback </span>)</span> &#123;</span><br><span class="line">	ArrayList steps = <span class="keyword">new</span> ArrayList();</span><br><span class="line">	HttpApplication app = _application;</span><br><span class="line">	steps.Add(<span class="keyword">new</span> ValidateRequestExecutionStep(app));</span><br><span class="line">	steps.Add(<span class="keyword">new</span> ValidatePathExecutionStep(app));</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (urlMappingsEnabled)</span><br><span class="line">		steps.Add(<span class="keyword">new</span> UrlMappingsExecutionStep(app)); </span><br><span class="line"></span><br><span class="line">	app.CreateEventExecutionSteps(HttpApplication.EventBeginRequest, steps);</span><br><span class="line">	app.CreateEventExecutionSteps(HttpApplication.EventAuthenticateRequest, steps);</span><br><span class="line">	app.CreateEventExecutionSteps(HttpApplication.EventDefaultAuthentication, steps);</span><br><span class="line">	app.CreateEventExecutionSteps(HttpApplication.EventPostAuthenticateRequest, steps);</span><br><span class="line">	app.CreateEventExecutionSteps(HttpApplication.EventAuthorizeRequest, steps);</span><br><span class="line">	app.CreateEventExecutionSteps(HttpApplication.EventPostAuthorizeRequest, steps);</span><br><span class="line">	app.CreateEventExecutionSteps(HttpApplication.EventResolveRequestCache, steps);</span><br><span class="line">	app.CreateEventExecutionSteps(HttpApplication.EventPostResolveRequestCache, steps);</span><br><span class="line">	steps.Add(<span class="keyword">new</span> MapHandlerExecutionStep(app));     <span class="comment">// map handler</span></span><br><span class="line">	app.CreateEventExecutionSteps(HttpApplication.EventPostMapRequestHandler, steps);</span><br><span class="line">	app.CreateEventExecutionSteps(HttpApplication.EventAcquireRequestState, steps);</span><br><span class="line">	app.CreateEventExecutionSteps(HttpApplication.EventPostAcquireRequestState, steps);</span><br><span class="line">	app.CreateEventExecutionSteps(HttpApplication.EventPreRequestHandlerExecute, steps);</span><br><span class="line">	steps.Add(app.CreateImplicitAsyncPreloadExecutionStep()); <span class="comment">// implict async preload step</span></span><br><span class="line">	steps.Add(<span class="keyword">new</span> CallHandlerExecutionStep(app));  <span class="comment">// execute handler</span></span><br><span class="line">	app.CreateEventExecutionSteps(HttpApplication.EventPostRequestHandlerExecute, steps);</span><br><span class="line">	app.CreateEventExecutionSteps(HttpApplication.EventReleaseRequestState, steps);</span><br><span class="line">	app.CreateEventExecutionSteps(HttpApplication.EventPostReleaseRequestState, steps);</span><br><span class="line">	steps.Add(<span class="keyword">new</span> CallFilterExecutionStep(app));  <span class="comment">// filtering</span></span><br><span class="line">	app.CreateEventExecutionSteps(HttpApplication.EventUpdateRequestCache, steps);</span><br><span class="line">	app.CreateEventExecutionSteps(HttpApplication.EventPostUpdateRequestCache, steps);</span><br><span class="line">	_endRequestStepIndex = steps.Count;</span><br><span class="line">	app.CreateEventExecutionSteps(HttpApplication.EventEndRequest, steps);</span><br><span class="line">	steps.Add(<span class="keyword">new</span> NoopExecutionStep()); <span class="comment">// the last is always there</span></span><br><span class="line"></span><br><span class="line">	_execSteps = <span class="keyword">new</span> IExecutionStep[steps.Count];</span><br><span class="line">	steps.CopyTo(_execSteps);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>如果在<code>Web.Config</code>設定<code>urlMappingsEnabled</code>就會實施<code>UrlMappingsModule.UrlMappingRewritePath</code>(UrlRerwite)<br><code>MapHandlerExecutionStep</code>：找尋匹配<code>HttpHandler</code>物件</p>
</blockquote>
<h3 id="CreateEventExecutionSteps-載入事件"><a href="#CreateEventExecutionSteps-載入事件" class="headerlink" title="CreateEventExecutionSteps 載入事件"></a>CreateEventExecutionSteps 載入事件</h3><p>下面程式碼可以看到<code>CreateEventExecutionSteps</code>方法透過<code>eventIndex</code>去<strong>事件集合</strong>查找註冊事件,並把事件寫入<code>ArrayList steps</code>集合中.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">CreateEventExecutionSteps</span>(<span class="params">Object eventIndex, ArrayList steps</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// async</span></span><br><span class="line">    AsyncAppEventHandler asyncHandler = AsyncEvents[eventIndex];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (asyncHandler != <span class="literal">null</span>) &#123;</span><br><span class="line">        asyncHandler.CreateExecutionSteps(<span class="keyword">this</span>, steps);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// sync</span></span><br><span class="line">    EventHandler handler = (EventHandler)Events[eventIndex];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (handler != <span class="literal">null</span>) &#123;</span><br><span class="line">        Delegate[] handlers = handler.GetInvocationList();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; handlers.Length; i++)  &#123;</span><br><span class="line">            steps.Add(<span class="keyword">new</span> SyncEventExecutionStep(<span class="keyword">this</span>, (EventHandler)handlers[i]));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>為了建立管道最後可看到<code>steps.CopyTo(_execSteps);</code>把建立的管道<code>Step</code>複製到<code>_execSteps</code>集合中</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> IExecutionStep[] _execSteps;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">internal</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">BuildSteps</span>(<span class="params">WaitCallback stepCallback </span>)</span> &#123;</span><br><span class="line">    ArrayList steps = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    <span class="comment">//.....其他程式碼</span></span><br><span class="line">    _execSteps = <span class="keyword">new</span> IExecutionStep[steps.Count];</span><br><span class="line">    steps.CopyTo(_execSteps);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p><code>steps</code>最後把所有註冊事件<code>Copy</code>到<code>ApplicationStepManager</code>的<code>private IExecutionStep[] _execSteps</code>集合中提供<code>ResumeSteps</code>方法呼叫使用.</p>
</blockquote>
<h3 id="HttpApplication事件集合"><a href="#HttpApplication事件集合" class="headerlink" title="HttpApplication事件集合"></a>HttpApplication事件集合</h3><p>這兩個欄位集合乘載我們註冊的<code>Asp.net</code>事件</p>
<ul>
<li><code>EventHandlerList</code> 同步使用事件.</li>
<li><code>AsyncAppEventHandlersTable</code> 非同步使用事件.</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> EventHandlerList _events;</span><br><span class="line"><span class="keyword">protected</span> EventHandlerList Events &#123;</span><br><span class="line">    <span class="keyword">get</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (_events == <span class="literal">null</span>) &#123;</span><br><span class="line">            _events = <span class="keyword">new</span> EventHandlerList();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> _events;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> AsyncAppEventHandlersTable _asyncEvents;</span><br><span class="line"><span class="keyword">private</span> AsyncAppEventHandlersTable AsyncEvents &#123;</span><br><span class="line">    <span class="keyword">get</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (_asyncEvents == <span class="literal">null</span>)</span><br><span class="line">            _asyncEvents = <span class="keyword">new</span> AsyncAppEventHandlersTable();</span><br><span class="line">        <span class="keyword">return</span> _asyncEvents;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>用其中一個事件舉例</p>
<p><code>PostMapRequestHandler</code>提供擴充的事件註冊點，透過<code>AddSyncEventHookup</code>把事件加入集合中.</p>
<ol>
<li><code>object key</code>:此事件識別資訊(每個事件都有自己的Object),如<code>PostMapRequestHandler</code>事件傳入<code>EventPostMapRequestHandler</code>物件.</li>
<li><code>Delegate handler</code>:使用者撰寫事件方法.</li>
<li><code>RequestNotification notification</code>:屬於哪種分群.</li>
</ol>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">event</span> EventHandler PostMapRequestHandler &#123;</span><br><span class="line">    <span class="keyword">add</span> &#123; AddSyncEventHookup(EventPostMapRequestHandler, <span class="keyword">value</span>, RequestNotification.MapRequestHandler, <span class="literal">true</span>); &#125;</span><br><span class="line">    <span class="keyword">remove</span> &#123; RemoveSyncEventHookup(EventPostMapRequestHandler, <span class="keyword">value</span>, RequestNotification.MapRequestHandler); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>其他10幾個事件使用方式大同小異,這裡就不一一介紹了</p>
</blockquote>
<h3 id="IExecutionStep介面"><a href="#IExecutionStep介面" class="headerlink" title="IExecutionStep介面"></a>IExecutionStep介面</h3><p><code>IExecutionStep</code>這個介面，裡面最重要的方法是<code>void Execute();</code>來執行注冊的事件方法.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// interface to represent one execution step</span></span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">interface</span> <span class="title">IExecutionStep</span> &#123;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Execute</span>(<span class="params"></span>)</span>;</span><br><span class="line">	<span class="keyword">bool</span> CompletedSynchronously &#123; <span class="keyword">get</span>;&#125;</span><br><span class="line">	<span class="keyword">bool</span> IsCancellable &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>在<code>BuildSteps</code>方法中可以看到，全部事件轉成<code>IExecutionStep</code>介面放入<code>_execSteps</code>待被執行<code>IExecutionStep</code>集合列表.</p>
<blockquote>
<p><code>_execSteps</code>是一個物件區域變數，提供<code>internal override void ResumeSteps(Exception error)</code>呼叫使用.</p>
</blockquote>
<h2 id="ResumeSteps方法呼叫IExecutionStep物件"><a href="#ResumeSteps方法呼叫IExecutionStep物件" class="headerlink" title="ResumeSteps方法呼叫IExecutionStep物件"></a>ResumeSteps方法呼叫IExecutionStep物件</h2><p><code>ResumeSteps</code>這個方法做了許多事情,我下面只保留<code>ResumeSteps</code>方法如何去呼叫<code>IExecutionStep</code>物件的<code>Execute</code>方法</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> _currentStepIndex;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">[<span class="meta">System.Diagnostics.DebuggerStepperBoundaryAttribute</span>]</span><br><span class="line"><span class="function"><span class="keyword">internal</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">ResumeSteps</span>(<span class="params">Exception error</span>)</span> &#123;</span><br><span class="line">	<span class="keyword">bool</span> appCompleted = <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">bool</span> stepCompletedSynchronously = <span class="literal">true</span>;</span><br><span class="line">	HttpApplication app = _application;</span><br><span class="line">	CountdownTask appInstanceConsumersCounter = app.ApplicationInstanceConsumersCounter;</span><br><span class="line">	HttpContext context = app.Context;</span><br><span class="line">	ThreadContext threadContext = <span class="literal">null</span>;</span><br><span class="line">	AspNetSynchronizationContextBase syncContext = context.SyncContext;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		<span class="keyword">using</span> (syncContext.AcquireThreadLock()) &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				threadContext = app.OnThreadEnter();</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">				<span class="keyword">if</span> (error == <span class="literal">null</span>)</span><br><span class="line">					error = e;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					<span class="keyword">for</span> (; ; ) &#123;</span><br><span class="line">						<span class="comment">// record error</span></span><br><span class="line"></span><br><span class="line">						<span class="keyword">if</span> (syncContext.Error != <span class="literal">null</span>) &#123;</span><br><span class="line">							error = syncContext.Error;</span><br><span class="line">							syncContext.ClearError();</span><br><span class="line">						&#125;</span><br><span class="line"></span><br><span class="line">						<span class="keyword">if</span> (error != <span class="literal">null</span>) &#123;</span><br><span class="line">							app.RecordError(error);</span><br><span class="line">							error = <span class="literal">null</span>;</span><br><span class="line">						&#125;</span><br><span class="line"></span><br><span class="line">						<span class="comment">// check for any outstanding async operations</span></span><br><span class="line"></span><br><span class="line">						<span class="keyword">if</span> (syncContext.PendingCompletion(_resumeStepsWaitCallback)) &#123;</span><br><span class="line">							<span class="comment">// wait until all pending async operations complete</span></span><br><span class="line">							<span class="keyword">break</span>;</span><br><span class="line">						&#125;</span><br><span class="line"></span><br><span class="line">						<span class="comment">// advance to next step</span></span><br><span class="line"></span><br><span class="line">						<span class="keyword">if</span> (_currentStepIndex &lt; _endRequestStepIndex &amp;&amp; (context.Error != <span class="literal">null</span> || _requestCompleted)) &#123;</span><br><span class="line">							<span class="comment">// end request</span></span><br><span class="line">							context.Response.FilterOutput();</span><br><span class="line">							_currentStepIndex = _endRequestStepIndex;</span><br><span class="line">						&#125;</span><br><span class="line">						<span class="keyword">else</span> &#123;</span><br><span class="line">							_currentStepIndex++;</span><br><span class="line">						&#125;</span><br><span class="line"></span><br><span class="line">						<span class="keyword">if</span> (_currentStepIndex &gt;= _execSteps.Length) &#123;</span><br><span class="line">							appCompleted = <span class="literal">true</span>;</span><br><span class="line">							<span class="keyword">break</span>;</span><br><span class="line">						&#125;</span><br><span class="line"></span><br><span class="line">						<span class="comment">// execute the current step</span></span><br><span class="line"></span><br><span class="line">						_numStepCalls++;          <span class="comment">// count all calls</span></span><br><span class="line"></span><br><span class="line">						<span class="comment">// enable launching async operations before each new step</span></span><br><span class="line">						syncContext.Enable();</span><br><span class="line"></span><br><span class="line">						<span class="comment">// call to execute current step catching thread abort exception</span></span><br><span class="line">						error = app.ExecuteStep(_execSteps[_currentStepIndex], <span class="keyword">ref</span> stepCompletedSynchronously);</span><br><span class="line"></span><br><span class="line">						<span class="comment">// unwind the stack in the async case</span></span><br><span class="line">						<span class="keyword">if</span> (!stepCompletedSynchronously)</span><br><span class="line">							<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">						_numSyncStepCalls++;      <span class="comment">// count synchronous calls</span></span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">finally</span> &#123;</span><br><span class="line">					<span class="keyword">if</span> (appCompleted) &#123;</span><br><span class="line">						<span class="comment">// need to raise OnRequestCompleted while within the ThreadContext so that things like User, CurrentCulture, etc. are available</span></span><br><span class="line">						context.RaiseOnRequestCompleted();</span><br><span class="line">					&#125;</span><br><span class="line"></span><br><span class="line">					<span class="keyword">if</span> (threadContext != <span class="literal">null</span>) &#123;</span><br><span class="line">						<span class="keyword">try</span> &#123;</span><br><span class="line">							threadContext.DisassociateFromCurrentThread();</span><br><span class="line">						&#125;</span><br><span class="line">						<span class="keyword">catch</span> &#123;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">catch</span> &#123; <span class="comment">// Protect against exception filters</span></span><br><span class="line">				<span class="keyword">throw</span>;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">		&#125;   <span class="comment">// using</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (appCompleted) &#123;</span><br><span class="line"></span><br><span class="line">			context.RaiseOnPipelineCompleted();</span><br><span class="line"></span><br><span class="line">			context.Unroot();</span><br><span class="line"></span><br><span class="line">			app.AsyncResult.Complete((_numStepCalls == _numSyncStepCalls), <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">			app.ReleaseAppInstance();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">finally</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> (appInstanceConsumersCounter != <span class="literal">null</span>) &#123;</span><br><span class="line">			appInstanceConsumersCounter.MarkOperationCompleted(); <span class="comment">// ResumeSteps call complete</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>上面程式碼最核心的片段在</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (_currentStepIndex &lt; _endRequestStepIndex &amp;&amp; (context.Error != <span class="literal">null</span> || _requestCompleted)) &#123;</span><br><span class="line"></span><br><span class="line">    context.Response.FilterOutput();</span><br><span class="line">    _currentStepIndex = _endRequestStepIndex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    _currentStepIndex++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (_currentStepIndex &gt;= _execSteps.Length) &#123;</span><br><span class="line">    appCompleted = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// execute the current step</span></span><br><span class="line">_numStepCalls++;         </span><br><span class="line"><span class="comment">// enable launching async operations before each new step</span></span><br><span class="line">syncContext.Enable();</span><br><span class="line"><span class="comment">// call to execute current step catching thread abort exception</span></span><br><span class="line">error = app.ExecuteStep(_execSteps[_currentStepIndex], <span class="keyword">ref</span> stepCompletedSynchronously);</span><br></pre></td></tr></table></figure></div>
<ol>
<li><code>_currentStepIndex</code>這個欄位表示取得當前需要跑事件<code>Index</code>(從之前<code>IExecutionStep[]</code>集合取得),每次執完都會<code>_currentStepIndex++</code> </li>
<li>有一個無限迴圈<code>for (; ; )</code>一直在跑除非兩種情況才會終止迴圈.<ol>
<li><code>_currentStepIndex &gt;= _execSteps.Length</code>代表全部事件都跑完了.</li>
<li>判斷<code>context.Error != null</code>執行得過程是否有出錯,如果有就終止繼續執行.</li>
</ol>
</li>
<li>透過<code>HttpApplication.ExecuteStep</code>方法執行前面註冊的事件</li>
<li><code>bool appCompleted</code>來判斷目前是否執行完全部事件.</li>
<li>只要還有事件就呼叫<code>ExecuteStep</code>,把當前事件傳入(<code>_execSteps[_currentStepIndex]</code>)</li>
</ol>
<h3 id="HttpApplication的ExecuteStep"><a href="#HttpApplication的ExecuteStep" class="headerlink" title="HttpApplication的ExecuteStep"></a>HttpApplication的ExecuteStep</h3><p>這邊蠻有趣一件事情是<code>ExecuteStep</code>方法回傳一個<code>Exception</code>物件當作這次執行成功或失敗,而<code>ExecuteStep</code>執行過程是主要是呼叫<code>ExecuteStepImpl</code>方法來呼叫<code>step.Execute();</code></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">internal</span> Exception <span class="title">ExecuteStep</span>(<span class="params">IExecutionStep step, <span class="keyword">ref</span> <span class="keyword">bool</span> completedSynchronously</span>)</span> &#123;</span><br><span class="line">    Exception error = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (step.IsCancellable) &#123;</span><br><span class="line">                _context.BeginCancellablePeriod();  <span class="comment">// request can be cancelled from this point</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    ExecuteStepImpl(step);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">finally</span> &#123;</span><br><span class="line">                    _context.EndCancellablePeriod();  <span class="comment">// request can be cancelled until this point</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                _context.WaitForExceptionIfCancelled();  <span class="comment">// wait outside of finally</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                ExecuteStepImpl(step);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!step.CompletedSynchronously) &#123;</span><br><span class="line">                completedSynchronously = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            error = e;</span><br><span class="line">            <span class="keyword">if</span> (e <span class="keyword">is</span> ThreadAbortException &amp;&amp;</span><br><span class="line">                ((Thread.CurrentThread.ThreadState &amp; ThreadState.AbortRequested) == <span class="number">0</span>))  &#123;</span><br><span class="line">                error = <span class="literal">null</span>;</span><br><span class="line">                _stepManager.CompleteRequest();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (ThreadAbortException e) &#123;</span><br><span class="line">        <span class="keyword">if</span> (e.ExceptionState != <span class="literal">null</span> &amp;&amp; e.ExceptionState <span class="keyword">is</span> CancelModuleException) &#123;</span><br><span class="line">            CancelModuleException cancelException = (CancelModuleException)e.ExceptionState;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (cancelException.Timeout) &#123;</span><br><span class="line">                <span class="comment">// Timed out</span></span><br><span class="line">                error = <span class="keyword">new</span> HttpException(SR.GetString(SR.Request_timed_out),</span><br><span class="line">                                    <span class="literal">null</span>, WebEventCodes.RuntimeErrorRequestAbort);</span><br><span class="line">                PerfCounters.IncrementCounter(AppPerfCounter.REQUESTS_TIMED_OUT);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// Response.End</span></span><br><span class="line">                error = <span class="literal">null</span>;</span><br><span class="line">                _stepManager.CompleteRequest();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Thread.ResetAbort();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    completedSynchronously = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> error;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ExecuteStepImpl</span>(<span class="params">IExecutionStep step</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(_stepInvoker != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">bool</span> stepCalled = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        _stepInvoker.Invoke(() =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (!stepCalled) &#123;</span><br><span class="line">                stepCalled = <span class="literal">true</span>;</span><br><span class="line">                step.Execute();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!stepCalled) &#123;</span><br><span class="line">            step.Execute();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        step.Execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="重要的兩個IExecutionStep"><a href="#重要的兩個IExecutionStep" class="headerlink" title="重要的兩個IExecutionStep"></a>重要的兩個IExecutionStep</h2><ul>
<li><code>MapHandlerExecutionStep</code>:透過<code>HttpApplication.MapHttpHandler</code>方法取得使用<code>HttpHandler</code>(透過<code>IHttpHandlerFactory</code>和XML註冊表來完成)</li>
<li><code>CallHandlerExecutionStep</code>:取得使用<code>HttpHandler</code>依照非同步或同步<code>HttpHandler</code>執行相對應呼叫(先判斷是否非同步)</li>
</ul>
<h2 id="小結："><a href="#小結：" class="headerlink" title="小結："></a>小結：</h2><p>今天我們了解到</p>
<ol>
<li><code>Appliaction</code>管道是如何被建立(透過<code>BuildSteps</code>方法)依照<code>Asp.net</code>順序註冊事件</li>
<li>所有事件被封裝到繼承<code>IExecutionStep</code>物件中</li>
<li>透過呼叫<code>ResumeSteps</code>方法來依序執行註冊事件.</li>
</ol>
<p>下篇會跟大家詳細分享重要的兩個<code>IExecutionStep</code>物件</p>
<ul>
<li><code>MapHandlerExecutionStep</code></li>
<li><code>CallHandlerExecutionStep</code></li>
</ul>
<p>微軟管道設計(透過事件)讓程式開發人員提供高擴展設計方式(<code>AOP</code>編成),值得讓我們思考且學習.</p>
<p><strong>此文作者</strong>：Daniel Shih(石頭)<br><strong>此文地址</strong>： <a href="https://isdaniel.github.io/ithelp-day6/">https://isdaniel.github.io/ithelp-day6/</a> <br><strong>版權聲明</strong>：本博客所有文章除特別聲明外，均採用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC90dy8=" title="https://creativecommons.org/licenses/by-nc-sa/3.0/tw/">CC BY-NC-SA 3.0 TW<i class="fa fa-external-link"></i></span> 許可協議。轉載請註明出處！</p>
]]></content>
      <categories>
        <category>11th鐵人賽</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>Asp.net</tag>
        <tag>Asp.net-MVC</tag>
        <tag>SourceCode</tag>
        <tag>11th鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>Asp.Net重要物件HttpApplication(三) 取得執行的IHttpHandler (第7天)</title>
    <url>/ithelp-day7/</url>
    <content><![CDATA[<h1 id="Agenda"><a href="#Agenda" class="headerlink" title="Agenda"></a>Agenda<!-- omit in toc --></h1><ul>
<li><a href="#%e5%89%8d%e8%a8%80">前言</a></li>
<li><a href="#%e5%91%bc%e5%8f%abhttpappliaction%e5%8f%96%e5%be%97httphandler%e4%b8%a6%e5%91%bc%e5%8f%ab">呼叫HttpAppliaction取得HttpHandler並呼叫</a><ul>
<li><a href="#maphandlerexecutionstep%e7%a8%8b%e5%bc%8f%e7%a2%bc%e8%a7%a3%e8%aa%aa">MapHandlerExecutionStep程式碼解說</a></li>
<li><a href="#callhandlerexecutionstep%e7%a8%8b%e5%bc%8f%e7%a2%bc%e8%a7%a3%e8%aa%aa">CallHandlerExecutionStep程式碼解說</a></li>
</ul>
</li>
<li><a href="#%e5%b0%8f%e7%b5%90">小結：</a></li>
</ul>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前面和大家分享<code>StepManager</code>是如何建立管道和依序呼叫<code>IHttpModule</code>註冊事件</p>
<blockquote>
<p>查看原始碼好站 <span class="exturl" data-url="aHR0cHM6Ly9yZWZlcmVuY2Vzb3VyY2UubWljcm9zb2Z0LmNvbS8=" title="https://referencesource.microsoft.com/">Reference Source<i class="fa fa-external-link"></i></span></p>
</blockquote>
<blockquote>
<p>此文的程式碼比較多我會在原始碼上邊上說明相對應編號方便大家觀看</p>
</blockquote>
<p>今天跟大家分享<code>HttpAppliaction</code>是如何找到要執行的<code>IHttpHandler</code>物件.</p>
<h2 id="呼叫HttpAppliaction取得HttpHandler並呼叫"><a href="#呼叫HttpAppliaction取得HttpHandler並呼叫" class="headerlink" title="呼叫HttpAppliaction取得HttpHandler並呼叫"></a>呼叫HttpAppliaction取得HttpHandler並呼叫</h2><p>在<code>ApplicationStepManager</code>的<code>IExecutionStep</code>中重要的實現類別有兩個</p>
<ol>
<li><code>MapHandlerExecutionStep</code>:找到執行<code>IHttpHander</code></li>
<li><code>CallHandlerExecutionStep</code></li>
</ol>
<h3 id="MapHandlerExecutionStep程式碼解說"><a href="#MapHandlerExecutionStep程式碼解說" class="headerlink" title="MapHandlerExecutionStep程式碼解說"></a>MapHandlerExecutionStep程式碼解說</h3><p>前面說過<code>IExecutionStep</code>最核心就是要找到一個<code>Execute</code>方法</p>
<p><code>MapHandlerExecutionStep</code>的<code>Execute</code>方法是為了找到一個要執行的<code>HttpHander</code></p>
<blockquote>
<p>每次請求都會呼叫<code>HttpContext.Handler</code>屬性.</p>
</blockquote>
<p><code>MapHttpHandler</code>會依照下面權重來取得<code>HttpHander</code>物件.</p>
<ol>
<li><code>context.RemapHandlerInstance</code>如果有物件就優先返回(很重要因為這就是Asp.net MVC使用的<code>HttpHander</code>物件)</li>
<li>透過<code>IHttpHandlerFactory</code>工廠來取得物件,依照我們在<code>Config</code>註冊的<code>HttpHander</code>對應資料<ul>
<li>副檔名<code>*.ashx</code>泛型處理常式透過<code>SimpleHandlerFactory</code></li>
<li>副檔名<code>*.aspx</code>泛型處理常式透過<code>PageHandlerFactory</code></li>
</ul>
</li>
</ol>
<blockquote>
<p>想知道更多可以查看<code>applicationhost.config</code>註冊表</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">MapHandlerExecutionStep</span> : <span class="title">IExecutionStep</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> IExecutionStep.Execute() &#123;</span><br><span class="line">        HttpContext context = _application.Context;</span><br><span class="line">        HttpRequest request = context.Request;</span><br><span class="line"></span><br><span class="line">        context.Handler = _application.MapHttpHandler(</span><br><span class="line">            context,</span><br><span class="line">            request.RequestType,</span><br><span class="line">            request.FilePathObject,</span><br><span class="line">            request.PhysicalPathInternal,</span><br><span class="line">            <span class="literal">false</span> <span class="comment">/*useAppConfig*/</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">internal</span> IHttpHandler <span class="title">MapHttpHandler</span>(<span class="params">HttpContext context, String requestType, VirtualPath path, String pathTranslated, <span class="keyword">bool</span> useAppConfig</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">		IHttpHandler handler = (context.ServerExecuteDepth == <span class="number">0</span>) ? context.RemapHandlerInstance : <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">using</span> (<span class="keyword">new</span> ApplicationImpersonationContext()) &#123;</span><br><span class="line">			<span class="comment">// Use remap handler if possible</span></span><br><span class="line">			<span class="keyword">if</span> (handler != <span class="literal">null</span>)&#123;</span><br><span class="line">				<span class="keyword">return</span> handler;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="comment">// Map new handler</span></span><br><span class="line">			HttpHandlerAction mapping = GetHandlerMapping(context, requestType, path, useAppConfig);</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (mapping == <span class="literal">null</span>) &#123;</span><br><span class="line">				PerfCounters.IncrementCounter(AppPerfCounter.REQUESTS_NOT_FOUND);</span><br><span class="line">				PerfCounters.IncrementCounter(AppPerfCounter.REQUESTS_FAILED);</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> HttpException(SR.GetString(SR.Http_handler_not_found_for_request_type, requestType));</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="comment">// Get factory from the mapping</span></span><br><span class="line">			IHttpHandlerFactory factory = GetFactory(mapping);</span><br><span class="line"></span><br><span class="line">			<span class="comment">// Get factory from the mapping</span></span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				IHttpHandlerFactory2 factory2 = factory <span class="keyword">as</span> IHttpHandlerFactory2;</span><br><span class="line"></span><br><span class="line">				<span class="keyword">if</span> (factory2 != <span class="literal">null</span>) &#123;</span><br><span class="line">					handler = factory2.GetHandler(context, requestType, path, pathTranslated);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> &#123;</span><br><span class="line">					handler = factory.GetHandler(context, requestType, path.VirtualPathString, pathTranslated);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">				<span class="comment">//...丟Exception</span></span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="comment">// Remember for recycling</span></span><br><span class="line">			<span class="keyword">if</span> (_handlerRecycleList == <span class="literal">null</span>)</span><br><span class="line">				_handlerRecycleList = <span class="keyword">new</span> ArrayList();</span><br><span class="line">			_handlerRecycleList.Add(<span class="keyword">new</span> HandlerWithFactory(handler, factory));</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> handler;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><code>MapHandlerExecutionStep</code>是為了找到我們要執行的<code>HttpHandler</code>物件.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (handler != <span class="literal">null</span>)&#123;</span><br><span class="line">	<span class="keyword">return</span> handler;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>在一開始先判斷<code>handler</code>是否已經有值如果有就直接返回(這個很重要因為這是為什麼<code>MVC</code>,<code>WebAPI</code>可以運作且不用在<code>Config</code>設定配對<code>IHttpHandlerFactory</code>原因).</p>
<blockquote>
<p>只需要在<code>MapHandlerExecutionStep</code>執行前將<code>context.RemapHandlerInstance</code>給一個<code>HttpHandler</code>物件即可.</p>
</blockquote>
<h3 id="CallHandlerExecutionStep程式碼解說"><a href="#CallHandlerExecutionStep程式碼解說" class="headerlink" title="CallHandlerExecutionStep程式碼解說"></a>CallHandlerExecutionStep程式碼解說</h3><p><code>CallHandlerExecutionStep</code>物件透過<code>context.Handler</code>可以找到要執行的<code>HttpHandler</code>,這邊也是優先判斷是否可執行異步請求.</p>
<ul>
<li>異步呼叫<code>beginProcessRequestDelegate</code>方法(此方法將實現<code>IHttpAsyncHandler</code>物件封裝成一個<code>Func&lt;T, AsyncCallback, object, IAsyncResult&gt;</code>委派方法),之後再調用返回一個<code>IAsyncResult</code>物件(處理後結果最後呼叫<code>EndProcessRequest</code>方法).</li>
<li>同步呼叫<code>ProcessRequest</code>:判斷<code>context.Handler</code>不是<code>IHttpAsyncHandler</code>型別就值型同步動作</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// execution step -- call HTTP handler (used to be a separate module)</span></span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">CallHandlerExecutionStep</span> : <span class="title">IExecutionStep</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> HttpApplication   _application;</span><br><span class="line">	<span class="keyword">private</span> AsyncCallback     _completionCallback;</span><br><span class="line">	<span class="keyword">private</span> IHttpAsyncHandler _handler;       <span class="comment">// per call</span></span><br><span class="line">	<span class="keyword">private</span> AsyncStepCompletionInfo _asyncStepCompletionInfo; <span class="comment">// per call</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">bool</span>              _sync;          <span class="comment">// per call</span></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">internal</span> <span class="title">CallHandlerExecutionStep</span>(<span class="params">HttpApplication app</span>)</span> &#123;</span><br><span class="line">		_application = app;</span><br><span class="line">		_completionCallback = <span class="keyword">new</span> AsyncCallback(<span class="keyword">this</span>.OnAsyncHandlerCompletion);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//...其他方法</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">void</span> IExecutionStep.Execute() &#123;</span><br><span class="line">		HttpContext context = _application.Context;</span><br><span class="line">		IHttpHandler handler = context.Handler;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (handler != <span class="literal">null</span> &amp;&amp; HttpRuntime.UseIntegratedPipeline) &#123;</span><br><span class="line">			IIS7WorkerRequest wr = context.WorkerRequest <span class="keyword">as</span> IIS7WorkerRequest;</span><br><span class="line">			<span class="keyword">if</span> (wr != <span class="literal">null</span> &amp;&amp; wr.IsHandlerExecutionDenied()) &#123;</span><br><span class="line">				_sync = <span class="literal">true</span>;</span><br><span class="line">				HttpException error = <span class="keyword">new</span> HttpException(<span class="number">403</span>, SR.GetString(SR.Handler_access_denied));</span><br><span class="line">				error.SetFormatter(<span class="keyword">new</span> PageForbiddenErrorFormatter(context.Request.Path, SR.GetString(SR.Handler_access_denied)));</span><br><span class="line">				<span class="keyword">throw</span> error;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (handler == <span class="literal">null</span>) &#123;</span><br><span class="line">			_sync = <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (handler <span class="keyword">is</span> IHttpAsyncHandler) &#123;</span><br><span class="line">			<span class="comment">// asynchronous handler</span></span><br><span class="line">			IHttpAsyncHandler asyncHandler = (IHttpAsyncHandler)handler;</span><br><span class="line"></span><br><span class="line">			_sync = <span class="literal">false</span>;</span><br><span class="line">			_handler = asyncHandler;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">var</span> beginProcessRequestDelegate = AppVerifier.WrapBeginMethod&lt;HttpContext&gt;(_application, asyncHandler.BeginProcessRequest);</span><br><span class="line"></span><br><span class="line">			_asyncStepCompletionInfo.Reset();</span><br><span class="line">			context.SyncContext.AllowVoidAsyncOperations();</span><br><span class="line">			IAsyncResult ar;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				ar = beginProcessRequestDelegate(context, _completionCallback, <span class="literal">null</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">catch</span> &#123;</span><br><span class="line">				<span class="comment">// The asynchronous step has completed, so we should disallow further</span></span><br><span class="line">				<span class="comment">// async operations until the next step.</span></span><br><span class="line">				context.SyncContext.ProhibitVoidAsyncOperations();</span><br><span class="line">				<span class="keyword">throw</span>;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">bool</span> operationCompleted;</span><br><span class="line">			<span class="keyword">bool</span> mustCallEndHandler;</span><br><span class="line">			_asyncStepCompletionInfo.RegisterBeginUnwound(ar, <span class="keyword">out</span> operationCompleted, <span class="keyword">out</span> mustCallEndHandler);</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (operationCompleted) &#123;</span><br><span class="line">				_sync = <span class="literal">true</span>;</span><br><span class="line">				_handler = <span class="literal">null</span>; <span class="comment">// not to remember</span></span><br><span class="line"></span><br><span class="line">				context.SyncContext.ProhibitVoidAsyncOperations();</span><br><span class="line"></span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					<span class="keyword">if</span> (mustCallEndHandler) &#123;</span><br><span class="line">						asyncHandler.EndProcessRequest(ar);</span><br><span class="line">					&#125;</span><br><span class="line"></span><br><span class="line">					_asyncStepCompletionInfo.ReportError();</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">finally</span> &#123;</span><br><span class="line">					SuppressPostEndRequestIfNecessary(context);</span><br><span class="line"></span><br><span class="line">					context.Response.GenerateResponseHeadersForHandler();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="comment">// synchronous handler</span></span><br><span class="line">			_sync = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">			context.SyncContext.SetSyncCaller();</span><br><span class="line"></span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				handler.ProcessRequest(context);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">finally</span> &#123;</span><br><span class="line">				context.SyncContext.ResetSyncCaller();</span><br><span class="line"></span><br><span class="line">				SuppressPostEndRequestIfNecessary(context);</span><br><span class="line"></span><br><span class="line">				context.Response.GenerateResponseHeadersForHandler();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="小結："><a href="#小結：" class="headerlink" title="小結："></a>小結：</h2><p>希望可以讓大家對於為什麼<code>Asp.net</code>為何可以針對<code>IHttpModule</code>擴充且為何最後都會請求一個<code>IHttpHandler</code>有更深入的了解.</p>
<p>微軟透過一系列的管道設計模式提供有高度擴展的系統對外提供一個<code>IHttpHandler</code>讓我們可以客製化擴充要執行的請求.</p>
<p>對於此次請求又有<code>IHttpModule</code>可對於<code>HttpApplication</code>事件做擴充(透過AOP編成方式).</p>
<p>今天之後我們會開始講解<strong>Asp.net MVC</strong>相關的原始程式碼.</p>
<p><strong>此文作者</strong>：Daniel Shih(石頭)<br><strong>此文地址</strong>： <a href="https://isdaniel.github.io/ithelp-day7/">https://isdaniel.github.io/ithelp-day7/</a> <br><strong>版權聲明</strong>：本博客所有文章除特別聲明外，均採用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC90dy8=" title="https://creativecommons.org/licenses/by-nc-sa/3.0/tw/">CC BY-NC-SA 3.0 TW<i class="fa fa-external-link"></i></span> 許可協議。轉載請註明出處！</p>
]]></content>
      <categories>
        <category>11th鐵人賽</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>Asp.net</tag>
        <tag>Asp.net-MVC</tag>
        <tag>SourceCode</tag>
        <tag>11th鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>揭密Mvc使用IHttpHandler by UrlRoutingModule-4.0 (第8天)</title>
    <url>/ithelp-day8/</url>
    <content><![CDATA[<h1 id="Agenda"><a href="#Agenda" class="headerlink" title="Agenda"></a>Agenda<!-- omit in toc --></h1><ul>
<li><a href="#%e5%89%8d%e8%a8%80">前言：</a></li>
<li><a href="#urlroutingmodule-40">UrlRoutingModule-4.0</a><ul>
<li><a href="#onapplicationpostresolverequestcache%e4%ba%8b%e4%bb%b6">OnApplicationPostResolveRequestCache事件</a></li>
<li><a href="#postresolverequestcache%e6%96%b9%e6%b3%95">PostResolveRequestCache方法</a></li>
<li><a href="#iroutehandler%e5%8f%96%e5%be%97%e5%9f%b7%e8%a1%8chttphandler">IRouteHandler取得執行HttpHandler</a></li>
<li><a href="#remaphandler%e8%a8%ad%e7%bd%aehttpcontext%e7%9a%84httphandler">RemapHandler設置HttpContext的HttpHandler</a></li>
</ul>
</li>
<li><a href="#%e5%b0%8f%e7%b5%90">小結</a></li>
</ul>
<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>前面幾篇文章已經詳細分享解說<code>Asp.net</code>如何透過<code>HttpApplication</code>找到<code>IHttpHandler</code>並執行呼叫介面方法.</p>
<p><img src="https://raw.githubusercontent.com/isdaniel/MyBlog/master/source/images/IIS_Asp.net_Process.png" alt="瀏覽器請求IIS流程"></p>
<p>今天要跟大家分享上圖的最後一塊拼圖揭密並探索<code>Asp.net MVC</code>使用的<code>IHttpHandler</code>.</p>
<h2 id="UrlRoutingModule-4-0"><a href="#UrlRoutingModule-4-0" class="headerlink" title="UrlRoutingModule-4.0"></a>UrlRoutingModule-4.0</h2><p>在標題已經透漏我們是透過<code>UrlRoutingModule</code>這個繼承<code>IHttpModule</code>的類別來取得<code>IHttpHandler</code></p>
<p>有人可能會有疑問是我明明沒有註冊此<code>HttpModule</code> <code>Asp.net</code>怎麼知道的呢?</p>
<p>原因是這個<code>Module</code>是預設就載入</p>
<p>下圖是一般IIS預設載入的<code>HttpModule</code>可以看到<code>UrlRoutingModule</code>已經在裡面了.</p>
<p><img src="https://raw.githubusercontent.com/isdaniel/MyBlog/master/source/images/7-MVCModule.PNG" alt="7-MVCModule.PNG"></p>
<p>另外我們也可以看<code>applicationhost.config</code>檔案,也可以看到<code>UrlRoutingModule-4.0</code>也已經在裡面了.</p>
<p>我們可以發現他是在<code>System.Web.Routing</code>這個命名空間下.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="XML"><figure class="iseeu highlight /xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">	....</span><br><span class="line">	<span class="tag">&lt;<span class="name">add</span> <span class="attr">name</span>=<span class="string">"ServiceModel-4.0"</span> <span class="attr">type</span>=<span class="string">"System.ServiceModel.Activation.ServiceHttpModule,System.ServiceModel.Activation,Version=4.0.0.0,Culture=neutral,PublicKeyToken=31bf3856ad364e35"</span> <span class="attr">preCondition</span>=<span class="string">"managedHandler,runtimeVersionv4.0"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">add</span> <span class="attr">name</span>=<span class="string">"UrlRoutingModule-4.0"</span> <span class="attr">type</span>=<span class="string">"System.Web.Routing.UrlRoutingModule"</span> <span class="attr">preCondition</span>=<span class="string">"managedHandler,runtimeVersionv4.0"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<p>此連結可以看到 <span class="exturl" data-url="aHR0cHM6Ly9yZWZlcmVuY2Vzb3VyY2UubWljcm9zb2Z0LmNvbS8jU3lzdGVtLldlYi9Sb3V0aW5nL1VybFJvdXRpbmdNb2R1bGUuY3MsOWI0MTE1YWQxNmU0ZjRhMQ==" title="https://referencesource.microsoft.com/#System.Web/Routing/UrlRoutingModule.cs,9b4115ad16e4f4a1">UrlRoutingModule 原始碼<i class="fa fa-external-link"></i></span></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Init</span>(<span class="params">HttpApplication application</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Check if this module has been already addded</span></span><br><span class="line">	<span class="keyword">if</span> (application.Context.Items[_contextKey] != <span class="literal">null</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span>; <span class="comment">// already added to the pipeline</span></span><br><span class="line">	&#125;</span><br><span class="line">	application.Context.Items[_contextKey] = _contextKey;</span><br><span class="line"></span><br><span class="line">	application.PostResolveRequestCache += OnApplicationPostResolveRequestCache;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>前面文章有說道<code>Init</code>方法會在<code>HttpApplication</code>呼叫<code>InitInternal</code>方法時被呼叫.</p>
<p>這這裡可看到<code>application.PostResolveRequestCache</code>多註冊一個<code>OnApplicationPostResolveRequestCache</code>事件.</p>
<p>讓我們來看看此事件做了什麼事情</p>
<h3 id="OnApplicationPostResolveRequestCache事件"><a href="#OnApplicationPostResolveRequestCache事件" class="headerlink" title="OnApplicationPostResolveRequestCache事件"></a>OnApplicationPostResolveRequestCache事件</h3><p><code>OnApplicationPostResolveRequestCache</code>方法中,利用 <code>HttpContextWrapper</code>轉接器模式把<code>app.Context</code>轉接成一個可接受<code>HttpContextBase</code>物件,並呼叫傳入<code>PostResolveRequestCache</code>方法中.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnApplicationPostResolveRequestCache</span>(<span class="params"><span class="keyword">object</span> sender, EventArgs e</span>)</span> &#123;</span><br><span class="line">	HttpApplication app = (HttpApplication)sender;</span><br><span class="line">	HttpContextBase context = <span class="keyword">new</span> HttpContextWrapper(app.Context);</span><br><span class="line">	PostResolveRequestCache(context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="PostResolveRequestCache方法"><a href="#PostResolveRequestCache方法" class="headerlink" title="PostResolveRequestCache方法"></a>PostResolveRequestCache方法</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">PostResolveRequestCache</span>(<span class="params">HttpContextBase context</span>)</span> &#123;</span><br><span class="line">	<span class="comment">// Match the incoming URL against the route table</span></span><br><span class="line">	RouteData routeData = RouteCollection.GetRouteData(context);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Do nothing if no route found</span></span><br><span class="line">	<span class="keyword">if</span> (routeData == <span class="literal">null</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// If a route was found, get an IHttpHandler from the route's RouteHandler</span></span><br><span class="line">	IRouteHandler routeHandler = routeData.RouteHandler;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//... 判斷 error 程式碼</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (routeHandler <span class="keyword">is</span> StopRoutingHandler) &#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	RequestContext requestContext = <span class="keyword">new</span> RequestContext(context, routeData);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Dev10 766875	Adding RouteData to HttpContext</span></span><br><span class="line">	context.Request.RequestContext = requestContext;</span><br><span class="line"></span><br><span class="line">	IHttpHandler httpHandler = routeHandler.GetHttpHandler(requestContext);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//... 判斷 error 程式碼</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// Remap IIS7 to our handler</span></span><br><span class="line">	context.RemapHandler(httpHandler);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><code>RouteCollection</code>是一個全域路由集合,註冊使用路由(<code>Asp.net Global.cs</code>中我們很常看到使用).</p>
<blockquote>
<p>對於此集合註冊路由,是<code>MVC</code>,<code>WebApi</code>能運行的關鍵喔</p>
</blockquote>
<p>在<code>MVC</code>中我們透過<code>MapRoute</code>擴展方法來註冊路由,其實在這個擴展方法中會建立一個<code>Route</code>物件並加入<code>RouteCollection</code>集合中.</p>
<blockquote>
<p><code>Route</code>物件會提供一個<code>HttpHandler</code>來給我們呼叫使用.</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line">routes.MapRoute(</span><br><span class="line">    name: <span class="string">"Default"</span>,</span><br><span class="line">    url: <span class="string">"&#123;controller&#125;/&#123;action&#125;/&#123;id&#125;"</span>,</span><br><span class="line">    defaults: <span class="keyword">new</span> &#123; controller = <span class="string">"Home"</span>, action = <span class="string">"Index"</span>, id = UrlParameter.Optional &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure></div>
<p><code>RouteCollection.GetRouteData(context)</code>取得路由中匹配此次請求的路由資料，藉由此註冊進集合並繼承<code>RouteBase</code>抽象類別的物件</p>
<h3 id="IRouteHandler取得執行HttpHandler"><a href="#IRouteHandler取得執行HttpHandler" class="headerlink" title="IRouteHandler取得執行HttpHandler"></a>IRouteHandler取得執行HttpHandler</h3><p>在<code>routeData</code>會有一個重要的屬性<code>RouteHandler</code>是繼承於<code>IRouteHandler</code></p>
<p>這個介面只有一個方法就是回傳<code>IHttpHandler</code>看到這基本上就可以知道<code>MVC</code>的<code>IHttpHandler</code>是呼叫<code>RouteHandler.GetHttpHandler</code>回傳的物件.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IRouteHandler</span> &#123;</span><br><span class="line">    <span class="function">IHttpHandler <span class="title">GetHttpHandler</span>(<span class="params">RequestContext requestContext</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>後面會對於此介面有更詳細介紹</p>
</blockquote>
<h3 id="RemapHandler設置HttpContext的HttpHandler"><a href="#RemapHandler設置HttpContext的HttpHandler" class="headerlink" title="RemapHandler設置HttpContext的HttpHandler"></a>RemapHandler設置HttpContext的HttpHandler</h3><p>在<code>PostResolveRequestCache</code>最後面幾段程式碼,是透過<code>routeHandler.GetHttpHandler(requestContext)</code>取得<code>IHttpHandler</code>，並將其設置給<code>context</code></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line">IHttpHandler httpHandler = routeHandler.GetHttpHandler(requestContext);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Remap IIS7 to our handler</span></span><br><span class="line">context.RemapHandler(httpHandler);</span><br></pre></td></tr></table></figure></div>
<p>這邊說明一下<code>RemapHandler</code>作用,最主要是把傳入參數<code>handler</code>傳給<code>_remapHandler</code>欄位</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">RemapHandler</span>(<span class="params">IHttpHandler handler</span>)</span> &#123;</span><br><span class="line">    EnsureHasNotTransitionedToWebSocket();</span><br><span class="line"></span><br><span class="line">    IIS7WorkerRequest wr = _wr <span class="keyword">as</span> IIS7WorkerRequest;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (wr != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// Remap handler not allowed after ResolveRequestCache notification</span></span><br><span class="line">        <span class="keyword">if</span> (_notificationContext.CurrentNotification &gt;= RequestNotification.MapRequestHandler) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(SR.GetString(SR.Invoke_before_pipeline_event, <span class="string">"HttpContext.RemapHandler"</span>, <span class="string">"HttpApplication.MapRequestHandler"</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">string</span> handlerTypeName = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">string</span> handlerName = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (handler != <span class="literal">null</span>) &#123;</span><br><span class="line">            Type handlerType = handler.GetType();</span><br><span class="line"></span><br><span class="line">            handlerTypeName = handlerType.AssemblyQualifiedName;</span><br><span class="line">            handlerName = handlerType.FullName;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        wr.SetRemapHandler(handlerTypeName, handlerName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    _remapHandler = handler;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><code>_remapHandler</code>就是<code>RemapHandlerInstance</code>屬性回傳的值</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">internal</span> IHttpHandler RemapHandlerInstance &#123;</span><br><span class="line">    <span class="keyword">get</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> _remapHandler;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>我們之前有分享<code>MapHandlerExecutionStep</code>,<code>MapHttpHandler</code>會優先讀取存在<code>context.RemapHandlerInstance</code>中<code>HttpHandler</code>如果有物件就給<code>CallHandlerExecutionStep</code>呼叫使用.</p>
</blockquote>
<p>這邊算是比較完整圓了上一篇埋的小伏筆.</p>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>今天談到我們了解到</p>
<ol>
<li>MVC是透過<code>UrlRoutingModule-4.0</code>這個HttpModule取得<code>HttpHandler</code></li>
<li><code>MVC</code>是在<code>application.PostResolveRequestCache</code>這個事件決定使用的<code>HttpHandler</code></li>
<li>路由其實是<code>Asp.net MVC</code>呼叫的關鍵</li>
<li>因為在<code>MapHandlerExecutionStep</code>執行前已經決定<code>context.RemapHandlerInstance</code>所以就不會呼叫到<code>config</code>設定<code>HttpHander</code>物件</li>
</ol>
<p>基本上<code>Asp.net</code>部分已經介紹完了,接下來會進入<code>Asp.net MVC</code>的世界.</p>
<p><strong>此文作者</strong>：Daniel Shih(石頭)<br><strong>此文地址</strong>： <a href="https://isdaniel.github.io/ithelp-day8/">https://isdaniel.github.io/ithelp-day8/</a> <br><strong>版權聲明</strong>：本博客所有文章除特別聲明外，均採用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC90dy8=" title="https://creativecommons.org/licenses/by-nc-sa/3.0/tw/">CC BY-NC-SA 3.0 TW<i class="fa fa-external-link"></i></span> 許可協議。轉載請註明出處！</p>
]]></content>
      <categories>
        <category>11th鐵人賽</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>Asp.net</tag>
        <tag>Asp.net-MVC</tag>
        <tag>SourceCode</tag>
        <tag>11th鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>進入MVC原始碼世界 Route &amp; RouteTable 原始碼解析 (第9天)</title>
    <url>/ithelp-day9/</url>
    <content><![CDATA[<h1 id="Agenda"><a href="#Agenda" class="headerlink" title="Agenda"></a>Agenda<!-- omit in toc --></h1><ul>
<li><a href="#%e5%89%8d%e8%a8%80">前言</a></li>
<li><a href="#%e4%bb%8b%e7%b4%b9route">介紹Route</a><ul>
<li><a href="#routetableroutes">RouteTable.Routes</a></li>
<li><a href="#maproute%e6%93%b4%e5%b1%95%e6%96%b9%e6%b3%95">MapRoute擴展方法</a></li>
<li><a href="#route%e7%89%a9%e4%bb%b6">Route物件</a></li>
<li><a href="#mappageroute-%e6%93%b4%e5%b1%95%e6%96%b9%e6%b3%95">MapPageRoute 擴展方法</a></li>
</ul>
</li>
<li><a href="#%e5%9c%a8-route%e4%b8%ad%e5%bb%ba%e7%ab%8b%e8%99%95%e7%90%86%e5%ae%a2%e8%a3%bd%e5%8c%96httphandler">在 Route中建立處理客製化HttpHandler</a></li>
<li><a href="#%e5%b0%8f%e7%b5%90">小結：</a></li>
</ul>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>現在開始進入Asp.net MVC原始碼世界，我們從路由開始切入一步一步進入MVC核心.</p>
<p>我有做一個可以針對於<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2lzZGFuaWVsL0FzcC5uZXQtTVZDLURlYnVnZXI=" title="https://github.com/isdaniel/Asp.net-MVC-Debuger">Asp.net MVC Debugger<i class="fa fa-external-link"></i></span>的專案，只要下中斷點就可輕易進入Asp.net MVC原始碼.</p>
<p>如下面動畫</p>
<p><img src="https://raw.githubusercontent.com/isdaniel/MyBlog/master/source/images/itHelp/9/Debugger.gif" alt></p>
<h2 id="介紹Route"><a href="#介紹Route" class="headerlink" title="介紹Route"></a>介紹Route</h2><p>每個HTTP請求<code>MVC</code>使用路由的目標是<code>Controller</code>和<code>Action</code>，不像<code>ASP.NET Web Form</code>處理物理文件(<code>.aspx</code>文件)，要執行<code>Controller</code>和<code>Action</code>名稱包含在HTTP請求中，<code>ASP.NET MVC</code>需要通過解析HTTP請求得到正確的<code>Controller</code>和<code>Action</code>的名稱。</p>
<p>使用<code>Route</code>比<strong>處理物理文件</strong>有以下幾個優勢：</p>
<ul>
<li>靈活性：請求<code>URL</code>是對物理文件路徑，意味著如果物理文件的路徑發生了改變（比如改變了文件的目錄結構或者文件名），原來該文件連結將變得無效。</li>
<li>可讀性：在很多情況下，URL不僅僅需要能夠訪問正確的網絡資源，也需要具有很好的可讀性，最好的URL應該讓我們一眼就能看出針對它訪問的目標資源是什麼。請求地址與物理文件緊密綁定讓我們完全失去了定義高可讀性URL的機會。</li>
<li>SEO優化：對於網站開發來說，為了迎合搜索引擎檢索的規則，我們需要對URL進行有效的設計使之能易於被主流的引擎檢索收錄。如果URL完全與物理地址關聯，這失去了SEO優化的能力。</li>
<li>安全性：如接指向文件相對路徑無疑跟大家說你伺服器資料夾的結構，如果被有心人士（黑客）知道就可旁敲側擊攻擊您的伺服器．</li>
</ul>
<h3 id="RouteTable-Routes"><a href="#RouteTable-Routes" class="headerlink" title="RouteTable.Routes"></a>RouteTable.Routes</h3><p>在Global.cs檔案中，有一個<code>RouteTable.Routes</code>是<code>RouteCollection</code>類型的集合物件</p>
<p>我們通過<code>RouteTable</code>靜態屬性<code>Routes</code>得到一個全域的路由表，路由註冊的核心價值在此集合上添加路由設定。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line">RouteConfig.RegisterRoutes(RouteTable.Routes);</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p><code>RouteCollection</code>他是繼承<code>Collection&lt;RouteBase&gt;</code>的集合物件，可以對此集合添加一個繼承<code>RouteBase</code>物件.</p>
</blockquote>
<p>在Mvc一般是透過<code>MapRoute</code>擴展方法來添加路由</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">RegisterRoutes</span>(<span class="params">RouteCollection routes</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    routes.IgnoreRoute(<span class="string">"&#123;resource&#125;.axd/&#123;*pathInfo&#125;"</span>);</span><br><span class="line">    routes.MapRoute(</span><br><span class="line">        name: <span class="string">"Default"</span>,</span><br><span class="line">        url: <span class="string">"&#123;controller&#125;/&#123;action&#125;/&#123;id&#125;"</span>,</span><br><span class="line">        defaults: <span class="keyword">new</span> &#123; controller = <span class="string">"Home"</span>, action = <span class="string">"Index"</span>, id = UrlParameter.Optional &#125;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="MapRoute擴展方法"><a href="#MapRoute擴展方法" class="headerlink" title="MapRoute擴展方法"></a>MapRoute擴展方法</h3><p>看一下<code>MapRoute</code>原始碼，這個方式是基於<code>RouteCollection</code>集合物件做的擴展方法，可看到最重要的部分是新增一個<code>Route</code>物件並加入集合中.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Route <span class="title">MapRoute</span>(<span class="params"><span class="keyword">this</span> RouteCollection routes, <span class="keyword">string</span> name, <span class="keyword">string</span> url, <span class="keyword">object</span> defaults, <span class="keyword">object</span> constraints, <span class="keyword">string</span>[] namespaces</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 判斷...</span></span><br><span class="line">    Route route = <span class="keyword">new</span> Route(url, <span class="keyword">new</span> MvcRouteHandler())</span><br><span class="line">    &#123;</span><br><span class="line">        Defaults = CreateRouteValueDictionaryUncached(defaults),</span><br><span class="line">        Constraints = CreateRouteValueDictionaryUncached(constraints),</span><br><span class="line">        DataTokens = <span class="keyword">new</span> RouteValueDictionary()</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    ConstraintValidation.Validate(route);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((namespaces != <span class="literal">null</span>) &amp;&amp; (namespaces.Length &gt; <span class="number">0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        route.DataTokens[RouteDataTokenKeys.Namespaces] = namespaces;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//加入註冊路由器</span></span><br><span class="line">    routes.Add(name, route);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> route;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="Route物件"><a href="#Route物件" class="headerlink" title="Route物件"></a>Route物件</h3><p><code>Route</code>類別是繼承於<code>RouteBase</code>(這也就是為什麼可以把<code>Route</code>物件加入<code>RouteCollection</code>集合中)</p>
<p>下面我刪減一些此次不會介紹到的程式碼.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Route</span> : <span class="title">RouteBase</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">string</span> HttpMethodParameterName = <span class="string">"httpMethod"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">string</span> _url;</span><br><span class="line">    <span class="keyword">private</span> ParsedRoute _parsedRoute;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span>   使用指定的 URL 模式、預設參數值、條件約束、自訂值和處理常式類別，初始化 <span class="doctag">&lt;see cref="T:System.Web.Routing.Route" /&gt;</span> 類別的新執行個體。</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="url"&gt;</span>路由的 URL 模式。<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="defaults"&gt;</span>URL 未包含所有參數時所要使用的值。<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="constraints"&gt;</span>指定 URL 參數之有效值的規則運算式。<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="dataTokens"&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span>   傳遞給路由處理常式的自訂值，但不會用來判斷路由是否符合特定 URL 模式。</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span>    這些值會傳遞至路由處理常式，以用來處理要求。</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="routeHandler"&gt;</span>處理路由要求的物件。<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Route</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="keyword">string</span> url,</span></span></span><br><span class="line"><span class="function"><span class="params">      RouteValueDictionary defaults,</span></span></span><br><span class="line"><span class="function"><span class="params">      RouteValueDictionary constraints,</span></span></span><br><span class="line"><span class="function"><span class="params">      RouteValueDictionary dataTokens,</span></span></span><br><span class="line"><span class="function"><span class="params">      IRouteHandler routeHandler</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">      <span class="keyword">this</span>.Url = url;</span><br><span class="line">      <span class="keyword">this</span>.Defaults = defaults;</span><br><span class="line">      <span class="keyword">this</span>.Constraints = constraints;</span><br><span class="line">      <span class="keyword">this</span>.DataTokens = dataTokens;</span><br><span class="line">      <span class="keyword">this</span>.RouteHandler = routeHandler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span>取得或設定運算式的字典，這些運算式指定 URL 參數的有效值。<span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> RouteValueDictionary Constraints &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span>取得或設定自訂值，這些自訂值會傳遞給路由處理常式，但不會用來判斷路由是否符合 URL 模式。<span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> RouteValueDictionary DataTokens &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span>取得或設定 URL 未包含所有參數時所要使用的值。<span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> RouteValueDictionary Defaults &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span>取得或設定處理路由要求的物件。<span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> IRouteHandler RouteHandler &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span>取得或設定路由的 URL 模式。<span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Url</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">get</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._url ?? <span class="keyword">string</span>.Empty;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">set</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">this</span>._parsedRoute = RouteParser.Parse(<span class="keyword">value</span>);</span><br><span class="line">        <span class="keyword">this</span>._url = <span class="keyword">value</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span>傳回所要求路由的相關資訊。<span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="httpContext"&gt;</span>封裝 HTTP 要求相關資訊的物件。<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>包含路由定義值的物件。<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> RouteData <span class="title">GetRouteData</span>(<span class="params">HttpContextBase httpContext</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">      RouteValueDictionary values = <span class="keyword">this</span>._parsedRoute.Match(httpContext.Request.AppRelativeCurrentExecutionFilePath.Substring(<span class="number">2</span>) + httpContext.Request.PathInfo, <span class="keyword">this</span>.Defaults);</span><br><span class="line">      <span class="keyword">if</span> (values == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> (RouteData) <span class="literal">null</span>;</span><br><span class="line">      RouteData routeData = <span class="keyword">new</span> RouteData((RouteBase) <span class="keyword">this</span>, <span class="keyword">this</span>.RouteHandler);</span><br><span class="line">      <span class="keyword">if</span> (!<span class="keyword">this</span>.ProcessConstraints(httpContext, values, RouteDirection.IncomingRequest))</span><br><span class="line">        <span class="keyword">return</span> (RouteData) <span class="literal">null</span>;</span><br><span class="line">      <span class="keyword">foreach</span> (KeyValuePair&lt;<span class="keyword">string</span>, <span class="keyword">object</span>&gt; keyValuePair <span class="keyword">in</span> values)</span><br><span class="line">        routeData.Values.Add(keyValuePair.Key, keyValuePair.Value);</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.DataTokens != <span class="literal">null</span>)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">foreach</span> (KeyValuePair&lt;<span class="keyword">string</span>, <span class="keyword">object</span>&gt; dataToken <span class="keyword">in</span> <span class="keyword">this</span>.DataTokens)</span><br><span class="line">          routeData.DataTokens[dataToken.Key] = dataToken.Value;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> routeData;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div>
<p>在<code>Route</code>類別中<code>GetRouteData</code>是個重要方法，藉由我們的路由設定去解析當前是否匹配到路由規則，如果有就回傳一個<code>RouteData</code>物件，否則回傳<code>Null</code></p>
<blockquote>
<p>上一篇有介紹<code>UrlRoutingModule</code>這個<code>HttpModule</code>會藉由<code>RouteCollection.GetRouteData(context)</code>動作取得一個<code>RouteData</code>並透過他拿到<code>IHttpHander</code>物件並給值到<code>HttpContext.Handler</code></p>
<p>在裡面的實做是透過一個<code>foreach</code>去找尋匹配的<code>Route</code>物件，因為<code>ADD</code>路由是有順序性,所以在<code>RegisterRoutes(RouteCollection routes)</code>找尋路由會有第一個<code>MapRoute</code>到最後一個</p>
</blockquote>
<p><code>Url</code>這個屬性的<code>set</code>方法上做一個很有意思的動作，在設定值時除了賦值給<code>_url</code>字段,另外還將 設定template url Parse 取得一個<code>ParsedRoute _parsedRoute</code>物件.</p>
<ul>
<li><code>ParsedRoute</code>將我們注冊的template url用<code>/</code>分割存起來方便日後判斷執行的<code>Action</code>和<code>Contoller</code>.</li>
</ul>
<h3 id="MapPageRoute-擴展方法"><a href="#MapPageRoute-擴展方法" class="headerlink" title="MapPageRoute 擴展方法"></a>MapPageRoute 擴展方法</h3><p>路由除了使用於取得調用<code>Contoller</code>和<code>Action</code>資訊外，我們還可以通過<code>MapPageRoute</code>註冊URL樣板和某種文件的配對關係.</p>
<p>範例在:<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2lzZGFuaWVsL0FzcC5uZXQtTVZDLURlYnVnZXI=" title="https://github.com/isdaniel/Asp.net-MVC-Debuger">Asp.net MVC Debugger<i class="fa fa-external-link"></i></span></p>
<p>本次使用幾個參數</p>
<ol>
<li>路由名稱</li>
<li>樣版URL</li>
<li>指向實體<code>aspx</code>檔案路徑</li>
<li>此路由是否找尋實體路徑</li>
<li>樣版URL預設參數</li>
</ol>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line">routes.MapPageRoute(</span><br><span class="line">    <span class="string">"PhysicalFile"</span>,</span><br><span class="line">    <span class="string">"GetFile/&#123;Name&#125;"</span>,</span><br><span class="line">    <span class="string">"~/PhysicalFile.aspx"</span>, <span class="literal">true</span>,</span><br><span class="line">    <span class="keyword">new</span> RouteValueDictionary()</span><br><span class="line">    &#123;</span><br><span class="line">        &#123; <span class="string">"Name"</span>,<span class="string">"PhysicalFile"</span>&#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></div>
<p>下圖是我們專案建立一個新的<code>.aspx</code>檔案</p>
<p><img src="https://raw.githubusercontent.com/isdaniel/MyBlog/master/source/images/itHelp/9/MapPageRoute.PNG" alt></p>
<p>裡面內容很簡單只是印出一段文字</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line">Hello PhysicalFile.aspx</span><br></pre></td></tr></table></figure></div>
<p>因為有加入<code>MapPageRoute</code>路由,在瀏覽器網址列輸入<code>http:localhost:[your port]/GetFile</code>，我們就可以將<code>PhysicalFile.aspx</code>檔案內容顯示出來.</p>
<p><img src="https://raw.githubusercontent.com/isdaniel/MyBlog/master/source/images/itHelp/9/PhysicalFileAction.gif" alt></p>
<h2 id="在-Route中建立處理客製化HttpHandler"><a href="#在-Route中建立處理客製化HttpHandler" class="headerlink" title="在 Route中建立處理客製化HttpHandler"></a>在 Route中建立處理客製化HttpHandler</h2><p>在<code>Route</code>建構子中我們可以設定實現<code>IRouteHandler</code>物件,這個物件會有個方法可以返回<code>IHttpHandler</code>給<code>asp.net</code>請求使用.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyHandler</span> : <span class="title">IHttpHandler</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">bool</span> IsReusable</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ProcessRequest</span>(<span class="params">HttpContext context</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">      </span><br><span class="line">        context.Response.Write(<span class="string">"Hello MyHandler!!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyHandlerRouter</span> : <span class="title">IRouteHandler</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IHttpHandler <span class="title">GetHttpHandler</span>(<span class="params">RequestContext requestContext</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyHandler();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>我們可以建立<code>MyHandlerRouter</code>在<code>GetHttpHandler</code>返回一個<code>MyHandler</code>物件,之後把<code>MyHandlerRouter</code>當作參數傳入<code>Route</code>物件中</p>
<p>把<code>Route</code>加入全域路由集合中</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line">routes.Add(<span class="keyword">new</span> Route(<span class="string">"Customer"</span>,<span class="keyword">new</span> MyHandlerRouter()));</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>在瀏覽器輸入 <code>http://localhost:[your port]/Customer</code> 我們就會執行我們自己客製化的<code>HttpHandler</code></p>
</blockquote>
<h2 id="小結："><a href="#小結：" class="headerlink" title="小結："></a>小結：</h2><p>路由封裝了Http請求路徑資訊可以讓我們找到相對應的<code>Action</code>和<code>Controller</code>並呼叫執行外，可以透過<code>MapPageRoute</code>來將請求教給<code>.aspx</code>實體檔案來處理請求.</p>
<p><code>Route</code>甚至可以讓我們自己客製化處理<code>HttpHandler</code> 如 <a href="#%E5%9C%A8-Route%E4%B8%AD%E5%BB%BA%E7%AB%8B%E8%99%95%E7%90%86%E5%AE%A2%E8%A3%BD%E5%8C%96HttpHandler">在 Route中建立處理客製化HttpHandler</a>可謂很有彈性</p>
<p>下篇介紹<code>Route</code>物件建立<code>MvcRouteHandler</code>物件如何取到<code>IHttpHandler</code>.</p>
<p><strong>此文作者</strong>：Daniel Shih(石頭)<br><strong>此文地址</strong>： <a href="https://isdaniel.github.io/ithelp-day9/">https://isdaniel.github.io/ithelp-day9/</a> <br><strong>版權聲明</strong>：本博客所有文章除特別聲明外，均採用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC90dy8=" title="https://creativecommons.org/licenses/by-nc-sa/3.0/tw/">CC BY-NC-SA 3.0 TW<i class="fa fa-external-link"></i></span> 許可協議。轉載請註明出處！</p>
]]></content>
      <categories>
        <category>11th鐵人賽</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>Asp.net</tag>
        <tag>Asp.net-MVC</tag>
        <tag>SourceCode</tag>
        <tag>11th鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>JOIN範圍條件Index優化</title>
    <url>/join-index-improve/</url>
    <content><![CDATA[<h2 id="前文"><a href="#前文" class="headerlink" title="前文"></a>前文</h2><p><code>JOIN</code>條件範圍時,執行計畫<strong>預估值</strong>容易不準確,這也間接導致查詢效能不好.</p>
<blockquote>
<p>就算有建立Index也會遇到上述問題</p>
</blockquote>
<p>假如我們想要提升<code>JOIN</code>條件範圍效能並讓Index可以發揮最大最用可以怎麼做?</p>
<p>就讓我利用一個範例來跟大家分享.</p>
<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>此範例有使用到三張表</p>
<ul>
<li>Product表:擁有1-10編號產品</li>
<li>ReportPeriod表:存放產每期報表的資訊(時間,和是否產報表)</li>
<li>T99表:線上產品訂單資訊</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [dbo].[Product](</span><br><span class="line">	[ProductId] <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [dbo].[T99](</span><br><span class="line">	[TransactionId] [<span class="built_in">int</span>] <span class="keyword">IDENTITY</span>(<span class="number">1</span>,<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">	[Amount] <span class="built_in">DECIMAL</span>(<span class="number">18</span>,<span class="number">6</span>),</span><br><span class="line">	[CreateDate] [datetime2](<span class="number">3</span>) <span class="literal">NULL</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [dbo].[ReportPeriod](</span><br><span class="line">	[PerioidID] [<span class="built_in">int</span>] <span class="keyword">IDENTITY</span>(<span class="number">1</span>,<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">	[ProductId] <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">	[IsGenerate] [<span class="built_in">bit</span>] <span class="literal">NULL</span>,</span><br><span class="line">	[StartDate] [datetime2](<span class="number">3</span>) <span class="literal">NULL</span>,</span><br><span class="line">	[EndDate] [datetime2](<span class="number">3</span>) <span class="literal">NULL</span></span><br><span class="line">) <span class="keyword">ON</span> [PRIMARY]</span><br><span class="line"><span class="keyword">GO</span></span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>我們利用<code>T99.CreateDate</code>來跟<code>ReportPeriod</code>判斷是屬於哪期報表.</p>
</blockquote>
<h3 id="資料初始化"><a href="#資料初始化" class="headerlink" title="資料初始化"></a>資料初始化</h3><p>我們利用亂數產生Sample資料來模擬線上大資料狀況.</p>
<p><code>ReportPeriod</code>期別由<code>&#39;2019-08-01&#39;</code>到<code>&#39;2020-07-31&#39;</code></p>
<p>因為產生報表以5分鐘為區間,所以可以利用CTE遞迴來幫我們產生資料.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> [dbo].[Product] <span class="keyword">VALUES</span> (<span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> [dbo].[Product] <span class="keyword">VALUES</span> (<span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> [dbo].[Product] <span class="keyword">VALUES</span> (<span class="number">3</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> [dbo].[Product] <span class="keyword">VALUES</span> (<span class="number">4</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> [dbo].[Product] <span class="keyword">VALUES</span> (<span class="number">5</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> [dbo].[Product] <span class="keyword">VALUES</span> (<span class="number">6</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> [dbo].[Product] <span class="keyword">VALUES</span> (<span class="number">7</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> [dbo].[Product] <span class="keyword">VALUES</span> (<span class="number">8</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> [dbo].[Product] <span class="keyword">VALUES</span> (<span class="number">9</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> [dbo].[Product] <span class="keyword">VALUES</span> (<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> @FromDate DATETIME2(<span class="number">3</span>) = <span class="string">'2019-08-01'</span></span><br><span class="line"><span class="keyword">declare</span> @ToDate DATETIME2(<span class="number">3</span>) = <span class="string">'2020-07-31'</span></span><br><span class="line"></span><br><span class="line">;<span class="keyword">WITH</span> CTE <span class="keyword">AS</span> (</span><br><span class="line">	<span class="keyword">SELECT</span> @FromDate fromDt,@ToDate endDt</span><br><span class="line">	<span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line">	<span class="keyword">SELECT</span> <span class="keyword">DATEADD</span>(<span class="keyword">MINUTE</span>,<span class="number">5</span>,fromDt),endDt</span><br><span class="line">	<span class="keyword">FROM</span> CTE </span><br><span class="line">	<span class="keyword">WHERE</span> <span class="keyword">DATEADD</span>(<span class="keyword">MINUTE</span>,<span class="number">5</span>,fromDt) &lt; endDt</span><br><span class="line">)</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span>  [dbo].[ReportPeriod] ([ProductId],[IsGenerate],[StartDate],[EndDate])</span><br><span class="line"><span class="keyword">SELECT</span> ProductId,<span class="number">0</span>,fromDt,<span class="keyword">DATEADD</span>(<span class="keyword">MINUTE</span>,<span class="number">5</span>,fromDt) </span><br><span class="line"><span class="keyword">FROM</span> CTE <span class="keyword">CROSS</span> <span class="keyword">JOIN</span> dbo.Product</span><br><span class="line"><span class="keyword">OPTION</span> (MAXRECURSION <span class="number">0</span>); </span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> T99 ([CreateDate],Amount)</span><br><span class="line"><span class="keyword">SELECT</span> top <span class="number">1000000</span> <span class="keyword">dateadd</span>(<span class="keyword">SECOND</span>, </span><br><span class="line">          <span class="keyword">rand</span>(<span class="keyword">checksum</span>(newid()))*(<span class="number">1</span>+<span class="keyword">datediff</span>(<span class="keyword">SECOND</span>, @FromDate, @ToDate)), </span><br><span class="line">               @FromDate),</span><br><span class="line">	   <span class="keyword">CAST</span>(<span class="keyword">RAND</span>(<span class="keyword">CHECKSUM</span>(NEWID())) * <span class="number">100000</span> <span class="keyword">as</span> <span class="built_in">INT</span>) + <span class="number">1</span></span><br><span class="line"><span class="keyword">FROM</span> sys.all_columns c1 <span class="keyword">CROSS</span> <span class="keyword">JOIN</span> sys.all_columns c2</span><br></pre></td></tr></table></figure></div>
<h3 id="建立Index"><a href="#建立Index" class="headerlink" title="建立Index"></a>建立Index</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> CLUSTERED <span class="keyword">INDEX</span> [CIX_ReportPeriod_StartDate] <span class="keyword">ON</span> [dbo].[ReportPeriod]</span><br><span class="line">(</span><br><span class="line">	[StartDate] <span class="keyword">ASC</span>,</span><br><span class="line">    [EndDate] <span class="keyword">ASC</span></span><br><span class="line">)<span class="keyword">WITH</span> (PAD_INDEX = <span class="keyword">OFF</span>, STATISTICS_NORECOMPUTE = <span class="keyword">OFF</span>, SORT_IN_TEMPDB = <span class="keyword">OFF</span>, DROP_EXISTING = <span class="keyword">OFF</span>, <span class="keyword">ONLINE</span> = <span class="keyword">OFF</span>, ALLOW_ROW_LOCKS = <span class="keyword">ON</span>, ALLOW_PAGE_LOCKS = <span class="keyword">ON</span>) <span class="keyword">ON</span> [PRIMARY]</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> [dbo].[ReportPeriod] <span class="keyword">ADD</span>  <span class="keyword">CONSTRAINT</span> [PK_ReportPeriod] PRIMARY <span class="keyword">KEY</span> NONCLUSTERED </span><br><span class="line">(</span><br><span class="line">	[PerioidID] <span class="keyword">ASC</span>,</span><br><span class="line">	[ProductId] <span class="keyword">ASC</span></span><br><span class="line">)<span class="keyword">WITH</span> (PAD_INDEX = <span class="keyword">OFF</span>, STATISTICS_NORECOMPUTE = <span class="keyword">OFF</span>, SORT_IN_TEMPDB = <span class="keyword">OFF</span>, IGNORE_DUP_KEY = <span class="keyword">OFF</span>, <span class="keyword">ONLINE</span> = <span class="keyword">OFF</span>, ALLOW_ROW_LOCKS = <span class="keyword">ON</span>, ALLOW_PAGE_LOCKS = <span class="keyword">ON</span>) <span class="keyword">ON</span> [PRIMARY]</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> CLUSTERED <span class="keyword">INDEX</span> [CIX_T99_CreateDate] <span class="keyword">ON</span> [dbo].[T99]</span><br><span class="line">(</span><br><span class="line">	[CreateDate] <span class="keyword">ASC</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> NONCLUSTERED <span class="keyword">INDEX</span> [IX_T99_TransactionId] <span class="keyword">ON</span> [dbo].[T99]</span><br><span class="line">(</span><br><span class="line">	[TransactionId] <span class="keyword">ASC</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></div>
<h3 id="查詢語法"><a href="#查詢語法" class="headerlink" title="查詢語法"></a>查詢語法</h3><p>在線上我們會使用UDT當作參數來取得某些期別資訊.</p>
<p>這裡為了方便模擬我使用Table Variable來取代.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> nocount <span class="keyword">on</span></span><br><span class="line"><span class="keyword">DECLARE</span> @<span class="keyword">Transaction</span> <span class="keyword">AS</span> <span class="keyword">TABLE</span>(</span><br><span class="line">	TransactionId <span class="built_in">INT</span>,</span><br><span class="line">	ProductId <span class="built_in">INT</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> @<span class="keyword">Transaction</span> <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> @<span class="keyword">Transaction</span> <span class="keyword">VALUES</span> (<span class="number">101</span>,<span class="number">2</span>)</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> @<span class="keyword">Transaction</span> <span class="keyword">VALUES</span> (<span class="number">1001</span>,<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> p.*</span><br><span class="line"><span class="keyword">FROM</span> dbo.T99 t </span><br><span class="line"><span class="keyword">JOIN</span> [dbo].[ReportPeriod] p <span class="keyword">ON</span> t.CreateDate <span class="keyword">BETWEEN</span> p.StartDate <span class="keyword">AND</span> p.EndDate</span><br><span class="line"><span class="keyword">JOIN</span> @<span class="keyword">Transaction</span> t1 <span class="keyword">ON</span> t.TransactionId = t1.TransactionId <span class="keyword">AND</span>  p.ProductId = t1.ProductId</span><br></pre></td></tr></table></figure></div>
<p>使用上面語法我們只需查詢三個期別資料,但看執行計畫時能發現，ReportPeriod使用的Clustered預估資訊有1百多萬筆</p>
<p>Q:我明明有對於條件建立Index，但為什麼預估值卻會跑真那麼嚴重？</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> CLUSTERED <span class="keyword">INDEX</span> [CIX_ReportPeriod_StartDate] <span class="keyword">ON</span> [dbo].[ReportPeriod]</span><br><span class="line">(</span><br><span class="line">	[StartDate] <span class="keyword">ASC</span>,</span><br><span class="line">    [EndDate] <span class="keyword">ASC</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></div>
<p><img src="https://i.imgur.com/QGNtlUr.png" alt></p>
<blockquote>
<p>原因出在範圍條件會因為查找範圍過大導致預估值不準確</p>
</blockquote>
<p>甚麼意思? 讓我們看看下圖(代表<code>ReportPeriod</code>內含日期資料)</p>
<p><img src="https://i.imgur.com/3Z2dy2E.png" alt></p>
<p>而我們在<code>JOIN</code>條件只有<code>t.CreateDate BETWEEN p.StartDate AND p.EndDate</code>這就會導致,我們需要查找<code>ReportPeriod</code>日期資料在挑出符合的資料</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">JOIN [dbo].[ReportPeriod] p ON t.CreateDate BETWEEN p.StartDate AND p.EndDate</span><br><span class="line">JOIN @Transaction t1 ON t.TransactionId = t1.TransactionId AND  p.ProductId = t1.ProductId</span><br></pre></td></tr></table></figure></div>
<p>最後就會看到走針的估計值</p>
<p><img src="https://i.imgur.com/QGNtlUr.png" alt></p>
<h3 id="如何優化"><a href="#如何優化" class="headerlink" title="如何優化?"></a>如何優化?</h3><blockquote>
<p>效能差問題,選擇對Index和撰寫合理的查詢可以改善40%左右問題</p>
</blockquote>
<p>我們思考一下如果可以把範圍條件改成精準<code>=</code>查找條件不就可以更精準預估資訊了?</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">t.CreateDate BETWEEN p.StartDate AND p.EndDate</span><br></pre></td></tr></table></figure></div>
<p>那我們怎麼把上面條件使用<code>=</code>取代<code>BETWEEN</code>範圍查詢呢?</p>
<blockquote>
<p>這時我們可以利用空間來換取時間</p>
</blockquote>
<p>建立一個新的<code>COLUMN</code>運用算法來計算每個期數<code>StartTime</code></p>
<p>例如:<code>CreateDate = 2020/01/03 10:08:55</code>會歸類在<code>2020/01/03 10:05:00</code>中</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> dbo.T99 <span class="keyword">ADD</span> PeriodDate <span class="keyword">AS</span> <span class="keyword">DATEADD</span>(<span class="keyword">MINUTE</span>,<span class="keyword">DATEPART</span>(<span class="keyword">MINUTE</span>,CreateDate) %<span class="number">5</span> * <span class="number">-1</span>,</span><br><span class="line">	DATETIMEFROMPARTS(</span><br><span class="line">	<span class="keyword">DATEPART</span>(<span class="keyword">YEAR</span>,CreateDate),</span><br><span class="line">	<span class="keyword">DATEPART</span>(<span class="keyword">MONTH</span>,CreateDate),</span><br><span class="line">	<span class="keyword">DATEPART</span>(<span class="keyword">DAY</span>,CreateDate),</span><br><span class="line">	<span class="keyword">DATEPART</span>(<span class="keyword">HOUR</span>,CreateDate),</span><br><span class="line">	<span class="keyword">DATEPART</span>(<span class="keyword">MINUTE</span>,CreateDate),<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></div>
<p>建立完新<code>COLUMN</code>後別忘記加入一個<code>Index</code>給此<code>COLUMN</code>.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> IX_PeriodDate_T99 <span class="keyword">ON</span> dbo.T99(</span><br><span class="line">	PeriodDate</span><br><span class="line">)</span><br></pre></td></tr></table></figure></div>
<p>最後我們修改一下查詢語法</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> p.*</span><br><span class="line"><span class="keyword">FROM</span> dbo.T99 t </span><br><span class="line"><span class="keyword">JOIN</span> [dbo].[ReportPeriod] p <span class="keyword">ON</span> p.StartDate = t.PeriodDate</span><br><span class="line"><span class="keyword">JOIN</span> @<span class="keyword">Transaction</span> t1 <span class="keyword">ON</span> t.TransactionId = t1.TransactionId <span class="keyword">AND</span>  p.ProductId = t1.ProductId</span><br></pre></td></tr></table></figure></div>
<p><img src="https://i.imgur.com/ZPsyQgH.png" alt></p>
<p>預估值和讀取值已經可以大幅降低了!!</p>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結:"></a>小結:</h2><p>在<code>JOIN</code>範圍條件差效能問題,可以思考一下是否有辦法利用算法或是公式來優化查詢效能，如此次範例一樣.</p>
<p><strong>此文作者</strong>：Daniel Shih(石頭)<br><strong>此文地址</strong>： <a href="https://isdaniel.github.io/join-index-improve/">https://isdaniel.github.io/join-index-improve/</a> <br><strong>版權聲明</strong>：本博客所有文章除特別聲明外，均採用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC90dy8=" title="https://creativecommons.org/licenses/by-nc-sa/3.0/tw/">CC BY-NC-SA 3.0 TW<i class="fa fa-external-link"></i></span> 許可協議。轉載請註明出處！</p>
]]></content>
      <categories>
        <category>DataBase</category>
        <category>Turning</category>
      </categories>
      <tags>
        <tag>DataBase</tag>
        <tag>Turning</tag>
        <tag>sql-server</tag>
        <tag>Index</tag>
      </tags>
  </entry>
  <entry>
    <title>JsonConvert.SerializeObject 呼叫 object.Equals 問題探討</title>
    <url>/jsonconvert-serializeobject/</url>
    <content><![CDATA[<p>最近在 StackOverFlow 解答一個很有趣的問題<span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNTE2NjkwNzIvanNvbi1uZXQtbmV3dG9uc29mdC11c2luZy1qc29uY29udmVydC1zZXJpYWxpemVvYmplY3QtcmVzdWx0cy1pbi13ZWlyZC1lcXVhbC81MTY3MDY0MSM1MTY3MDY0MQ==" title="https://stackoverflow.com/questions/51669072/json-net-newtonsoft-using-jsonconvert-serializeobject-results-in-weird-equal/51670641#51670641">Json.Net / Newtonsoft: Using JsonConvert.SerializeObject results in weird .Equals calls - why?<i class="fa fa-external-link"></i></span></p>
<h2 id="問題簡述是："><a href="#問題簡述是：" class="headerlink" title="問題簡述是："></a>問題簡述是：</h2><p>使用<code>Newtonsoft.Json.JsonConvert.SerializeObject</code>方法 來把物件轉成<code>JSON</code>資料時,為什麼會呼叫物件的<code>Equals</code> 方法 且傳入的<code>object obj</code>類型不是此類別類型,而是屬性的類型</p>
<p>以下是發問者提供的程式碼:</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">JsonTestClass</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> List&lt;<span class="keyword">int</span>&gt; MyIntList &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">bool</span> <span class="title">Equals</span>(<span class="params"><span class="keyword">object</span> obj</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (obj == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        JsonTestClass jtc = (JsonTestClass)obj;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">JsonTestClass c = <span class="keyword">new</span> JsonTestClass();</span><br><span class="line">c.Name = <span class="string">"test"</span>;</span><br><span class="line">c.MyIntList = <span class="keyword">new</span> List&lt;<span class="keyword">int</span>&gt;();</span><br><span class="line">c.MyIntList.Add(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">string</span> json = JsonConvert.SerializeObject(c, <span class="keyword">new</span> JsonSerializerSettings() &#123; TypeNameHandling = TypeNameHandling.All &#125;);</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="問題解析："><a href="#問題解析：" class="headerlink" title="問題解析："></a>問題解析：</h2><p>看到問題後我就直接去看<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0phbWVzTksvTmV3dG9uc29mdC5Kc29u" title="https://github.com/JamesNK/Newtonsoft.Json">Json.net原始碼<i class="fa fa-external-link"></i></span> 一探到底原因出在哪邊.</p>
<p>後面發現當我們在呼叫<code>JsonConvert.SerializeObject</code>方法,會執行一個 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0phbWVzTksvTmV3dG9uc29mdC5Kc29uL2Jsb2IvYzkwZTZlODcxYWUzOWNkNDY4NmRhYzZmYTY0YTc4MGU1MjcxMjNhOC9TcmMvTmV3dG9uc29mdC5Kc29uL1NlcmlhbGl6YXRpb24vSnNvblNlcmlhbGl6ZXJJbnRlcm5hbFdyaXRlci5jcw==" title="https://github.com/JamesNK/Newtonsoft.Json/blob/c90e6e871ae39cd4686dac6fa64a780e527123a8/Src/Newtonsoft.Json/Serialization/JsonSerializerInternalWriter.cs">private bool CheckForCircularReference<i class="fa fa-external-link"></i></span>私有方法.</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> exists = (Serializer._equalityComparer != <span class="literal">null</span>)</span><br><span class="line">                ? _serializeStack.Contains(<span class="keyword">value</span>, Serializer._equalityComparer)</span><br><span class="line">                : _serializeStack.Contains(<span class="keyword">value</span>);</span><br></pre></td></tr></table></figure>
<p>###　重點：</p>
<p>這個方法主要用意是<strong>判斷目前序列化JSON物件是否有重複引用本身</strong>,方法中有段程式碼使用到 <code>List&lt;T&gt;.Contains</code>.</p>
<p>當我們在呼叫<code>List&lt;T&gt;.Contains</code>時 預設<code>EqualityComparer&lt;T&gt;.Default</code> 進行比較來進行判斷是否存在集合中.</p>
<p>要寫客製化比較方式有兩種</p>
<ol>
<li>在.net中每個類別都繼承於<code>Object</code>, <code>Object</code> 中有<code>object.Equals</code> 所以可以重寫<code>object.Equals</code>方法.</li>
<li>將此類別實現 <code>IEquatable&lt;T&gt;</code> 並重寫你要的比較方式.</li>
</ol>
<p>所以會呼叫<code>object.Equals</code>是因為上段程式碼</p>
<hr>
<h2 id="補充說明："><a href="#補充說明：" class="headerlink" title="補充說明："></a>補充說明：</h2><p>什麼是<strong>判斷目前序列化JSON物件是否有重複引用本身</strong>?</p>
<p>以下的範例是<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0phbWVzTksvTmV3dG9uc29mdC5Kc29uL2Jsb2IvYzkwZTZlODcxYWUzOWNkNDY4NmRhYzZmYTY0YTc4MGU1MjcxMjNhOC9TcmMvTmV3dG9uc29mdC5Kc29uL1NlcmlhbGl6YXRpb24vSnNvblNlcmlhbGl6ZXJJbnRlcm5hbFdyaXRlci5jcw==" title="https://github.com/JamesNK/Newtonsoft.Json/blob/c90e6e871ae39cd4686dac6fa64a780e527123a8/Src/Newtonsoft.Json/Serialization/JsonSerializerInternalWriter.cs">private bool CheckForCircularReference<i class="fa fa-external-link"></i></span>想要防止的問題</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">JsonTestClass</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> List&lt;<span class="keyword">int</span>&gt; MyIntList &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> JsonTestClass Test&#123;<span class="keyword">get</span>;<span class="keyword">set</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">JsonTestClass c = <span class="keyword">new</span> JsonTestClass();</span><br><span class="line">c.Name = <span class="string">"test"</span>;</span><br><span class="line">c.Test = c;</span><br><span class="line"><span class="keyword">string</span> json = JsonConvert.SerializeObject</span><br><span class="line">               (c, <span class="keyword">new</span> JsonSerializerSettings() &#123; TypeNameHandling = TypeNameHandling.All &#125;);</span><br></pre></td></tr></table></figure>
<p>我們可以看到<code>c.Test = c;</code> 將自己本身付值給 <code>public JsonTestClass Test{get;set;}</code> 這個屬性.</p>
<p>我們執行上面程式碼會得到此錯誤</p>
<blockquote>
<p>Self referencing loop detected for property ‘Test’ with type ‘Program+JsonTestClass’. Path ‘’.</p>
</blockquote>
<p>是因為他要防止重複引用本身導致無限迴圈解析<code>JSON</code>.</p>
<h2 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h2><p><strong>預設</strong>值類型的比較是比較值.<br><strong>預設</strong>參考類別比較的是地址.</p>
<p><strong>此文作者</strong>：Daniel Shih(石頭)<br><strong>此文地址</strong>： <a href="https://isdaniel.github.io/jsonconvert-serializeobject/">https://isdaniel.github.io/jsonconvert-serializeobject/</a> <br><strong>版權聲明</strong>：本博客所有文章除特別聲明外，均採用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC90dy8=" title="https://creativecommons.org/licenses/by-nc-sa/3.0/tw/">CC BY-NC-SA 3.0 TW<i class="fa fa-external-link"></i></span> 許可協議。轉載請註明出處！</p>
]]></content>
      <categories>
        <category>C#</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>Json.net</tag>
      </tags>
  </entry>
  <entry>
    <title>MediatorPattern(中介者模式)</title>
    <url>/mediator-pattern/</url>
    <content><![CDATA[<h2 id="說明"><a href="#說明" class="headerlink" title="說明"></a>說明</h2><p>系統模塊存在很多複雜的耦合問題，很適合使用中介者模式來解耦合</p>
<p>在現實中如果組織有一定規模可能構通如下圖那般複雜</p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/九桃/f718d961-2f8b-46ac-a2f7-b95af802f23a/1549790323_53498.png" alt></p>
<p>如果有一個人或組織負責幫大家協助溝通，就可解決上面複雜問題</p>
<p>這就是我們這次的核心中介者</p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/九桃/f718d961-2f8b-46ac-a2f7-b95af802f23a/1549790493_52417.png" alt></p>
<h3 id="中介者模式有幾個角色"><a href="#中介者模式有幾個角色" class="headerlink" title="中介者模式有幾個角色"></a>中介者模式有幾個角色</h3><ul>
<li>AbstractMediator (抽像中介者)：定義中介者和各個同事者之間的通信的介面</li>
<li>ConcreteMediator (中介者)：知道每個同事物件，實現抽像中介者，負責協調和各個具體的同事的交互關係</li>
<li>AbstractColleague (抽象同事者)：定義同事者和中介者通信的接口</li>
<li>ConcreteColleague (同事者)：實現自己的業務，並且實現抽象方法，跟中介者進行通信</li>
</ul>
<h3 id="中介者模式特點是"><a href="#中介者模式特點是" class="headerlink" title="中介者模式特點是"></a>中介者模式特點是</h3><ul>
<li>中介者知道所有同事者物件，但同事者互相不知道對方存在需透過中介者傳遞訊息</li>
<li>如何傳遞和通知各個同事者由中介者內部決定</li>
</ul>
<p>在裡面第二點是很重要的目標，把傳遞訊息的邏輯封裝在中介者裡面</p>
<h3 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ProductManager</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> DBAdmin DbAdmin &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> Programer Programer &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">internal</span> <span class="keyword">void</span> <span class="title">Send</span>(<span class="params"><span class="keyword">string</span> message, OriginReqBase req</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">    　　　　　　 <span class="comment">//如果是DBAdmin傳遞訊息由Programer執行,反之</span></span><br><span class="line">            <span class="keyword">if</span> (req.GetType() == <span class="keyword">typeof</span>(DBAdmin))</span><br><span class="line">                Programer.DoProcess(message);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(req.GetType() == <span class="keyword">typeof</span>(Programer))</span><br><span class="line">                DbAdmin.DoProcess(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>傳遞通知或訊息邏輯寫在<code>Send</code>方法裡面.</p>
<p>本次範例依照傳入的型別,如果是<code>DBAdmin</code>傳遞訊息由<code>Programer</code>執行,反之</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">OriginReqBase</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">protected</span> ProductManager _productManager;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">OriginReqBase</span>(<span class="params">ProductManager productManager</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        _productManager = productManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Requirement</span>(<span class="params"><span class="keyword">string</span> message</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        _productManager.Send(message, <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><code>OriginReqBase</code>(抽象同事者) 因為每個角色 (<code>ConcreteColleague</code>) 都需要知道中介者存在，所以把參數設定在建構子上。</p>
<p><code>Requirement</code>方法通知 PM 中介者將資料傳遞出去</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Programer</span> : <span class="title">OriginReqBase</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DoProcess</span>(<span class="params"><span class="keyword">string</span> message</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">$"Programer: <span class="subst">&#123;message&#125;</span>"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Programer</span>(<span class="params">ProductManager productManager</span>) : <span class="title">base</span>(<span class="params">productManager</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DBAdmin</span> : <span class="title">OriginReqBase</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DoProcess</span>(<span class="params"><span class="keyword">string</span> message</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">$"DBA:<span class="subst">&#123;message&#125;</span>"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DBAdmin</span>(<span class="params">ProductManager productManager</span>) : <span class="title">base</span>(<span class="params">productManager</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><code>DoProcess</code> 方法 PM 中介者呼叫使用</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line">ProductManager pm = <span class="keyword">new</span> ProductManager();</span><br><span class="line"></span><br><span class="line">DBAdmin DBA1 = <span class="keyword">new</span> DBAdmin(pm);　<span class="comment">//DBA知道PM存在</span></span><br><span class="line">Programer RD1 = <span class="keyword">new</span> Programer(pm);　<span class="comment">//RD知道PM存在</span></span><br><span class="line"></span><br><span class="line">pm.Programer = RD1; <span class="comment">//PM知道DBA</span></span><br><span class="line">pm.DbAdmin = DBA1;  <span class="comment">//PM知道RD</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//現在DBA和RD只需要傳訊息就可將訊息轉到需要知道的人</span></span><br><span class="line">RD1.Requirement(<span class="string">"DB modify Requestment."</span>);</span><br><span class="line">DBA1.Requirement(<span class="string">"DB Process doing."</span>);</span><br></pre></td></tr></table></figure></div>
<h3 id="有三大重點"><a href="#有三大重點" class="headerlink" title="有三大重點"></a>有三大重點</h3><ol>
<li>DBA和RD(同事者) 知道PM(中介者)存在</li>
<li>PM(中介者)知道DBA和RD(同事者)存在</li>
<li>ㄋDBA和RD不用知道對方存在但卻可以互相傳遞訊息(因為PM已經幫助我們解耦合了)</li>
</ol>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/九桃/f718d961-2f8b-46ac-a2f7-b95af802f23a/1549792143_37531.png" alt></p>
<p>UML圖 (有標示相對應的角色關係)</p>
<p>我看來這個解耦合核心思想跟容器有點像，因為需要做溝通或通知時我們統一只需要轉交給<span style="color:#FFD700;"><strong>中介者</strong></span>會幫助我們處理溝通事宜</p>
<p><strong>此文作者</strong>：Daniel Shih(石頭)<br><strong>此文地址</strong>： <a href="https://isdaniel.github.io/mediator-pattern/">https://isdaniel.github.io/mediator-pattern/</a> <br><strong>版權聲明</strong>：本博客所有文章除特別聲明外，均採用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC90dy8=" title="https://creativecommons.org/licenses/by-nc-sa/3.0/tw/">CC BY-NC-SA 3.0 TW<i class="fa fa-external-link"></i></span> 許可協議。轉載請註明出處！</p>
]]></content>
      <categories>
        <category>C#</category>
        <category>DesignPattern</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>DesignPattern</tag>
        <tag>MediatorPattern</tag>
      </tags>
  </entry>
  <entry>
    <title>沒有Source Code 如何修改程式??</title>
    <url>/modify-sourcecode/</url>
    <content><![CDATA[<p>某些專案因為歷史久遠沒有Source Code,但有個需求需要異動裡面的程式該怎麼辦??</p>
<p>難道只能整個反組譯,查看程式碼翻一份做新的嗎?</p>
<p>不~~其實有辦法直接對於DLL進行修改</p>
<p>只需使用  <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NhaWxyby9SZWZsZXhpbA==" title="https://github.com/sailro/Reflexil">Reflexil<i class="fa fa-external-link"></i></span> 搭配 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2ljc2hhcnBjb2RlL0lMU3B5" title="https://github.com/icsharpcode/ILSpy">ILSpy<i class="fa fa-external-link"></i></span> 或其他支援的反組譯軟體 </p>
<blockquote>
<p>Reflexil 是一個組譯編輯器插件目前支援 Reflector, ILSpy 和 Telerik’s JustDecompile.</p>
</blockquote>
<p>下載連結</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NhaWxyby9SZWZsZXhpbC9yZWxlYXNlcy90YWcvdjIuMg==" title="https://github.com/sailro/Reflexil/releases/tag/v2.2">Reflexil Release 2.2<i class="fa fa-external-link"></i></span> 搭配 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2ljc2hhcnBjb2RlL0lMU3B5L3JlbGVhc2VzL3RhZy92My4yLjA=" title="https://github.com/icsharpcode/ILSpy/releases/tag/v3.2.0">ILSpy version 3.2<i class="fa fa-external-link"></i></span> </p>
<h1 id="前置動作，安裝"><a href="#前置動作，安裝" class="headerlink" title="前置動作，安裝"></a>前置動作，安裝</h1><h2 id="Reflexil-下載"><a href="#Reflexil-下載" class="headerlink" title="Reflexil 下載"></a>Reflexil 下載</h2><p>下載 <code>reflexil.for.ILSpy.2.2.bin.zip</code>，不用下載<code>AIO</code></p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/九桃/68939397-ab27-4f33-9bff-a6e1fe570acb/1545445075_84536.png" alt></p>
<p>作者有說</p>
<blockquote>
<p>ILSpy version 3.2 (ILSpy 4 is not currently compatible with Reflexil, given the use of System.Reflection.Metadata, deprecating Mono.Cecil usage)<br>ILSpy 4 當前版本 ILSpy.2.2 並不支援</p>
</blockquote>
<h2 id="ILSpy-3-2-下載"><a href="#ILSpy-3-2-下載" class="headerlink" title="ILSpy 3.2 下載"></a>ILSpy 3.2 下載</h2><p><img src="https://dotblogsfile.blob.core.windows.net/user/九桃/68939397-ab27-4f33-9bff-a6e1fe570acb/1545445185_3282.png" alt></p>
<p>下載完後就把全部的DLL放在同一個資料夾下,並開啟 <code>ILSpy.exe</code></p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/九桃/68939397-ab27-4f33-9bff-a6e1fe570acb/1545445435_24298.png" alt></p>
<p>按下上方的齒輪UI 就可獲得下方藍色的Reflexil 修改框框.</p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/九桃/68939397-ab27-4f33-9bff-a6e1fe570acb/1545445493_79646.png" alt></p>
<hr>
<h1 id="組件修改"><a href="#組件修改" class="headerlink" title="組件修改"></a>組件修改</h1><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><blockquote>
<p>目前組件 有個ClassA 類別,裡面有一個prop1屬性 型態是string, 我們希望在這新增另一個屬性</p>
</blockquote>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/九桃/68939397-ab27-4f33-9bff-a6e1fe570acb/1545446072_21457.png" alt></p>
<p>使用滑鼠右鍵點擊類別<code>ClassA</code>,我們可以看到很多方式可以注入新的程式碼</p>
<p>在這我們選擇<code>inject property</code>. </p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/九桃/68939397-ab27-4f33-9bff-a6e1fe570acb/1545446266_25885.png" alt></p>
<p>我們需要修改的是</p>
<ul>
<li>Item Name (使用屬性的名稱)</li>
<li>Property Type(使用屬性類別)</li>
<li><img src="https://dotblogsfile.blob.core.windows.net/user/九桃/68939397-ab27-4f33-9bff-a6e1fe570acb/1545446422_66604.png" alt></li>
</ul>
<p>選擇完後按下OK,我們就會發現<code>prop2</code>新屬性會出現在<code>ClassA</code>中.</p>
<blockquote>
<p>新增完後不代表已經將修改儲存!!</p>
</blockquote>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/九桃/68939397-ab27-4f33-9bff-a6e1fe570acb/1545446504_58205.png" alt></p>
<p>我們需要點選組件，之後再按下<code>Save AS</code> 把本次修改儲存</p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/九桃/68939397-ab27-4f33-9bff-a6e1fe570acb/1545446789_43637.png" alt></p>
<p>日後我們就可以使用新的屬性在我們程式中了!!</p>
<h3 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h3><p>此插件還可以新增,插入許多東西時屬非常強大,有興趣的玩家可再自行深入琢磨.</p>
<p><strong>此文作者</strong>：Daniel Shih(石頭)<br><strong>此文地址</strong>： <a href="https://isdaniel.github.io/modify-sourcecode/">https://isdaniel.github.io/modify-sourcecode/</a> <br><strong>版權聲明</strong>：本博客所有文章除特別聲明外，均採用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC90dy8=" title="https://creativecommons.org/licenses/by-nc-sa/3.0/tw/">CC BY-NC-SA 3.0 TW<i class="fa fa-external-link"></i></span> 許可協議。轉載請註明出處！</p>
]]></content>
      <categories>
        <category>C#</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>Reflection</tag>
        <tag>Assembly</tag>
      </tags>
  </entry>
  <entry>
    <title>高併發系統系列-多執行緒中順序 by EventWaitHandle</title>
    <url>/multithread-eventwaithandle/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在多執行緒系統中，Thread的執行和長短是交由OS來幫我處理了</p>
<p>假如有一個面試題目是</p>
<ul>
<li>目前有三個Thread 每個Thread個別負責Print “A”,”B”,”C”</li>
<li><p>要求:利用三個Thread並按照A,B,C順序打印出20次資訊,中間不能錯號</p>
<p>  ex:<br>  A<br>  B<br>  C<br>  A<br>  B<br>  C</p>
</li>
</ul>
<p>程式碼框架如下，在Main函式建立3個Threads分別負責A,B,C字母打印</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Alternate c = <span class="keyword">new</span> Alternate();</span><br><span class="line">        <span class="keyword">var</span> t1 = <span class="keyword">new</span> Thread(c.CallA);</span><br><span class="line">        <span class="keyword">var</span> t2 = <span class="keyword">new</span> Thread(c.CallB);</span><br><span class="line">        <span class="keyword">var</span> t3 = <span class="keyword">new</span> Thread(c.CallC);</span><br><span class="line"></span><br><span class="line">        t1.Start();</span><br><span class="line">        t2.Start();</span><br><span class="line">        t3.Start();</span><br><span class="line"></span><br><span class="line">        t1.Join();</span><br><span class="line">        t2.Join();</span><br><span class="line">        t3.Join();</span><br><span class="line"></span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Alternate</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">CallA</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"A"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">CallB</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"B"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">CallC</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"C"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因為Thread被呼叫順序是由OS跟CPU來決定，目前執行如下圖所以目前打印出來的順序是無序的</p>
<p><img src="https://i.imgur.com/j6mNk2W.png" alt></p>
<p>期望可以打印出如下圖</p>
<p><img src="https://i.imgur.com/9FAhwA3.png" alt></p>
<blockquote>
<p>讓Thread可以有順的執行打印.</p>
</blockquote>
<p>假如是你會怎麼做?</p>
<h2 id="問題分析"><a href="#問題分析" class="headerlink" title="問題分析"></a>問題分析</h2><p>如果要完成上面需求，我們會希望程式如下執行</p>
<ul>
<li>在執行ThreadA時，ThreadB,ThreadC在等待，執行完ThreadA時呼叫ThreadB起來動作</li>
<li>在執行ThreadB時，ThreadC,ThreadA在等待，執行完ThreadB時呼叫ThreadC起來動作</li>
<li>在執行ThreadC時，ThreadB,ThreadA在等待，執行完ThreadC時呼叫ThreadA起來動作</li>
</ul>
<p><img src="https://i.imgur.com/v5OlGWV.png" alt></p>
<p>核心動作:每個瞬間只有一個Thread可以動作，執行完呼叫下一個Thread做事情，自己在進行等待喚醒</p>
<p>如果你有建構多執行緒系統的話，看到上面動作應該就知道本題的核心類別是哪個了吧?</p>
<p>沒錯就是<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vemgtdHcvZG90bmV0L2FwaS9zeXN0ZW0udGhyZWFkaW5nLmV2ZW50d2FpdGhhbmRsZT92aWV3PW5ldC01LjA=" title="https://docs.microsoft.com/zh-tw/dotnet/api/system.threading.eventwaithandle?view=net-5.0">EventWaitHandle<i class="fa fa-external-link"></i></span></p>
<h2 id="EventWaitHandle"><a href="#EventWaitHandle" class="headerlink" title="EventWaitHandle"></a>EventWaitHandle</h2><p>如果要談起<code>AutoResetEvent</code>就不得不提下面兩個類別</p>
<ul>
<li>AutoResetEvent:執行緒同步處理事件會在發出訊號時，釋出<strong>一個等候執行緒</strong>之後就<strong>自動重設</strong></li>
<li>ManualResetEvent:執行緒同步處理事件可以釋出<strong>多個等候執行緒</strong>，收到訊號時<strong>必須手動重設</strong> ，不然其他執行緒會直接放行</li>
</ul>
<p>我用現實生活中例子來解釋<code>AutoResetEvent</code>跟<code>ManualResetEvent</code></p>
<ul>
<li>AutoResetEvent:捷運或火車的閘門一次只能放行一個並在放行完後會馬上關門</li>
<li>ManualResetEvent:大門必須要是手動關閉房門，不然就會一直放行別人通過</li>
</ul>
<p>我先來說說為什麼可以透過<code>EventWaitHandle</code>來解決問題.</p>
<p>一樣我們把要完成的思路先畫出來，假如我們可以在每一個Thread跟Thread之間設定一個閘門(圖中的小框框)，每次呼叫完就把下一關閘門打開叫醒另一個Thread去做事情（在把之前的閘門關起來等待<br>上一位呼叫）</p>
<p><img src="https://i.imgur.com/DUFMMqs.png" alt></p>
<p>例如：</p>
<p>現在ThreadA剛剛執行完(打印出<code>A</code>)接著會去叫醒ThreadB做事情後，ThreadA繼續等待ThreadC做完事情叫他.</p>
<p>上面情境就需要使用<code>AutoResetEvent</code>來當作我們閘門跟叫醒Thread動作.</p>
<h2 id="問題解答"><a href="#問題解答" class="headerlink" title="問題解答"></a>問題解答</h2><p>本次我使用到<code>AutoResetEvent</code>兩個常用的method.</p>
<ul>
<li>WaitOne:Blocking目前Thread，直到目前WaitHandle收到訊號為止。</li>
<li>Set:將事件的狀態設定為未收到信號，讓一個或多個等候執行緒繼續執行。</li>
</ul>
<p>簡單來說<code>AutoResetEvent</code>就是閘門</p>
<p><code>WaitOne</code>幫助我們達成Thread Blocking動作(等待被喚醒),而喚醒交由<code>Set</code>別人呼叫你<code>WaitOne</code>的AutoResetEvent.</p>
<p>按照上面的圖我們會需要使用到三個<code>AutoResetEvent</code>(三個閘門)</p>
<p>另外我們需要知道目前在哪一個閘門，所以有一個Index變數（我們有看到他使用<code>volatile</code>關鍵字）有興趣在自行尋找用處因為不是本次重點我就不說明了.</p>
<p>我們把</p>
<ul>
<li>ThreadA執行當作Index = 1</li>
<li>ThreadB執行當作Index = 2</li>
<li>ThreadC執行當作Index = 3</li>
</ul>
<p>所以在一開始判斷是否是自己要執行Index，如果不是就等待被呼叫.</p>
<p>按照一開始例子我們設定index = 1，所以<code>CallA</code>動作不會被Blocking，就會接續打印出<code>A</code>並看到<code>notifyB.Set();</code>會叫醒<code>ThreadB</code>並且把Index設定成2</p>
<p>因為Index = 2，所以再一次跑迴圈ThreadA就會進行blocking，後面動作以此類推就會出現我們要的答案</p>
<p><img src="https://i.imgur.com/9FAhwA3.png" alt></p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Alternate</span> &#123;</span><br><span class="line"></span><br><span class="line">    AutoResetEvent notifyA = <span class="keyword">new</span> AutoResetEvent(<span class="literal">false</span>);</span><br><span class="line">    AutoResetEvent notifyB = <span class="keyword">new</span> AutoResetEvent(<span class="literal">false</span>);</span><br><span class="line">    AutoResetEvent notifyC = <span class="keyword">new</span> AutoResetEvent(<span class="literal">false</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> index = <span class="number">1</span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">CallA</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (index != <span class="number">1</span>)</span><br><span class="line">				notifyA.WaitOne();</span><br><span class="line"></span><br><span class="line">			Console.WriteLine(<span class="string">"A"</span>);</span><br><span class="line">			index = <span class="number">2</span>;</span><br><span class="line">			notifyB.Set();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">CallB</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (index != <span class="number">2</span>)</span><br><span class="line">				notifyB.WaitOne();</span><br><span class="line"></span><br><span class="line">			Console.WriteLine(<span class="string">"B"</span>);</span><br><span class="line">			index = <span class="number">3</span>;</span><br><span class="line">			notifyC.Set();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">CallC</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (index != <span class="number">3</span>)</span><br><span class="line">				notifyC.WaitOne();</span><br><span class="line"></span><br><span class="line">			Console.WriteLine(<span class="string">"C"</span>);</span><br><span class="line">			Console.WriteLine(<span class="string">"------------------------------"</span>);</span><br><span class="line">			index = <span class="number">1</span>;</span><br><span class="line">			notifyA.Set();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="重購版本"><a href="#重購版本" class="headerlink" title="重購版本"></a>重購版本</h2><p>上面那個本版雖然可以很好的完成需求，程式碼有很多重複的地方且可擴展性不佳.</p>
<p>下面版本是重購後的我們可以在<code>Alternate</code>建構子中撰寫對應列表(每個Thread要被誰喚醒跟做完事情要叫誰)，並給上相對應編號來查找</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Alternate</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title">NotifyMap</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> AutoResetEvent Wait &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; </span><br><span class="line">        <span class="keyword">public</span> AutoResetEvent Notify &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> Dictionary&lt;<span class="keyword">int</span>, NotifyMap&gt; _notifyMapping;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    AutoResetEvent notifyA = <span class="keyword">new</span> AutoResetEvent(<span class="literal">false</span>);</span><br><span class="line">    AutoResetEvent notifyB = <span class="keyword">new</span> AutoResetEvent(<span class="literal">false</span>);</span><br><span class="line">    AutoResetEvent notifyC = <span class="keyword">new</span> AutoResetEvent(<span class="literal">false</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Alternate</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        _notifyMapping = <span class="keyword">new</span> Dictionary&lt;<span class="keyword">int</span>, NotifyMap&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            &#123; <span class="number">1</span>, <span class="keyword">new</span> NotifyMap&#123; Wait = notifyA, Notify = notifyB&#125; &#125;,</span><br><span class="line">            &#123; <span class="number">2</span>, <span class="keyword">new</span> NotifyMap&#123; Wait = notifyB, Notify = notifyC&#125; &#125;,</span><br><span class="line">            &#123; <span class="number">3</span>, <span class="keyword">new</span> NotifyMap&#123; Wait = notifyC, Notify = notifyA&#125; &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Call</span>(<span class="params">CallerInfo caller</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> key = index % _notifyMapping.Count + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">var</span> notifyMap = _notifyMapping[caller.Index];</span><br><span class="line">            <span class="keyword">if</span> (key != caller.Index)</span><br><span class="line">                notifyMap.Wait.WaitOne();</span><br><span class="line">            Console.WriteLine(<span class="string">$"<span class="subst">&#123;caller.Name&#125;</span>"</span>);</span><br><span class="line">            index++;</span><br><span class="line">            notifyMap.Notify.Set();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>經過重購後程式碼就變得簡單許多了.</p>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>在multithread世界中我們要注意細節越來越多，本次介紹的<code>AutoResetEvent</code>可以用運的地方非常多（假如你有多個Thread需要順序執行）</p>
<p>因為Thread的呼叫順序我們不能掌控就必須考這個機制來幫我們完成.</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2lzZGFuaWVsL0Jsb2dTYW1wbGUvdHJlZS9tYXN0ZXIvc3JjL1NhbXBsZXMvRXZlbnRXYWl0SGFuZGxlU2FtcGxl" title="https://github.com/isdaniel/BlogSample/tree/master/src/Samples/EventWaitHandleSample">程式碼<i class="fa fa-external-link"></i></span>我放在有需要可以拿去使用看看</p>
<p><strong>此文作者</strong>：Daniel Shih(石頭)<br><strong>此文地址</strong>： <a href="https://isdaniel.github.io/multithread-eventwaithandle/">https://isdaniel.github.io/multithread-eventwaithandle/</a> <br><strong>版權聲明</strong>：本博客所有文章除特別聲明外，均採用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC90dy8=" title="https://creativecommons.org/licenses/by-nc-sa/3.0/tw/">CC BY-NC-SA 3.0 TW<i class="fa fa-external-link"></i></span> 許可協議。轉載請註明出處！</p>
]]></content>
      <categories>
        <category>C#</category>
        <category>thread</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>thread</tag>
        <tag>concurrent</tag>
      </tags>
  </entry>
  <entry>
    <title>沒有Source Code 如何修改程式??</title>
    <url>/nosourcecode-modifycode/</url>
    <content><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>某些專案因為歷史久遠沒有Source Code,但有個需求需要異動裡面的程式該怎麼辦??</p>
<p>難道只能整個反組譯,查看程式碼翻一份做新的嗎?</p>
<p>不~~其實有辦法直接對於DLL進行修改</p>
<p>只需使用 <strong> <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NhaWxyby9SZWZsZXhpbA==" title="https://github.com/sailro/Reflexil">Reflexil<i class="fa fa-external-link"></i></span> 搭配 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2ljc2hhcnBjb2RlL0lMU3B5" title="https://github.com/icsharpcode/ILSpy">ILSpy<i class="fa fa-external-link"></i></span> 或其他支援的反</strong>組譯​<strong>軟體 </strong></p>
<blockquote>
<p>Reflexil 是一個組譯編輯器插件目前支援 <strong>Reflector</strong>, <strong>ILSpy</strong> 和 <strong>Telerik’s JustDecompile</strong>. </p>
</blockquote>
<p>下載連結</p>
<p><span class="exturl" data-url="aHR0cDovL2dpdGh1Yi5jb20vc2FpbHJvL1JlZmxleGlsL3JlbGVhc2VzL3RhZy92Mi4y" title="http://github.com/sailro/Reflexil/releases/tag/v2.2"><strong itemprop="name">Reflexil **Release 2.2 </strong><i class="fa fa-external-link"></i></span>搭配 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2ljc2hhcnBjb2RlL0lMU3B5L3JlbGVhc2VzL3RhZy92My4yLjA=" title="https://github.com/icsharpcode/ILSpy/releases/tag/v3.2.0">ILSpy version 3.2<i class="fa fa-external-link"></i></span> </p>
<hr>
<h2 id="前置動作，安裝"><a href="#前置動作，安裝" class="headerlink" title="前置動作，安裝"></a>前置動作，安裝</h2><h3 id="Reflexil-下載"><a href="#Reflexil-下載" class="headerlink" title="Reflexil 下載"></a>Reflexil 下載</h3><p>下載 <code>reflexil.for.ILSpy.2.2.bin.zip</code>，不用下載AIO</p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/九桃/68939397-ab27-4f33-9bff-a6e1fe570acb/1545445075_84536.png" alt></p>
<p>作者有說</p>
<ul>
<li><div class="note note--important"><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2ljc2hhcnBjb2RlL0lMU3B5L3JlbGVhc2VzL3RhZy92My4yLjA=" title="https://github.com/icsharpcode/ILSpy/releases/tag/v3.2.0">ILSpy version 3.2<i class="fa fa-external-link"></i></span> (ILSpy 4 is not currently compatible with Reflexil, given the use of System.Reflection.Metadata, deprecating Mono.Cecil usage)</div>

</li>
</ul>
<p><code>ILSpy 4</code>當前版本 <code>ILSpy.2.2</code> 並不支援</p>
<h2 id="ILSpy-3-2-下載"><a href="#ILSpy-3-2-下載" class="headerlink" title="ILSpy 3.2 下載"></a>ILSpy 3.2 下載</h2><p><img src="https://dotblogsfile.blob.core.windows.net/user/九桃/68939397-ab27-4f33-9bff-a6e1fe570acb/1545445185_3282.png" alt></p>
<p>下載完後就把全部的DLL放在同一個資料夾下,並開啟 <code>ILSpy.exe</code></p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/九桃/68939397-ab27-4f33-9bff-a6e1fe570acb/1545445435_24298.png" alt></p>
<p>按下上方的齒輪UI 就可獲得下方藍色的Reflexil 修改框框.</p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/九桃/68939397-ab27-4f33-9bff-a6e1fe570acb/1545445493_79646.png" alt></p>
<hr>
<hr>
<h2 id="組件修改"><a href="#組件修改" class="headerlink" title="組件修改"></a>組件修改</h2><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>目前組件 有個ClassA 類別,裡面有一個prop1屬性 型態是string, 我們希望在這新增另一個屬性</p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/九桃/68939397-ab27-4f33-9bff-a6e1fe570acb/1545446072_21457.png" alt></p>
<p>使用滑鼠右鍵點擊類別<code>ClassA</code>,我們可以看到很多方式可以注入新的程式碼</p>
<p>在這我們選擇<code>inject property</code>. </p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/九桃/68939397-ab27-4f33-9bff-a6e1fe570acb/1545446266_25885.png" alt></p>
<p>我們需要修改的是</p>
<ul>
<li>Item Name (使用屬性的名稱)</li>
<li>Property Type(使用屬性類別)</li>
</ul>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/九桃/68939397-ab27-4f33-9bff-a6e1fe570acb/1545446422_66604.png" alt></p>
<p>選擇完後按下OK,我們就會發現<code>prop2</code>新屬性會出現在<code>ClassA</code>中.</p>
<div class="note note--danger">新增完後不代表已經將修改儲存!!</div>

<p><img src="https://dotblogsfile.blob.core.windows.net/user/九桃/68939397-ab27-4f33-9bff-a6e1fe570acb/1545446504_58205.png" alt></p>
<p>我們需要點選組件，之後再按下<code>Save AS</code> 把本次修改儲存</p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/九桃/68939397-ab27-4f33-9bff-a6e1fe570acb/1545446789_43637.png" alt></p>
<p>日後我們就可以使用新的屬性在我們程式中了!!</p>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>此插件還可以新增,插入許多東西時屬非常強大,有興趣的玩家可再自行深入琢磨.</p>
<p><strong>此文作者</strong>：Daniel Shih(石頭)<br><strong>此文地址</strong>： <a href="https://isdaniel.github.io/nosourcecode-modifycode/">https://isdaniel.github.io/nosourcecode-modifycode/</a> <br><strong>版權聲明</strong>：本博客所有文章除特別聲明外，均採用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC90dy8=" title="https://creativecommons.org/licenses/by-nc-sa/3.0/tw/">CC BY-NC-SA 3.0 TW<i class="fa fa-external-link"></i></span> 許可協議。轉載請註明出處！</p>
]]></content>
      <categories>
        <category>C#</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>Reflection</tag>
        <tag>Decompile</tag>
      </tags>
  </entry>
  <entry>
    <title>Null Object Pattern</title>
    <url>/nullobjectpattern/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h2><p>假如在系統中<code>null</code>散佈在有許多地方且<code>null</code>有相對應的邏輯或行為.這時候就很適合使用<code>NullObject Pattern</code>來解決，已Null Object取代<code>null</code>邏輯.</p>
<h2 id="Null可能引申出來問題"><a href="#Null可能引申出來問題" class="headerlink" title="Null可能引申出來問題"></a>Null可能引申出來問題</h2><p>我們知道在.Net或Java中大部分都是參考類型,而null是參考類型的預設值，我們來看看以下程式.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line">Person p = <span class="literal">null</span>;</span><br><span class="line">Console.WriteLine(p.Age);</span><br></pre></td></tr></table></figure></div>
<p>如果物件<code>p</code>指向<code>null</code>且取得<code>p.Age</code>時就會<code>throw NullReferenceException</code>，所以我們在使用一些參考類型物件前都會先判斷此物件是否為null，在執行後續邏輯.</p>
<p>在系統中某一兩個地方這樣判斷還好，但如果一直重複這樣的判斷會造成程式碼不必要的膨脹….</p>
<p>相較於「不帶有null邏輯」的程式碼，面對null邏輯往往需要花費更多心力.</p>
<h2 id="範例程式"><a href="#範例程式" class="headerlink" title="範例程式"></a>範例程式</h2><p>下面有段程式碼在<code>calculate</code>方法中會判斷<code>CartModel</code>物件是否為null並執行相對應邏輯</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PaymentServiceNormal</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">decimal</span> <span class="title">calculate</span>(<span class="params">CartModel model</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">decimal</span> result = <span class="number">0</span>m;</span><br><span class="line">        <span class="keyword">if</span> (model == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">        result = model.Items.Sum(x =&gt; x.Price);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (result &gt; <span class="number">400</span>m)</span><br><span class="line">            result *= <span class="number">0.8</span>m;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>我們可以將<code>calculate</code>方法提取出一個介面並對於null部份提取成一個類別實現此介面</p>
<p>能看到<code>NullPayment</code>這個類別已經被賦予相對應動作操作.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IPaymentService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">decimal</span> <span class="title">calculate</span>(<span class="params">CartModel model</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PaymentService</span> : <span class="title">IPaymentService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">decimal</span> <span class="title">calculate</span>(<span class="params">CartModel model</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">decimal</span> result = model.Items.Sum(x =&gt; x.Price);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (result &gt; <span class="number">400</span>m)</span><br><span class="line">            result *= <span class="number">0.8</span>m;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">NullPayment</span> : <span class="title">IPaymentService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">decimal</span> <span class="title">calculate</span>(<span class="params">CartModel model</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>m;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>在使用時我們就可統一判斷是否為null來給予相對應物件</p>
<blockquote>
<p>這邊有點像是策略者模式(<code>Strategy pattern</code>)，判斷要使用哪個邏輯，邏輯統一封裝到類別中.</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        CartModel model = <span class="literal">null</span>;</span><br><span class="line">        Console.WriteLine(Calculate(model));</span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">decimal</span> <span class="title">Calculate</span>(<span class="params">CartModel model</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">var</span> paymentService = model == <span class="literal">null</span></span><br><span class="line">            ? (IPaymentService)</span><br><span class="line">            <span class="keyword">new</span> NullPayment()</span><br><span class="line">            : <span class="keyword">new</span> PaymentService();</span><br><span class="line">        <span class="keyword">return</span> paymentService.calculate(model);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="NullObject-Pattern缺點"><a href="#NullObject-Pattern缺點" class="headerlink" title="NullObject Pattern缺點:"></a>NullObject Pattern缺點:</h2><p>如果團隊工程師不知道目前程式碼已經存在NullObject實作，會寫出多餘的null測試.<br>如果目前系統只是需要少量對於null做判斷，這時導入NullObject會導致程式碼變得複雜.</p>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結:"></a>小結:</h2><p>假如系統中有許多地方需要判斷null並處理相對應的動作就很適合使用<code>NullObject</code> Pattern，但如果判斷null地方不是很多還是判斷就好了</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2lzZGFuaWVsL0Rlc2lnblBhdHRlcm4vdHJlZS9tYXN0ZXIvRGVzaWduUGF0dGVybi9OdWxsT2JqZWN0UGF0dGVybg==" title="https://github.com/isdaniel/DesignPattern/tree/master/DesignPattern/NullObjectPattern">程式碼範例<i class="fa fa-external-link"></i></span></p>
<p><strong>此文作者</strong>：Daniel Shih(石頭)<br><strong>此文地址</strong>： <a href="https://isdaniel.github.io/nullobjectpattern/">https://isdaniel.github.io/nullobjectpattern/</a> <br><strong>版權聲明</strong>：本博客所有文章除特別聲明外，均採用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC90dy8=" title="https://creativecommons.org/licenses/by-nc-sa/3.0/tw/">CC BY-NC-SA 3.0 TW<i class="fa fa-external-link"></i></span> 許可協議。轉載請註明出處！</p>
]]></content>
      <categories>
        <category>C#</category>
        <category>DesignPattern</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>DesignPattern</tag>
        <tag>NullObjectPattern</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle [CONNECT BY]</title>
    <url>/oracle-connect-by/</url>
    <content><![CDATA[<p>之前有介紹  在<code>Oracle</code> 有提供一個精簡的語法產生階層資料 <code>CONNECT BY</code></p>
<p> CONNECT BY 有幾個常用Key Word.</p>
<ol>
<li><code>LEVEL</code>目前在樹節點第幾階層</li>
<li><code>START WITH</code> 設定哪筆做為起始點開始樹</li>
<li><code>PRIOR</code>用於指定父資料欄位</li>
</ol>
<p>製造出的階層樹，概念如下</p>
<p><img src="https://docs.oracle.com/cd/B19306_01/server.102/b14200/img/sqlrf002.gif" alt>[圖來自Oracle]</p>
<h2 id="範例一"><a href="#範例一" class="headerlink" title="範例一"></a>範例一</h2><div class="note note--normal">建立連續數字 1~10</div>

<pre><code>&lt;code class=&quot;language-sql&quot;&gt;SELECT X + LEVEL
FROM (
  SELECT 0 X 
  FROM DUAL
 )
CONNECT BY LEVEL &lt;= 10
</code></pre><p>此範例使用 <code>LEVEL</code> 在 <code>CONNECT BY</code> 上當條件 建立列值到<code>LEVEL</code> 大於等於 10</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9yZXh0ZXN0ZXIuY29tL1dMSkEyODA2OA==" title="https://rextester.com/WLJA28068">sqlfiddle<i class="fa fa-external-link"></i></span></p>
<h2 id="範例二"><a href="#範例二" class="headerlink" title="範例二"></a>範例二</h2><p>建立日曆表</p>
<pre><code>&lt;code class=&quot;language-sql&quot;&gt;SELECT startDt + LEVEL - 1
FROM (
  SELECT sysdate endDt,  (sysdate -10) startDt
  FROM DUAL
)t1
CONNECT BY startDt - endDt + LEVEL &lt;= 0
</code></pre><p>一開始有兩個欄位 </p>
<ol>
<li>StartDt 起始時間(10天前)</li>
<li>EndDt  最後時間(現在時間)</li>
</ol>
<p>期望建立一個結果集從10天前日期到現在，一樣是使用<code>LEVEL</code>在當Offset的時間</p>
<h2 id="範例三"><a href="#範例三" class="headerlink" title="範例三"></a>範例三</h2><p><code>CONNECT BY</code> 最強大的地方是在於建立階層表</p>
<p>樣本資料：</p>
<pre><code>CREATE TABLE HierarchyDemo (
       PartNo INT,
       NAME VARCHAR2(16),
       ParentPartNo INT
);

INSERT INTO HierarchyDemo VALUES(1,&apos;Boss&apos;,0);
INSERT INTO HierarchyDemo VALUES(2,&apos;Jack&apos;,1);
INSERT INTO HierarchyDemo VALUES(3,&apos;TOM&apos;,2);
INSERT INTO HierarchyDemo VALUES(4,&apos;AMY&apos;,3);
INSERT INTO HierarchyDemo VALUES(5,&apos;Daniel&apos;,2);
</code></pre><p>SQL腳本：</p>
<pre><code>SELECT t1.*,LEVEL
FROM HierarchyDemo t1
START WITH ParentPartNo = 0
CONNECT BY PRIOR PartNo = ParentPartNo
</code></pre><p><code>START WITH ParentPartNo = 0</code> 設置為起始點，開始找尋建立子階級</p>
<p><code>PRIOR PartNo</code> 代表下一次由<code>PartNo</code>當作根結點 找尋 <code>PartNo = ParentPartNo</code> 的列</p>
<p>最後變成下圖</p>
<pre><code>| PARTNO |   NAME | PARENTPARTNO | LEVEL |
|--------|--------|--------------|-------|
|      1 |   Boss |            0 |     1 |
|      2 |   Jack |            1 |     2 |
|      3 |    TOM |            2 |     3 |
|      4 |    AMY |            3 |     4 |
|      5 | Daniel |            2 |     3 |
</code></pre><p>參考資料：<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vY2QvQjE5MzA2XzAxL3NlcnZlci4xMDIvYjE0MjAwL3F1ZXJpZXMwMDMuaHRt" title="https://docs.oracle.com/cd/B19306_01/server.102/b14200/queries003.htm">Oracle Hierarchical Queries<i class="fa fa-external-link"></i></span></p>
<p><strong>此文作者</strong>：Daniel Shih(石頭)<br><strong>此文地址</strong>： <a href="https://isdaniel.github.io/oracle-connect-by/">https://isdaniel.github.io/oracle-connect-by/</a> <br><strong>版權聲明</strong>：本博客所有文章除特別聲明外，均採用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC90dy8=" title="https://creativecommons.org/licenses/by-nc-sa/3.0/tw/">CC BY-NC-SA 3.0 TW<i class="fa fa-external-link"></i></span> 許可協議。轉載請註明出處！</p>
]]></content>
      <categories>
        <category>SQL</category>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>【C#】我們來土砲一個 Asp.net Session (Session核心原理)</title>
    <url>/own-session/</url>
    <content><![CDATA[<p>我們在寫網站一定會使用到 <code>Session</code><br>今天就跟大家分享自製微型 <code>Asp.net Session</code></p>
<blockquote>
<p>分析Session-&gt;實作Session-&gt;使用Session</p>
</blockquote>
<p>在實作之前您必須先了解甚麼是Session<br>網路上一大堆介紹Session文章在此我就不多介紹<br>或可以點進之前小弟的介紹文來簡單了解 <span class="exturl" data-url="aHR0cHM6Ly9kb3RibG9ncy5jb20udHcvZGFuaWVsLzIwMTcvMDQvMDgvMTEwOTE1" title="https://dotblogs.com.tw/daniel/2017/04/08/110915">SessionID.cookie,Session傻傻分不清楚??<i class="fa fa-external-link"></i></span></p>
<p>簡單說明：<br>Http協議是一個無狀態協議。</p>
<blockquote>
<p>核心是 請求=&gt;處理=&gt;回應</p>
</blockquote>
<p>每次請求都是獨立不會記住上一次做了甚麼<br>Session可以幫我們把資料存在Server記憶體，方便我們下次請求使用<br>上網連線眾多使用者，Server怎麼知道哪份資料,屬於哪個使用者的? 這就要依靠 <strong>SessonID</strong><br><strong>SessionID</strong>就像使用者的號碼牌，可以到Server拿相對應的資料</p>
<p>分析：</p>
<ol>
<li>使用者請求頁面時會攜帶該網域下Cookies。</li>
<li>Asp.net接收到並使用Key為SessionID的Cookie，使用Cookie的Value來SessionPool中查找屬於使用者的Session。<br>如果是第一次請求或是沒有SessionID 會幫他產生一個新的並加入回應的Cookie中</li>
<li>取得Session物件後就可以在程式中使用。</li>
</ol>
<p>分析如下圖：</p>
<p><img src="https://i.imgur.com/FUmkKyI.png" alt></p>
<p>我們作出幾個核心來完成模擬Session:</p>
<ol>
<li>SessionPool來存放目前所有Session</li>
<li>SessionObject (支援快取在系統記憶體中)<br>模擬HttpContext封裝Session</li>
</ol>
<p>實作：<br>我要簡單呈現就選擇使用輕便 [泛型處理常式]</p>
<p><img src="https://i.imgur.com/K6FlxMp.png" alt></p>
<p><strong>ApplicationContext</strong> 模擬HttpContext封裝SessionPool<br>創建一個靜態的SessionPool物件，因為程式都共用此SessionPool</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 請求上下文</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ApplicationContext</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 存在Cookie中的SessionID</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="keyword">string</span> MySessionID = <span class="string">"MySessionID"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> HttpRequest Request &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> HttpResponse Respone &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ApplicationContext</span>(<span class="params">HttpContext context</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Respone = context.Response;</span><br><span class="line">        Request = context.Request;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SessionPool _container = <span class="keyword">new</span> SessionPool();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> SessionObject Session</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> GetSessionObj();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 從SessionPool中取得Session對象</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> SessionObject <span class="title">GetSessionObj</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Guid sessionGuid;</span><br><span class="line">        HttpCookie CookieSessionID = Request.Cookies[MySessionID];</span><br><span class="line">        <span class="comment">//如果沒有MySessionID的cookie，做一個新的</span></span><br><span class="line">        <span class="keyword">if</span> (CookieSessionID == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            sessionGuid = Guid.NewGuid();</span><br><span class="line">            HttpCookie cookie = <span class="keyword">new</span> HttpCookie(MySessionID, sessionGuid.ToString())</span><br><span class="line">            &#123;</span><br><span class="line">                Expires = DateTime.Now.AddDays(<span class="number">60</span>)</span><br><span class="line">            &#125;;</span><br><span class="line">            Respone.Cookies.Add(cookie);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            sessionGuid = Guid.Parse(CookieSessionID.Value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> _container[sessionGuid];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>CacheDictionary</strong> 負責快取</p>
<p>使用一個 Dictionary 來對Session存取物件設置快取</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 掌管物件存活時間的集合</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">readonly</span> Dictionary&lt;<span class="keyword">string</span>, CancellationTokenSource&gt; _expireContaner =</span><br><span class="line">    <span class="keyword">new</span> Dictionary&lt;<span class="keyword">string</span>, CancellationTokenSource&gt;();</span><br></pre></td></tr></table></figure>
<p>在Task.Delay可以讓物件存放在工作執行緒中 等Delay時間到就呼叫 ContinueWith 將物件消毀</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 設置快取對象</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name="T"&gt;</span><span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="key"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="create"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="expireIn"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> T Set&lt;T&gt;(<span class="keyword">string</span> key, Func&lt;T&gt; create, TimeSpan expireIn)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//如果此Key被使用 將原本的內容移除</span></span><br><span class="line">    <span class="keyword">if</span> (_expireTasks.ContainsKey(key))</span><br><span class="line">    &#123;</span><br><span class="line">        _expireTasks[key].Cancel();</span><br><span class="line">        _expireTasks.Remove(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> expirationTokenSource = <span class="keyword">new</span> CancellationTokenSource();</span><br><span class="line">    <span class="keyword">var</span> expirationToken = expirationTokenSource.Token;</span><br><span class="line">    <span class="comment">//物件快取</span></span><br><span class="line">    Task.Delay(expireIn, expirationToken).ContinueWith(_ =&gt; Expire(key), expirationToken);</span><br><span class="line"></span><br><span class="line">    _expireTasks[key] = expirationTokenSource;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (T)(<span class="keyword">this</span>[key] = create());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>SeesionPool</strong> 存放所有Session<br>取Session會判斷此Guid是否有對應的Session物件，沒有會幫她創建一個放在池子中</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 存放所有Session池子</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SessionPool</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> Dictionary&lt;Guid, SessionObject&gt; _SessionContain = <span class="keyword">new</span> Dictionary&lt;Guid, SessionObject&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> SessionObject <span class="keyword">this</span>[Guid index]</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            SessionObject obj;</span><br><span class="line">            <span class="keyword">if</span> (_SessionContain.TryGetValue(index, <span class="keyword">out</span> obj))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> obj;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                obj = <span class="keyword">new</span> SessionObject();</span><br><span class="line">                _SessionContain.Add(index, obj);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> obj;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>SessionObject</strong> 控制讀取時的值 (一般我們所使用的Session)</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> Session物件</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SessionObject</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> CacheDictionary cache = <span class="keyword">new</span> CacheDictionary();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">object</span> <span class="keyword">this</span>[<span class="keyword">string</span> index]</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> GetObj(index);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span></span><br><span class="line">        &#123;</span><br><span class="line">            SetCache(index, <span class="keyword">value</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">SetCache</span>(<span class="params"><span class="keyword">string</span> key, <span class="keyword">object</span> <span class="keyword">value</span></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        cache.Set(key, () =&gt; <span class="keyword">value</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">object</span> <span class="title">GetObj</span>(<span class="params"><span class="keyword">string</span> key</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> cache.GetOrDefault(key, () =&gt; <span class="keyword">default</span>(<span class="keyword">object</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用：</p>
<p>在建構子中創建一個 ApplicationContext 之後,即可Asp.net那樣來使用Session</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> ApplicationContext app;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SessionHanlder</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    app = <span class="keyword">new</span> ApplicationContext(HttpContext.Current);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ProcessRequest</span>(<span class="params">HttpContext context</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">null</span> == app.Session[<span class="string">"Time"</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        app.Session[<span class="string">"Time"</span>] = <span class="string">$"Hello <span class="subst">&#123;DateTime.Now.ToString(<span class="string">"yyyy-MM-dd hh-mm-ss"</span>)&#125;</span>"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    context.Response.Write(app.Session[<span class="string">"Time"</span>]);</span><br><span class="line">    context.Response.ContentType = <span class="string">"text/plain"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面程式是簡單模擬Session核心作用的程式</p>
<p>但並未處理多執行緒並發讀寫…等等問題，所以建議別再實際專案中使用XD!!</p>
<p>專案使用 VS2015 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2lzZGFuaWVsL093blNlc3Npb24=" title="https://github.com/isdaniel/OwnSession">GitHub原始碼<i class="fa fa-external-link"></i></span></p>
<p><strong>此文作者</strong>：Daniel Shih(石頭)<br><strong>此文地址</strong>： <a href="https://isdaniel.github.io/own-session/">https://isdaniel.github.io/own-session/</a> <br><strong>版權聲明</strong>：本博客所有文章除特別聲明外，均採用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC90dy8=" title="https://creativecommons.org/licenses/by-nc-sa/3.0/tw/">CC BY-NC-SA 3.0 TW<i class="fa fa-external-link"></i></span> 許可協議。轉載請註明出處！</p>
]]></content>
      <categories>
        <category>C#</category>
        <category>SourceCode</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>Asp.net</tag>
        <tag>Session</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ (三) 簡單實作一個MQ</title>
    <url>/rabbitmq-fanout/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇利用RabbitMQ client來簡單實現MQ功能.</p>
<p>在RabbitMQ中有很重要兩個角色，<code>Producer</code>和<code>Consumer</code>，下面這個範例使用<code>c# console</code>來實現.</p>
<p>我個人覺得APMQ協議和Http協議有點類似，一樣有Header(Properties)，body…等等概念.</p>
<h2 id="Producer-Code"><a href="#Producer-Code" class="headerlink" title="Producer Code"></a>Producer Code</h2><p>一開始我們宣告一個 ConnectionFactory 並設置RabbitMQ Server連接參數</p>
<ul>
<li>UserName:使用者帳號</li>
<li>Password:使用者密碼</li>
<li>HostName:連接FQDN或IP</li>
</ul>
<p>RabbitMQ預設密碼是 <code>guest</code></p>
<pre><code>//建立連接工廠
ConnectionFactory factory = new ConnectionFactory
{
    UserName = &quot;guest&quot;,
    Password = &quot;guest&quot;,
    HostName = &quot;localhost&quot;
};
</code></pre><p>呼叫<code>factory.CreateConnection</code> 建立連接RabbitMQ連接物件，並呼叫 <code>CreateModel</code>方法建立一個<code>channel</code> Model</p>
<blockquote>
<p>在之前有說過RabbitMq會利用同一個Connection來建立不同的channel來執行MQ連接.</p>
</blockquote>
<pre><code>using (var connection = factory.CreateConnection())
using (var channel = connection.CreateModel())
{
    #region 如果在RabbitMq手動建立可以忽略這段程式
    //建立一個Queue
    channel.QueueDeclare(queueName, false, false, false, null);
    //建立一個Exchange
    channel.ExchangeDeclare(exchangeName, ExchangeType.Direct, false, false, null);
    //把Queue跟Exchange
    channel.QueueBind(queueName, exchangeName, routeKey); 
    #endregion

    Console.WriteLine(&quot;\nRabbitMQ連接成功,如需離開請按下Escape鍵&quot;);

    string input = string.Empty;
    do
    {
        input = Console.ReadLine();
        var sendBytes = Encoding.UTF8.GetBytes(input);
        //發布訊息到RabbitMQ Server
        channel.BasicPublish(exchangeName, routeKey, null, sendBytes);

    } while (Console.ReadKey().Key != ConsoleKey.Escape);
}
</code></pre><p>最後在使用 <code>channel.BasicPublish</code>方法 將訊息推送給指定交換器，因為是走tcp所以將訊息轉換成二進制流</p>
<hr>
<h2 id="Consumer-Code"><a href="#Consumer-Code" class="headerlink" title="Consumer Code"></a>Consumer Code</h2><p>前面建立連接都大同小異都是利用<code>ConnectionFactory</code>來建立連接物件</p>
<pre><code>ConnectionFactory factory = new ConnectionFactory
{
    UserName = &quot;guest&quot;,
    Password = &quot;guest&quot;,
    HostName = &quot;localhost&quot;
};

string exchangeName = &quot;exchangeFanout&quot;;
string queueName = &quot;FanoutQueue&quot;;
string routeKey = string.Empty;

using (var connection = factory.CreateConnection())
using (var channel = connection.CreateModel())
{
    //channel.QueueBind
    EventingBasicConsumer consumer = new EventingBasicConsumer(channel);
    channel.BasicQos(0, 1, false);
    //接收到消息事件 consumer.IsRunning
    consumer.Received += (ch, ea) =&gt;
    {
        var message = Encoding.UTF8.GetString(ea.Body);

        Console.WriteLine($&quot;Queue:{queueName}收到資料： {message}&quot;);
        channel.BasicAck(ea.DeliveryTag, false);
    };

    channel.BasicConsume(queueName, false, consumer); 
    Console.WriteLine(&quot;接收訊息&quot;);
    Console.ReadKey();
}
</code></pre><p>值得一提的是 <code>EventingBasicConsumer</code> 這個類別有一個建構子函數，把 <code>channel</code> 物件傳入產生一個消費者</p>
<pre><code>EventingBasicConsumer consumer = new EventingBasicConsumer(channel);
</code></pre><p>在呼叫 <code>EventingBasicConsumer.Received</code>綁定接收訊息事件，</p>
<ol>
<li>第一個參數是<code>channel</code>物件本身</li>
<li>第二個參數是 <code>Message</code>(訊息) 資訊</li>
</ol>
<p>裡面有一個<code>Body</code>欄位可取得 傳送的二進制流資料</p>
<hr>
<h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p>為了簡單演示範例 我讓使用者輸入一個數字來跑迴圈，Producer 會把數字傳給Exchange並平均分配給所有consumer</p>
<p>本次有兩個 consumer 等待接收資訊，我們可以看到Fanout交換器不用指定RouteKey且把訊息平均分配到consumer上</p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/%E4%B9%9D%E6%A1%83/338bdb11-eefe-41ac-a329-188b11796447/1548690458_72118.gif" alt></p>
<p><strong>此文作者</strong>：Daniel Shih(石頭)<br><strong>此文地址</strong>： <a href="https://isdaniel.github.io/rabbitmq-fanout/">https://isdaniel.github.io/rabbitmq-fanout/</a> <br><strong>版權聲明</strong>：本博客所有文章除特別聲明外，均採用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC90dy8=" title="https://creativecommons.org/licenses/by-nc-sa/3.0/tw/">CC BY-NC-SA 3.0 TW<i class="fa fa-external-link"></i></span> 許可協議。轉載請註明出處！</p>
]]></content>
      <categories>
        <category>C#</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>RabbitMQ</tag>
        <tag>MQ</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ (二) 概念</title>
    <url>/rabbitmq-install-01/</url>
    <content><![CDATA[<h2 id="介紹RabbitMQ"><a href="#介紹RabbitMQ" class="headerlink" title="介紹RabbitMQ"></a>介紹RabbitMQ</h2><p>RabbitMQ是個訊息仲介（broker），主要是利用消息把生產者跟消費者解耦合</p>
<p>在RabbitMQ主要有以下角色</p>
<ol>
<li>產生者（producer）</li>
<li>接收者（consumer）</li>
<li>佇列（Queue）</li>
<li>交換器(Exchange)</li>
<li>訊息(Message)</li>
</ol>
<p>上面太抽象?  讓我來舉一個簡單點的例子</p>
<p>我們要寄信會把信投進郵筒，信件統一送到郵局，由分配至各個區域郵差去寄送信件</p>
<p>在此可把上面的角色對應在RabbitMQ上</p>
<ol>
<li>產生者（producer）= 寄信人</li>
<li>接收者（consumer） = 收件人</li>
<li>佇列（Queue）= 郵差</li>
<li>交換器(Exchange) = 郵筒</li>
<li>訊息(Message)  = 信件</li>
</ol>
<p>下面是我畫RabbitMq運作流程圖</p>
<p><img src="https://i.imgur.com/uvXHTmW.png" alt></p>
<hr>
<h3 id="RabbitMQ-腳色簡圖"><a href="#RabbitMQ-腳色簡圖" class="headerlink" title="RabbitMQ 腳色簡圖"></a>RabbitMQ 腳色簡圖</h3><ul>
<li>產生者(P)</li>
<li>接收者(C)</li>
<li>佇列（Queue）</li>
<li>交換器(E)</li>
</ul>
<h3 id><a href="#" class="headerlink" title></a><img src="https://dotblogsfile.blob.core.windows.net/user/九桃/09cafcb7-aeab-46e6-a73d-7d2cc8e089ac/1548173424_68039.png" alt></h3><p>[中間黑框]是RabbitMQ (Broker) 幫助 (P)和(C) 解耦合</p>
<h3 id="Exchange-概念"><a href="#Exchange-概念" class="headerlink" title="Exchange 概念"></a>Exchange 概念</h3><p>生產者發送訊息時會經由Exchange來決定要給哪個Queue.</p>
<p>Exchange分發訊息根據類型的不同分發策略有區別</p>
<p>目前共四種類型：</p>
<ol>
<li>Direct</li>
<li>Fanout</li>
<li>Topic</li>
<li>Headers </li>
</ol>
<h3 id="Direct"><a href="#Direct" class="headerlink" title="Direct"></a>Direct</h3><p>生產者傳送訊息中 RouteKey 必須跟 Queue binding key <strong>一致</strong> Exchange才會把資料送到Queue中.</p>
<p>如果一個Queue binding 到 Exchange 要求路由鍵為 “Daniel”，只接收 Routing key 是 “Daniel”的訊息，不會轉發“Daniel1”，RouteKey需完全匹配．</p>
<p>使用 Direct 交換器 可當作寄信需要  RouteKey (標註) 要由哪個 Queue (郵差)接收轉送此訊息,Queue (郵差)會藉由此 RouteKey (標註) 找到相對應消費者</p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/九桃/04e4a734-32c7-4c11-97e6-9d7a194dcbc0/1554261004_68269.png" alt></p>
<h2 id="Fanout"><a href="#Fanout" class="headerlink" title="Fanout"></a>Fanout</h2><p>fanout 交換器不處理Route Key,簡單來說就是輪流把消息放進每個Queue中.</p>
<p>使用 fanout 交換器 把 信件(Message) 給 所有 郵差(Queue) 每個消費者都會收到此 信件(Message) </p>
<p>在現實生活中有點類似經由  fanout交換器 (郵筒) 將傳單夾入所有信件中讓郵差發給所有人</p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/九桃/04e4a734-32c7-4c11-97e6-9d7a194dcbc0/1554261165_39274.jpg" alt></p>
<h2 id="Topic"><a href="#Topic" class="headerlink" title="Topic"></a>Topic</h2><p>Topic交換器和 Direct 交換器都需要查看 來分配訊息(RouteKey)和Binding中的binding key是否一致,但Topic交換器使用部分匹配比Direct 交換器多了更多彈性。</p>
<p>Topic交換器提供兩種方式</p>
<ol>
<li><strong> #</strong> 匹配0個或多個單字</li>
<li><strong> *</strong> 匹配不多不少一個單字</li>
</ol>
<p>例如 有兩個Queue (binding key)分別是 App.# 和 App.*</p>
<p>經由Topic交換器分配一個訊息RouteKey是 App.Daniel 則都會將資料塞入兩個 Queue (binding key) 為 App.# 和 App.* </p>
<p>但如果另一個訊息RouteKey是 App .Daniel.Test 只會塞入 Queue (binding key) 為 App.# ,另一個  Queue (binding key) 是 App.*  不被匹配</p>
<p>在現實生活中有點類似 發送 信件(Message) 經由  Topic交換器 (郵筒) 會依照上面的區域 (例如台北縣,宜蘭縣)​​ 來分配相對應的區域信件轉交給 Queue (郵差) 給消費者</p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/九桃/04e4a734-32c7-4c11-97e6-9d7a194dcbc0/1554261121_78429.png" alt></p>
<p>參考來源：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC83OWNhMDgxMTZkNTc=" title="https://www.jianshu.com/p/79ca08116d57">https://www.jianshu.com/p/79ca08116d57<i class="fa fa-external-link"></i></span></p>
<p><strong>此文作者</strong>：Daniel Shih(石頭)<br><strong>此文地址</strong>： <a href="https://isdaniel.github.io/rabbitmq-install-01/">https://isdaniel.github.io/rabbitmq-install-01/</a> <br><strong>版權聲明</strong>：本博客所有文章除特別聲明外，均採用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC90dy8=" title="https://creativecommons.org/licenses/by-nc-sa/3.0/tw/">CC BY-NC-SA 3.0 TW<i class="fa fa-external-link"></i></span> 許可協議。轉載請註明出處！</p>
]]></content>
      <categories>
        <category>C#</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>RabbitMQ</tag>
        <tag>MQ</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ (一) 安裝介紹</title>
    <url>/rabbitmq-introduce-02/</url>
    <content><![CDATA[<h2 id="RabbitMQ是什麼"><a href="#RabbitMQ是什麼" class="headerlink" title="RabbitMQ是什麼?"></a>RabbitMQ是什麼?</h2><p>RabbitMQ是一個訊息中介軟體 (broker), 他實作​<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLXR3LyVFOSVBQiU5OCVFNyVCQSVBNyVFNiVCNiU4OCVFNiU4MSVBRiVFOSU5OCU5RiVFNSU4OCU5NyVFNSU4RCU4RiVFOCVBRSVBRQ==" title="https://zh.wikipedia.org/zh-tw/%E9%AB%98%E7%BA%A7%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E5%8D%8F%E8%AE%AE">AMQP標準<i class="fa fa-external-link"></i></span>, 特點是消息轉發是非同步並且可靠.</p>
<p>主要用來處理應用程序之間消息的儲存與轉發可讓消費者和生產者解耦合, 消息是基於二進制</p>
<p>因為RabbitMQ Server是用<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvRXJsYW5n" title="Erlang">Erlang<i class="fa fa-external-link"></i></span>語言編寫，所以在安裝RabbitMQ Server前須先安裝<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvRXJsYW5n" title="Erlang">Erlang<i class="fa fa-external-link"></i></span><span class="exturl" data-url="aHR0cHM6Ly93d3cuZXJsYW5nLm9yZy9kb3dubG9hZHM=" title="https://www.erlang.org/downloads">環境<i class="fa fa-external-link"></i></span></p>
<p>安裝完後可到<span class="exturl" data-url="aHR0cHM6Ly93d3cucmFiYml0bXEuY29tL2Rvd25sb2FkLmh0bWw=" title="https://www.rabbitmq.com/download.html">RabbitMq<i class="fa fa-external-link"></i></span>官網下載安裝Server .</p>
<p>以下是常用在CMD使用的使令</p>
<ul>
<li><p>開啟RabbitMq Server. </p>
<p>  rabbitmq-server -detached</p>
</li>
<li><p>查看RabbitMq狀態 </p>
<p>  rabbitmqctl status</p>
</li>
<li><p>查看Queue列表狀態</p>
<p>  rabbitmqctl list_queues</p>
</li>
<li><p>查看交換器(Exchange)</p>
<p>  rabbitmqctl list_exchanges</p>
</li>
<li><p>查看綁定狀態</p>
<p>  rabbitmqctl list_bindings</p>
</li>
</ul>
<h2 id="RabbitMQ-Server-UI"><a href="#RabbitMQ-Server-UI" class="headerlink" title="RabbitMQ Server UI"></a>RabbitMQ Server UI</h2><p>RabbitMq Server 很貼心也有UI版的控制面板,只需在CMD中輸入這個指令 啟用Server UI套件</p>
<h3 id="rabbitmq-plugins-enable-rabbitmq-management"><a href="#rabbitmq-plugins-enable-rabbitmq-management" class="headerlink" title="rabbitmq-plugins enable rabbitmq_management"></a>rabbitmq-plugins enable rabbitmq_management</h3><p><img src="https://dotblogsfile.blob.core.windows.net/user/九桃/9f6dc914-dd2d-44b0-b8e4-7a3f93d200d2/1547823390_90475.png" alt></p>
<p>再訪問 <span class="exturl" data-url="aHR0cDovL2xvY2FsaG9zdDoxNTY3Mi8=" title="http://localhost:15672/">http://localhost:15672/ <i class="fa fa-external-link"></i></span>URL,就可進入這個頁面</p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/九桃/9f6dc914-dd2d-44b0-b8e4-7a3f93d200d2/1547823535_62339.png" alt></p>
<p>預設帳號密碼都是guest.</p>
<h4 id="Rabbitmq-run-in-Docker"><a href="#Rabbitmq-run-in-Docker" class="headerlink" title="Rabbitmq run in Docker"></a>Rabbitmq run in Docker</h4><p>使用Docker可以方便建立我們的<span class="exturl" data-url="aHR0cHM6Ly9odWIuZG9ja2VyLmNvbS9fL3JhYmJpdG1x" title="https://hub.docker.com/_/rabbitmq">Rabbitmq<i class="fa fa-external-link"></i></span></p>
<p>在你電腦安裝完Docker後,只需使用下面指令</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ANGELSCRIPT"><figure class="iseeu highlight /angelscript"><table><tr><td class="code"><pre><span class="line">docker run -d --hostname myrabbit --name RabbitMQ -p <span class="number">8080</span>:<span class="number">15672</span> rabbitmq:<span class="number">3</span>-management</span><br></pre></td></tr></table></figure></div>
<p>再訪問 <span class="exturl" data-url="aHR0cDovL2xvY2FsaG9zdDoxNTY3Mi8=" title="http://localhost:15672/">http://localhost:15672/<i class="fa fa-external-link"></i></span>URL,就可進入這個頁面</p>
<p><strong>Web UI</strong>和Server都會幫我們運行起來</p>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結:"></a>小結:</h2><p>安裝RabbitMQ步驟就這幾步而已 ^^,之後會跟大家分享如何在.Net使用RabbitMQ.</p>
<p><strong>此文作者</strong>：Daniel Shih(石頭)<br><strong>此文地址</strong>： <a href="https://isdaniel.github.io/rabbitmq-introduce-02/">https://isdaniel.github.io/rabbitmq-introduce-02/</a> <br><strong>版權聲明</strong>：本博客所有文章除特別聲明外，均採用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC90dy8=" title="https://creativecommons.org/licenses/by-nc-sa/3.0/tw/">CC BY-NC-SA 3.0 TW<i class="fa fa-external-link"></i></span> 許可協議。轉載請註明出處！</p>
]]></content>
      <categories>
        <category>C#</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>RabbitMQ</tag>
        <tag>MQ</tag>
      </tags>
  </entry>
  <entry>
    <title>五分鐘快速了解 [傳址，傳參考，傳址]</title>
    <url>/ref-address/</url>
    <content><![CDATA[<p><strong>傳址，傳參考，傳址</strong>  是基本但重要的概念。此概念在很多語言都通用</p>
<p>我使用Gif動畫檔 快速帶領大家了解 <strong>傳址，傳參考，傳址</strong></p>
<ol>
<li><p>傳值(Call By Value)</p>
<p> 顧名思義 是把<code>值</code>傳到 另一個<code>記憶體位置</code>的<code>值</code>上</p>
</li>
</ol>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/%E4%B9%9D%E6%A1%83/e39d0fd8-5258-4484-949c-3019082ff20e/1519627294_92268.gif" alt="https://dotblogsfile.blob.core.windows.net/user/%E4%B9%9D%E6%A1%83/e39d0fd8-5258-4484-949c-3019082ff20e/1519627294_92268.gif"></p>
<ol>
<li>傳址 (Call By Adress)</li>
</ol>
<p>是把<code>記憶體位置</code>傳到 另一個<code>記憶體位置</code>的<code>值</code>上</p>
<blockquote>
<p>補充:嚴格來說(<code>Call By Adress</code>)是不正統的說法,其實傳址也是傳值但傳的是<code>記憶體位置</code>    </p>
</blockquote>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/%E4%B9%9D%E6%A1%83/e39d0fd8-5258-4484-949c-3019082ff20e/1519627835_01874.gif" alt="https://dotblogsfile.blob.core.windows.net/user/%E4%B9%9D%E6%A1%83/e39d0fd8-5258-4484-949c-3019082ff20e/1519627835_01874.gif"></p>
<ol>
<li><p>傳參考(Call By Reference)</p>
<p>是把<code>記憶體位置</code>傳到  移到另一個<code>記憶體位置</code>上 (可看作同一個物件)</p>
</li>
</ol>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/%E4%B9%9D%E6%A1%83/e39d0fd8-5258-4484-949c-3019082ff20e/1519627909_09266.gif" alt="https://dotblogsfile.blob.core.windows.net/user/%E4%B9%9D%E6%A1%83/e39d0fd8-5258-4484-949c-3019082ff20e/1519627909_09266.gif"></p>
<p>在C#廣義來說</p>
<ul>
<li><p>基本型別 Struct (int,double,float,byte …)  可看作 傳值</p>
</li>
<li><p>一般型別 Class (自訂Class ,SqlConnection….)  可看作 傳址  更精確來說是傳Stack的值(指向Heap的記憶體位置)</p>
</li>
</ul>
<p><strong>在C#中並沒傳參考，只有傳值和傳址</strong></p>
<p><strong>此文作者</strong>：Daniel Shih(石頭)<br><strong>此文地址</strong>： <a href="https://isdaniel.github.io/ref-address/">https://isdaniel.github.io/ref-address/</a> <br><strong>版權聲明</strong>：本博客所有文章除特別聲明外，均採用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC90dy8=" title="https://creativecommons.org/licenses/by-nc-sa/3.0/tw/">CC BY-NC-SA 3.0 TW<i class="fa fa-external-link"></i></span> 許可協議。轉載請註明出處！</p>
]]></content>
      <categories>
        <category>C#</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>Memory</tag>
        <tag>call by value</tag>
        <tag>call by adress</tag>
        <tag>call by reference</tag>
      </tags>
  </entry>
  <entry>
    <title>Gaps and Islands problem (SQL) 連續範圍</title>
    <url>/sql-gaps-and-islands-problem/</url>
    <content><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>SO 發現蠻多人有遇到 <code>Gaps and Islands problem</code></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNTIwNTk2ODIvY291bnQtb2YtbGFzdC1jb250aW51b3VzLWluc2VydGVkLXJlY29yZHMtYmFzZWQtb24tZGF0ZQ==" title="https://stackoverflow.com/questions/52059682/count-of-last-continuous-inserted-records-based-on-date">count of last continuous inserted records based on date<i class="fa fa-external-link"></i></span> </p>
<p>之前有跟大家分享過 解決連續範圍的思路  <span class="exturl" data-url="aHR0cHM6Ly9kb3RibG9ncy5jb20udHcvZGFuaWVsLzIwMTgvMDMvMjcvMTgwNzEw" title="https://dotblogs.com.tw/daniel/2018/03/27/180710">[SQL連續範圍] 數字，日期連續範圍<i class="fa fa-external-link"></i></span></p>
<p>今天針對發問者實際例子來一步步 解決問題…</p>
<p>提問出處:<span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNTIwNTk2ODIvY291bnQtb2YtbGFzdC1jb250aW51b3VzLWluc2VydGVkLXJlY29yZHMtYmFzZWQtb24tZGF0ZQ==" title="https://stackoverflow.com/questions/52059682/count-of-last-continuous-inserted-records-based-on-date">count of last continuous inserted records based on date<i class="fa fa-external-link"></i></span> </p>
<hr>
<h2 id="問題說明"><a href="#問題說明" class="headerlink" title="問題說明:"></a>問題說明:</h2><p>提問者希望可以獲得最近一次連續日期的次數</p>
<p>例如:</p>
<pre><code>user_id | point |   DateTime
1       |   10  |   18-08-2018 17:15
2       |   10  |   01-08-2018 17:15
1       |   10  |   21-08-2018 17:15
1       |   10  |   22-08-2018 17:15
2       |   10  |   26-08-2018 17:15
1       |   10  |   25-08-2018 17:15
2       |   10  |   27-08-2018 17:15
1       |   10  |   26-08-2018 17:15
1       |   10  |   27-08-2018 17:15
</code></pre><p>有6筆資料是<code>user_id = 1</code></p>
<p>希望取得<code>user_id = 1</code>最後一次連續日期數量是3</p>
<p>因為 這三筆是最近連續日期</p>
<pre><code>27-08-2018
26-08-2018
25-08-2018
</code></pre><hr>
<h2 id="解決思路整理"><a href="#解決思路整理" class="headerlink" title="解決思路整理:"></a>解決思路整理:</h2><div class="note note--important">連續資料有個特性就是一組(<span style="color:#FF0000;">連續範圍數值) - (基於某個條件順序產稱的數值)</span>  結果是一樣的</div>

<ol>
<li><code>user_id</code> 分群 並加上編號</li>
<li>因為要基於日期找尋連續日期,所以使用一個小技巧 先找尋每個 <code>user_id</code>最小天數 (最大天數也可) ,之後使用<code>datediff</code>函數取得差一天數來當數值</li>
</ol>
<p>我會使用sql-server來解說(因為支援window function) XD</p>
<hr>
<h2 id="範例說明"><a href="#範例說明" class="headerlink" title="範例說明:"></a>範例說明:</h2><p><span style="color:#FF0000;">基於某個條件順序產稱的數值  :</span><span style="color:#FF0000;"></span>先在子查詢中取得每個<code>user_id</code>最小日期,以便後面使用datediff函數取得間隔天數(產生編號)</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">MIN(DateTime) over(partition by user_id order by DateTime )</span><br></pre></td></tr></table></figure></div>
<p><span style="color:#FF0000;">連續範圍數值 : </span>我使用 Row_number 和 Window function 依照每個使用者給編號.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">Row_number() over(partition by user_id order by DateTime)</span><br></pre></td></tr></table></figure></div>
<p>之後使用diffdate函數 並將兩值相減取得</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> DateTime,<span class="keyword">datediff</span>(<span class="keyword">day</span>, <span class="keyword">MIN</span>(DateTime) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> user_id <span class="keyword">order</span> <span class="keyword">by</span> DateTime ),DateTime) - Row_number() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> user_id <span class="keyword">order</span> <span class="keyword">by</span> DateTime)rn</span><br><span class="line"><span class="keyword">FROM</span>  Table1</span><br><span class="line"><span class="keyword">Where</span> user_id = <span class="number">1</span> </span><br><span class="line">|             DateTime | rn |</span><br><span class="line">|<span class="comment">----------------------|----|</span></span><br><span class="line">| <span class="number">2018</span><span class="number">-08</span><span class="number">-18</span>T17:<span class="number">15</span>:<span class="number">00</span>Z | <span class="number">-1</span> |</span><br><span class="line">| <span class="number">2018</span><span class="number">-08</span><span class="number">-21</span>T17:<span class="number">15</span>:<span class="number">00</span>Z |  <span class="number">1</span> |</span><br><span class="line">| <span class="number">2018</span><span class="number">-08</span><span class="number">-22</span>T17:<span class="number">15</span>:<span class="number">00</span>Z |  <span class="number">1</span> |</span><br><span class="line">| <span class="number">2018</span><span class="number">-08</span><span class="number">-25</span>T17:<span class="number">15</span>:<span class="number">00</span>Z |  <span class="number">3</span> |</span><br><span class="line">| <span class="number">2018</span><span class="number">-08</span><span class="number">-26</span>T17:<span class="number">15</span>:<span class="number">00</span>Z |  <span class="number">3</span> |</span><br><span class="line">| <span class="number">2018</span><span class="number">-08</span><span class="number">-27</span>T17:<span class="number">15</span>:<span class="number">00</span>Z |  <span class="number">3</span> |</span><br></pre></td></tr></table></figure></div>
<p>我們可以看到連續日期的分組已經出來了</p>
<p>有了這個連續編號 我們就可以直接取得我們要的結果了</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">;<span class="keyword">with</span> cte <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> DateTime,<span class="keyword">datediff</span>(<span class="keyword">day</span>, <span class="keyword">MIN</span>(DateTime) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> user_id <span class="keyword">order</span> <span class="keyword">by</span> DateTime ),DateTime) - Row_number() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> user_id <span class="keyword">order</span> <span class="keyword">by</span> DateTime)rn</span><br><span class="line">    <span class="keyword">FROM</span>  Table1</span><br><span class="line">    <span class="keyword">Where</span> user_id = <span class="number">1</span> </span><br><span class="line">)</span><br><span class="line"><span class="keyword">SELECT</span> TOP <span class="number">1</span> <span class="keyword">count</span>(*) cnt</span><br><span class="line"><span class="keyword">FROM</span> cte</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> rn</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">MAX</span>(DateTime) <span class="keyword">desc</span></span><br></pre></td></tr></table></figure></div>
<p>因為只要取得最近一筆連續日期資料 我們可以 <code>ORDER BY MAX(DateTime)</code>且使用<code>TOP 1</code>來取得最新一筆的連續數量</p>
<p><span class="exturl" data-url="aHR0cDovL3NxbGZpZGRsZS5jb20vIyExOC84ZTk3Ny8yMA==" title="http://sqlfiddle.com/#!18/8e977/20">SQLFiddle<i class="fa fa-external-link"></i></span></p>
<hr>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結:"></a>小結:</h2><p>使用window function後, 語法整個變得很簡單.(有興趣可以進SO連結看沒有使用window function的解法 露露長)</p>
<p><strong>此文作者</strong>：Daniel Shih(石頭)<br><strong>此文地址</strong>： <a href="https://isdaniel.github.io/sql-gaps-and-islands-problem/">https://isdaniel.github.io/sql-gaps-and-islands-problem/</a> <br><strong>版權聲明</strong>：本博客所有文章除特別聲明外，均採用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC90dy8=" title="https://creativecommons.org/licenses/by-nc-sa/3.0/tw/">CC BY-NC-SA 3.0 TW<i class="fa fa-external-link"></i></span> 許可協議。轉載請註明出處！</p>
]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>MSSQL</tag>
        <tag>MySQL</tag>
        <tag>Postgresql</tag>
        <tag>SQL-Gaps-and-Islands-problem</tag>
      </tags>
  </entry>
  <entry>
    <title>資料庫壓測好工具-SQLQueryStress</title>
    <url>/sqlquerystress-intro/</url>
    <content><![CDATA[<h2 id="前文"><a href="#前文" class="headerlink" title="前文"></a>前文</h2><p>隨著業務量增長,資料庫的複雜程度也會成正比增長</p>
<p>這裡跟大家分享一個好用壓測資料庫工具<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0VyaWtFSi9TcWxRdWVyeVN0cmVzcy8=" title="https://github.com/ErikEJ/SqlQueryStress/">SqlQueryStress<i class="fa fa-external-link"></i></span></p>
<p>在Dev可以模擬高併發時產生的問題,下面會分享我之前Prod遇到問題並解決問題過程</p>
<p>詳細資訊可以看<a href="https://isdaniel.github.io/sqlserver-merge-condition-problem/">SQLServer-Merge-condition-problem</a></p>
<h2 id="SQLQueryStress介紹"><a href="#SQLQueryStress介紹" class="headerlink" title="SQLQueryStress介紹"></a>SQLQueryStress介紹</h2><p>在執行效能調教和測試高併發產生問題時,我們會關注幾個特別資訊</p>
<ol>
<li>CPU執行時間</li>
<li>logical read數值</li>
<li>Total執行時間</li>
</ol>
<p><img src="https://i.imgur.com/GXpaQti.png" alt></p>
<p>在此工具都有相對應的資訊提供給我們觀看</p>
<p>SQLQueryStress可以讓我們輸入要重複執行次數跟使用多少個<strong>Thread</strong>來執行.</p>
<blockquote>
<p><code>Total Exceptions</code>可以協助查看目前語法執行上有多少錯誤產生(這個功能在高併發驗證問題很有幫助)</p>
</blockquote>
<h3 id="Sample-Data"><a href="#Sample-Data" class="headerlink" title="Sample Data"></a>Sample Data</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [dbo].[PriceLimitation](</span><br><span class="line">	[CategoryID] [<span class="built_in">int</span>] <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">	[ProdcutGroupID] [<span class="built_in">smallint</span>] <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">	[UserID] [<span class="built_in">int</span>] <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">	[StakeAmount] [<span class="built_in">numeric</span>](<span class="number">18</span>, <span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">	[ProductID] [<span class="built_in">smallint</span>] <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"> <span class="keyword">CONSTRAINT</span> [PK_PriceLimitation] PRIMARY <span class="keyword">KEY</span> CLUSTERED </span><br><span class="line">(</span><br><span class="line">    [UserID] <span class="keyword">ASC</span>,</span><br><span class="line">	[CategoryID] <span class="keyword">ASC</span>,</span><br><span class="line">	[ProductID] <span class="keyword">ASC</span>,</span><br><span class="line">	[ProdcutGroupID] <span class="keyword">ASC</span></span><br><span class="line">)<span class="keyword">WITH</span> (PAD_INDEX = <span class="keyword">OFF</span>, STATISTICS_NORECOMPUTE = <span class="keyword">OFF</span>, IGNORE_DUP_KEY = <span class="keyword">OFF</span>, ALLOW_ROW_LOCKS = <span class="keyword">ON</span>, ALLOW_PAGE_LOCKS = <span class="keyword">ON</span>) <span class="keyword">ON</span> [PRIMARY]</span><br><span class="line">) <span class="keyword">ON</span> [PRIMARY]</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TYPE</span> [dbo].[uftt_PriceLimit] <span class="keyword">AS</span> <span class="keyword">TABLE</span>(</span><br><span class="line">	[CategoryID] [<span class="built_in">int</span>] <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">	[ProdcutGroupID] [<span class="built_in">smallint</span>] <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">	[UserID] [<span class="built_in">int</span>] <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">	[StakeAmount] [<span class="built_in">numeric</span>](<span class="number">18</span>, <span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">	[ProductID] [<span class="built_in">smallint</span>] <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">	PRIMARY <span class="keyword">KEY</span> CLUSTERED </span><br><span class="line">(</span><br><span class="line">	[UserID] <span class="keyword">ASC</span>,</span><br><span class="line">	[CategoryID] <span class="keyword">ASC</span>,</span><br><span class="line">	[ProductID] <span class="keyword">ASC</span>,</span><br><span class="line">	[ProdcutGroupID] <span class="keyword">ASC</span></span><br><span class="line">)<span class="keyword">WITH</span> (IGNORE_DUP_KEY = <span class="keyword">OFF</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> <span class="keyword">ALTER</span> PROC [dbo].[CalculateStake]</span><br><span class="line">	@CategoryID <span class="built_in">int</span>,</span><br><span class="line">	@ProductID <span class="built_in">smallint</span> ,</span><br><span class="line">	@ProdcutGroupID <span class="built_in">smallint</span>,</span><br><span class="line">	@PriceLimit [uftt_PriceLimit] readonly</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	<span class="keyword">SET</span> NOCOUNT <span class="keyword">ON</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">MERGE</span> <span class="keyword">INTO</span> [dbo].[PriceLimitation] t1</span><br><span class="line">		<span class="keyword">USING</span> @PriceLimit t2</span><br><span class="line">		<span class="keyword">ON</span> t1.UserID = t2.UserID </span><br><span class="line">            <span class="keyword">AND</span> t1.ProdcutGroupID= @ProdcutGroupID</span><br><span class="line">            <span class="keyword">AND</span> t1.CategoryID=@CategoryID </span><br><span class="line">            <span class="keyword">AND</span> t1.ProductID = @ProductID</span><br><span class="line">	<span class="keyword">WHEN</span> <span class="keyword">MATCHED</span> <span class="keyword">THEN</span></span><br><span class="line">		<span class="keyword">UPDATE</span> <span class="keyword">SET</span> t1.StakeAmount = t1.StakeAmount + t2.StakeAmount</span><br><span class="line">	<span class="keyword">WHEN</span> <span class="keyword">NOT</span> <span class="keyword">MATCHED</span> <span class="keyword">THEN</span></span><br><span class="line">		<span class="keyword">INSERT</span> <span class="keyword">VALUES</span>(@CategoryID, @ProdcutGroupID, t2.UserID ,t2.StakeAmount, @ProductID);</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure></div>
<h3 id="執行語法"><a href="#執行語法" class="headerlink" title="執行語法"></a>執行語法</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> @CategoryID <span class="built_in">int</span>,</span><br><span class="line">	@ProductID <span class="built_in">smallint</span> ,</span><br><span class="line">	@ProdcutGroupID <span class="built_in">smallint</span>,  </span><br><span class="line">    @PriceLimit [uftt_PriceLimit] </span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> @<span class="keyword">from</span> <span class="built_in">int</span></span><br><span class="line"><span class="keyword">SELECT</span> @<span class="keyword">from</span> = <span class="keyword">ROUND</span>(<span class="keyword">RAND</span>(<span class="keyword">CAST</span>(NEWID() <span class="keyword">as</span> varbinary)) * <span class="number">500</span>,<span class="number">0</span>)</span><br><span class="line"><span class="keyword">SELECT</span> @CategoryID =  <span class="keyword">CAST</span>(<span class="keyword">ROUND</span>(<span class="keyword">RAND</span>(<span class="keyword">CAST</span>(NEWID() <span class="keyword">as</span> varbinary)) * <span class="number">123</span>,<span class="number">0</span>) <span class="keyword">as</span> <span class="built_in">int</span>) % <span class="number">4</span> +<span class="number">1</span></span><br><span class="line"><span class="keyword">SELECT</span> @ProductID =  <span class="keyword">CAST</span>(<span class="keyword">ROUND</span>(<span class="keyword">RAND</span>(<span class="keyword">CAST</span>(NEWID() <span class="keyword">as</span> varbinary)) * <span class="number">123</span>,<span class="number">0</span>) <span class="keyword">as</span> <span class="built_in">int</span>) % <span class="number">5</span> +<span class="number">1</span></span><br><span class="line"><span class="keyword">SELECT</span> @ProdcutGroupID =  <span class="keyword">CAST</span>(<span class="keyword">ROUND</span>(<span class="keyword">RAND</span>(<span class="keyword">CAST</span>(NEWID() <span class="keyword">as</span> varbinary)) * <span class="number">731</span>,<span class="number">0</span>) <span class="keyword">as</span> <span class="built_in">int</span>) % <span class="number">20</span> +<span class="number">1</span></span><br><span class="line"></span><br><span class="line">;<span class="keyword">with</span> cte <span class="keyword">as</span>(</span><br><span class="line">	<span class="keyword">select</span> @<span class="keyword">from</span> <span class="keyword">as</span> <span class="keyword">num</span></span><br><span class="line">	<span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">	<span class="keyword">select</span> <span class="keyword">num</span> + <span class="number">1</span> <span class="keyword">as</span> <span class="keyword">num</span> <span class="keyword">from</span> cte </span><br><span class="line">	<span class="keyword">where</span> <span class="keyword">num</span> &lt; @<span class="keyword">from</span>+<span class="number">500</span></span><br><span class="line">) </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> @PriceLimit ([UserID],[StakeAmount],CategoryID,[ProductID],[ProdcutGroupID])</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">num</span>,<span class="number">100</span>,@CategoryID,@ProductID,@ProdcutGroupID</span><br><span class="line"><span class="keyword">from</span> cte</span><br><span class="line"><span class="keyword">option</span>(MAXRECURSION <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">exec  [dbo].[CalculateStake] @CategoryID,@ProductID,@ProdcutGroupID,@PriceLimit</span><br></pre></td></tr></table></figure></div>
<h2 id="使用SqlQueryStress重現問題"><a href="#使用SqlQueryStress重現問題" class="headerlink" title="使用SqlQueryStress重現問題"></a>使用SqlQueryStress重現問題</h2><p>基本script建立好後,我們可以利用<code>SqlQueryStress</code>來進行壓力測試.</p>
<ul>
<li>Number of Iterations 設定成 100</li>
<li>Number of Threads 設定成 100</li>
</ul>
<p>使用100 Thread,重複跑100次.</p>
<p>之後就可以重現Prod出現的Merge問題了,有了這個Baseline我們就可以開始進行優化改善了.</p>
<p><img src="https://i.imgur.com/XWELYJy.png" alt></p>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p><code>SqlQueryStress</code>這個工具可以很快速幫助我們模擬許多高併發問題,但在使用這工具時偶爾會遇到UI卡住或無法停止問題,這時候就需要強制停止應用程式.</p>
<p><strong>此文作者</strong>：Daniel Shih(石頭)<br><strong>此文地址</strong>： <a href="https://isdaniel.github.io/sqlquerystress-intro/">https://isdaniel.github.io/sqlquerystress-intro/</a> <br><strong>版權聲明</strong>：本博客所有文章除特別聲明外，均採用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC90dy8=" title="https://creativecommons.org/licenses/by-nc-sa/3.0/tw/">CC BY-NC-SA 3.0 TW<i class="fa fa-external-link"></i></span> 許可協議。轉載請註明出處！</p>
]]></content>
      <categories>
        <category>DataBase</category>
        <category>Turning</category>
      </categories>
      <tags>
        <tag>DataBase</tag>
        <tag>Turning</tag>
        <tag>sql-server</tag>
        <tag>Index</tag>
      </tags>
  </entry>
  <entry>
    <title>資料庫新增欄造成Page split</title>
    <url>/sqlserver-create-column-tips/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h2><p>使用<code>DB</code>新增欄位一般很快就可以執行完畢,但最近我們在prod新增一個<code>bit</code>欄位卻需要跑快45分鐘…</p>
<p>經後面追查找到原因才有本篇文章.</p>
<h3 id="問題重現"><a href="#問題重現" class="headerlink" title="問題重現"></a>問題重現</h3><p>下面語法會建立兩個Table.</p>
<ul>
<li><code>Test</code>：新增10,000,000筆Sample Data</li>
<li><code>TestSplit</code>：新增1,000,000筆Sample Data</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> [dbo].[<span class="keyword">Test</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [dbo].[<span class="keyword">Test</span>](</span><br><span class="line">	[<span class="keyword">ID</span>] [<span class="built_in">int</span>] <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">IDENTITY</span>(<span class="number">1</span>,<span class="number">1</span>),</span><br><span class="line">	[CustomerID] [<span class="built_in">VARCHAR</span>](<span class="number">40</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">	[col1] [<span class="built_in">VARCHAR</span>](<span class="number">100</span>) <span class="keyword">SPARSE</span> <span class="literal">NULL</span>,</span><br><span class="line">	[col2] [<span class="built_in">VARCHAR</span>](<span class="number">100</span>) <span class="keyword">SPARSE</span> <span class="literal">NULL</span>,</span><br><span class="line">	[col3] [<span class="built_in">VARCHAR</span>](<span class="number">100</span>) <span class="keyword">SPARSE</span> <span class="literal">NULL</span>,</span><br><span class="line">	[col4] [<span class="built_in">VARCHAR</span>](<span class="number">100</span>) <span class="keyword">SPARSE</span> <span class="literal">NULL</span>,</span><br><span class="line">	[CreateDate] [datetime2](<span class="number">3</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">) <span class="keyword">ON</span> [PRIMARY]</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> CLUSTERED <span class="keyword">INDEX</span> CIX_ID <span class="keyword">ON</span> [dbo].[<span class="keyword">Test</span>](<span class="keyword">ID</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> [dbo].[<span class="keyword">Test</span>] ([CustomerID],Col1,Col2,Col3,Col4,[CreateDate])</span><br><span class="line"><span class="keyword">SELECT</span> TOP <span class="number">10000000</span> </span><br><span class="line">	   <span class="keyword">REPLICATE</span>(<span class="string">'ABCD'</span>,<span class="number">10</span>),</span><br><span class="line">	   <span class="keyword">REPLICATE</span>(<span class="string">'A'</span>,<span class="number">100</span>),</span><br><span class="line">	   <span class="keyword">REPLICATE</span>(<span class="string">'B'</span>,<span class="number">100</span>),</span><br><span class="line">	   <span class="keyword">REPLICATE</span>(<span class="string">'C'</span>,<span class="number">100</span>),</span><br><span class="line">	   <span class="keyword">REPLICATE</span>(<span class="string">'D'</span>,<span class="number">100</span>),</span><br><span class="line">	   SYSDATETIME()</span><br><span class="line"><span class="keyword">FROM</span> sys.all_columns  c1</span><br><span class="line"><span class="keyword">CROSS</span> <span class="keyword">JOIN</span>  sys.all_columns c2</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> [dbo].[TestSplit]</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [dbo].[TestSplit](</span><br><span class="line">	[<span class="keyword">ID</span>] [<span class="built_in">int</span>] <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">IDENTITY</span>(<span class="number">1</span>,<span class="number">1</span>),</span><br><span class="line">	[CustomerID] [<span class="built_in">VARCHAR</span>](<span class="number">40</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">	[col1] [<span class="built_in">VARCHAR</span>](<span class="number">2000</span>) <span class="keyword">SPARSE</span> <span class="literal">NULL</span>,</span><br><span class="line">	[col2] [<span class="built_in">VARCHAR</span>](<span class="number">2000</span>) <span class="keyword">SPARSE</span> <span class="literal">NULL</span>,</span><br><span class="line">	[col3] [<span class="built_in">VARCHAR</span>](<span class="number">2000</span>) <span class="keyword">SPARSE</span> <span class="literal">NULL</span>,</span><br><span class="line">	[col4] [<span class="built_in">VARCHAR</span>](<span class="number">2000</span>) <span class="keyword">SPARSE</span> <span class="literal">NULL</span>,</span><br><span class="line">	[CreateDate] [datetime2](<span class="number">3</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">) <span class="keyword">ON</span> [PRIMARY]</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> CLUSTERED <span class="keyword">INDEX</span> CIX_ID <span class="keyword">ON</span> [dbo].[TestSplit](<span class="keyword">ID</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dbo.[TestSplit] ([CustomerID],Col1,Col2,Col3,Col4,[CreateDate])</span><br><span class="line"><span class="keyword">SELECT</span> TOP <span class="number">1000000</span> </span><br><span class="line">	   <span class="keyword">REPLICATE</span>(<span class="string">'ABCD'</span>,<span class="number">10</span>),</span><br><span class="line">	   <span class="keyword">REPLICATE</span>(<span class="string">'A'</span>,<span class="number">2000</span>),</span><br><span class="line">	   <span class="keyword">REPLICATE</span>(<span class="string">'B'</span>,<span class="number">2000</span>),</span><br><span class="line">	   <span class="keyword">REPLICATE</span>(<span class="string">'C'</span>,<span class="number">2000</span>),</span><br><span class="line">	   <span class="keyword">REPLICATE</span>(<span class="string">'D'</span>,<span class="number">2000</span>),</span><br><span class="line">	   SYSDATETIME()</span><br><span class="line"><span class="keyword">FROM</span> sys.all_columns  c1</span><br><span class="line"><span class="keyword">CROSS</span> <span class="keyword">JOIN</span>  sys.all_columns c2</span><br></pre></td></tr></table></figure></div>
<p>我們先在test table新增欄位語法如下</p>
<p>執行下面語法瞬間完成</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">IF COL_LENGTH('dbo.[Test]','Col6') IS NULL</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	<span class="keyword">ALTER</span> <span class="keyword">TABLE</span> dbo.Test</span><br><span class="line">    <span class="keyword">ADD</span> Col6 <span class="built_in">BIT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> </span><br><span class="line">	<span class="keyword">CONSTRAINT</span> DF_Test_Col6 <span class="keyword">DEFAULT</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure></div>
<p>但在執行<code>TestSplit</code>語法時跑很久…<br>在我電腦花了1分32秒</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">IF COL_LENGTH('dbo.TestSplit','Col6') IS NULL</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	<span class="keyword">ALTER</span> <span class="keyword">TABLE</span> dbo.TestSplit</span><br><span class="line">    <span class="keyword">ADD</span> Col6 <span class="built_in">BIT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> </span><br><span class="line">	<span class="keyword">CONSTRAINT</span> DF_TestSplit_Col6 <span class="keyword">DEFAULT</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure></div>
<p>明明<code>TestSplit</code> table比<code>Test</code> table資料少10倍,為什麼還比較慢?</p>
<p>這就要說到資料表底層的儲存原理.</p>
<h3 id="Table-size-is-8k-byte"><a href="#Table-size-is-8k-byte" class="headerlink" title="Table size is 8k byte"></a>Table size is 8k byte</h3><p>資料表儲存資料最小單位是<strong>頁</strong></p>
<p>一頁是存放8K Byte資料(準確來說是8060 byte,因為每頁有一些meta data需要存放).</p>
<p><code>Test</code>一筆資料大約500 byte,但<code>TestSplit</code>一筆快等於一頁資料…</p>
<p>我們知道一個row資料是連續放置,如果有欄位新增且此頁已經放不下此欄位大小資訊就會發生Page Split.</p>
<blockquote>
<p>Page split會影響系統效能,且當資料頁面不連續時會影響Disk IO讀取速度</p>
</blockquote>
<h2 id="產生問題和如何解決"><a href="#產生問題和如何解決" class="headerlink" title="產生問題和如何解決"></a>產生問題和如何解決</h2><p>我們在做DDL操作時會對於Table上<code>Sch-M</code>的lock，這個lock會和所有其他索互斥，所以會導致一大堆blocking，假如你新增欄位是對於一張大表那會有非常嚴重的後果…</p>
<p>可以嘗試建立另一張表並新增你想要的欄位和JOIN此表的條件，這樣可以避免線上產生問題，之後對於要使用的查詢可以使用<code>OUTER JOIN</code>或在背景把資料Patch完成.</p>
<p><strong>此文作者</strong>：Daniel Shih(石頭)<br><strong>此文地址</strong>： <a href="https://isdaniel.github.io/sqlserver-create-column-tips/">https://isdaniel.github.io/sqlserver-create-column-tips/</a> <br><strong>版權聲明</strong>：本博客所有文章除特別聲明外，均採用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC90dy8=" title="https://creativecommons.org/licenses/by-nc-sa/3.0/tw/">CC BY-NC-SA 3.0 TW<i class="fa fa-external-link"></i></span> 許可協議。轉載請註明出處！</p>
]]></content>
      <categories>
        <category>sql-server</category>
      </categories>
      <tags>
        <tag>sql-server</tag>
        <tag>column</tag>
        <tag>performance</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL Server Merge condition on declare value problem</title>
    <url>/sqlserver-merge-condition-problem/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>假如要判斷資料是否存在於資料表中,存在就更新,不存在就新增.</p>
<p>這時我們可以使用<code>Merge</code>來幫助我們完成.</p>
<blockquote>
<p>當兩個資料表有複雜的比對的特性時，<code>MERGE</code>陳述式的條件式行為表現最佳。</p>
</blockquote>
<p>有了<code>Merge</code>我們就不用使用<code>IF EXISTS</code>.</p>
<p>一切都是這麼完美…</p>
<p>直到到有一天<code>Merge</code>在Prod撞到一個問題..</p>
<h2 id="問題描述"><a href="#問題描述" class="headerlink" title="問題描述"></a>問題描述</h2><p>使用語法user defined table type &amp; Table如下</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [dbo].[PriceLimitation](</span><br><span class="line">	[CategoryID] [<span class="built_in">int</span>] <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">	[ProdcutGroupID] [<span class="built_in">smallint</span>] <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">	[UserID] [<span class="built_in">int</span>] <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">	[StakeAmount] [<span class="built_in">numeric</span>](<span class="number">18</span>, <span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">	[ProductID] [<span class="built_in">smallint</span>] <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"> <span class="keyword">CONSTRAINT</span> [PK_PriceLimitation] PRIMARY <span class="keyword">KEY</span> CLUSTERED </span><br><span class="line">(</span><br><span class="line">    [UserID] <span class="keyword">ASC</span>,</span><br><span class="line">	[CategoryID] <span class="keyword">ASC</span>,</span><br><span class="line">	[ProductID] <span class="keyword">ASC</span>,</span><br><span class="line">	[ProdcutGroupID] <span class="keyword">ASC</span></span><br><span class="line">)<span class="keyword">WITH</span> (PAD_INDEX = <span class="keyword">OFF</span>, STATISTICS_NORECOMPUTE = <span class="keyword">OFF</span>, IGNORE_DUP_KEY = <span class="keyword">OFF</span>, ALLOW_ROW_LOCKS = <span class="keyword">ON</span>, ALLOW_PAGE_LOCKS = <span class="keyword">ON</span>) <span class="keyword">ON</span> [PRIMARY]</span><br><span class="line">) <span class="keyword">ON</span> [PRIMARY]</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TYPE</span> [dbo].[uftt_PriceLimit] <span class="keyword">AS</span> <span class="keyword">TABLE</span>(</span><br><span class="line">	[CategoryID] [<span class="built_in">int</span>] <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">	[ProdcutGroupID] [<span class="built_in">smallint</span>] <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">	[UserID] [<span class="built_in">int</span>] <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">	[StakeAmount] [<span class="built_in">numeric</span>](<span class="number">18</span>, <span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">	[ProductID] [<span class="built_in">smallint</span>] <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">	PRIMARY <span class="keyword">KEY</span> CLUSTERED </span><br><span class="line">(</span><br><span class="line">	[UserID] <span class="keyword">ASC</span>,</span><br><span class="line">	[CategoryID] <span class="keyword">ASC</span>,</span><br><span class="line">	[ProductID] <span class="keyword">ASC</span>,</span><br><span class="line">	[ProdcutGroupID] <span class="keyword">ASC</span></span><br><span class="line">)<span class="keyword">WITH</span> (IGNORE_DUP_KEY = <span class="keyword">OFF</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></div>
<p>呼叫執行SP<code>[dbo].[CalculateLimitation]</code></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> <span class="keyword">ALTER</span> PROC [dbo].[CalculateStake]</span><br><span class="line">	@CategoryID <span class="built_in">int</span>,</span><br><span class="line">	@ProductID <span class="built_in">smallint</span> ,</span><br><span class="line">	@ProdcutGroupID <span class="built_in">smallint</span>,</span><br><span class="line">	@PriceLimit [uftt_PriceLimit] readonly</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	<span class="keyword">SET</span> NOCOUNT <span class="keyword">ON</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">MERGE</span> <span class="keyword">INTO</span> [dbo].[PriceLimitation] t1</span><br><span class="line">		<span class="keyword">USING</span> @PriceLimit t2</span><br><span class="line">		<span class="keyword">ON</span> t1.UserID = t2.UserID </span><br><span class="line">            <span class="keyword">AND</span> t1.ProdcutGroupID= @ProdcutGroupID</span><br><span class="line">            <span class="keyword">AND</span> t1.CategoryID=@CategoryID </span><br><span class="line">            <span class="keyword">AND</span> t1.ProductID = @ProductID</span><br><span class="line">	<span class="keyword">WHEN</span> <span class="keyword">MATCHED</span> <span class="keyword">THEN</span></span><br><span class="line">		<span class="keyword">UPDATE</span> <span class="keyword">SET</span> t1.StakeAmount = t1.StakeAmount + t2.StakeAmount</span><br><span class="line">	<span class="keyword">WHEN</span> <span class="keyword">NOT</span> <span class="keyword">MATCHED</span> <span class="keyword">THEN</span></span><br><span class="line">		<span class="keyword">INSERT</span> <span class="keyword">VALUES</span>(@CategoryID, @ProdcutGroupID, t2.UserID ,t2.StakeAmount, @ProductID);</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure></div>
<p>主要傳入參數判斷更新或新增<code>[dbo].[PriceLimitation]</code>表</p>
<p>我們在<code>ELK</code>發現在執行SP時<strong>很少概率</strong>會發生PRIMARY KEY重複問題.</p>
<blockquote>
<p>Violation of PRIMARY KEY constraint ‘PK_PriceLimitation’. Cannot insert duplicate key in object ‘dbo.PriceLimitation’.</p>
</blockquote>
<p>但這張表PK使用欄位都有正確在<code>Merge</code>條件上,所以當下我們嘗是在DEV重現此問題,但一直無法成功</p>
<p>後來發現此問題在<strong>高併發</strong>時才會發生,所以我們使用<span class="exturl" data-url="aHR0cHM6Ly93d3cubXNzcWx0aXBzLmNvbS9zcWxzZXJ2ZXJ0aXAvMjczMC9zcWwtcXVlcnktc3RyZXNzLXRvb2wv" title="https://www.mssqltips.com/sqlservertip/2730/sql-query-stress-tool/">Query Stress<i class="fa fa-external-link"></i></span>來幫助我們模擬高併發請求時的狀態.</p>
<h3 id="Query-Stress重現問題"><a href="#Query-Stress重現問題" class="headerlink" title="Query Stress重現問題"></a>Query Stress重現問題</h3><p>撰寫了模擬SQL並利用Query Stress重現問題.</p>
<p>模擬SQL腳本</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> @CategoryID <span class="built_in">int</span>,</span><br><span class="line">	@ProductID <span class="built_in">smallint</span> ,</span><br><span class="line">	@ProdcutGroupID <span class="built_in">smallint</span>,  </span><br><span class="line">    @PriceLimit [uftt_PriceLimit] </span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> @<span class="keyword">from</span> <span class="built_in">int</span></span><br><span class="line"><span class="keyword">SELECT</span> @<span class="keyword">from</span> = <span class="keyword">ROUND</span>(<span class="keyword">RAND</span>(<span class="keyword">CAST</span>(NEWID() <span class="keyword">as</span> varbinary)) * <span class="number">500</span>,<span class="number">0</span>)</span><br><span class="line"><span class="keyword">SELECT</span> @CategoryID =  <span class="keyword">CAST</span>(<span class="keyword">ROUND</span>(<span class="keyword">RAND</span>(<span class="keyword">CAST</span>(NEWID() <span class="keyword">as</span> varbinary)) * <span class="number">123</span>,<span class="number">0</span>) <span class="keyword">as</span> <span class="built_in">int</span>) % <span class="number">4</span> +<span class="number">1</span></span><br><span class="line"><span class="keyword">SELECT</span> @ProductID =  <span class="keyword">CAST</span>(<span class="keyword">ROUND</span>(<span class="keyword">RAND</span>(<span class="keyword">CAST</span>(NEWID() <span class="keyword">as</span> varbinary)) * <span class="number">123</span>,<span class="number">0</span>) <span class="keyword">as</span> <span class="built_in">int</span>) % <span class="number">5</span> +<span class="number">1</span></span><br><span class="line"><span class="keyword">SELECT</span> @ProdcutGroupID =  <span class="keyword">CAST</span>(<span class="keyword">ROUND</span>(<span class="keyword">RAND</span>(<span class="keyword">CAST</span>(NEWID() <span class="keyword">as</span> varbinary)) * <span class="number">731</span>,<span class="number">0</span>) <span class="keyword">as</span> <span class="built_in">int</span>) % <span class="number">20</span> +<span class="number">1</span></span><br><span class="line"></span><br><span class="line">;<span class="keyword">with</span> cte <span class="keyword">as</span>(</span><br><span class="line">	<span class="keyword">select</span> @<span class="keyword">from</span> <span class="keyword">as</span> <span class="keyword">num</span></span><br><span class="line">	<span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">	<span class="keyword">select</span> <span class="keyword">num</span> + <span class="number">1</span> <span class="keyword">as</span> <span class="keyword">num</span> <span class="keyword">from</span> cte </span><br><span class="line">	<span class="keyword">where</span> <span class="keyword">num</span> &lt; @<span class="keyword">from</span>+<span class="number">500</span></span><br><span class="line">) </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> @PriceLimit ([UserID],[StakeAmount],CategoryID,[ProductID],[ProdcutGroupID])</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">num</span>,<span class="number">100</span>,@CategoryID,@ProductID,@ProdcutGroupID</span><br><span class="line"><span class="keyword">from</span> cte</span><br><span class="line"><span class="keyword">option</span>(MAXRECURSION <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">exec  [dbo].[CalculateStake] @CategoryID,@ProductID,@ProdcutGroupID,@PriceLimit</span><br></pre></td></tr></table></figure></div>
<p>我使用模擬參數是</p>
<ul>
<li>Iterator:30</li>
<li>Thread:100</li>
</ul>
<p>來模擬高併發時資料庫請求狀況,就能發現這時已經會出現Prod的<code>Exception</code>.</p>
<p><img src="https://i.imgur.com/1RpWBYP.png" alt></p>
<h3 id="找到問題尋求解法"><a href="#找到問題尋求解法" class="headerlink" title="找到問題尋求解法"></a>找到問題尋求解法</h3><p>對於目前Prod問題已經邁出一大步了,因為現在問題可以重現,在網路上找了許多文章還是沒找到解法….</p>
<p>後面在MSDN時看到關鍵一段話,關於<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vemgtdHcvc3FsL3Qtc3FsL3N0YXRlbWVudHMvbWVyZ2UtdHJhbnNhY3Qtc3FsP3ZpZXc9c3FsLXNlcnZlci12ZXIxNQ==" title="https://docs.microsoft.com/zh-tw/sql/t-sql/statements/merge-transact-sql?view=sql-server-ver15">merge-transact-sql<i class="fa fa-external-link"></i></span>.</p>
<blockquote>
<p>請務必只從目標資料表指定用於比對用途的資料行。 也就是說，從目標資料表中指定要與來源資料表的對應資料行進行比較的資料行。 請勿嘗試在 ON 子句中篩選出目標資料表的資料列 (例如指定 <code>AND NOT target_table.column_x = value)</code> 來改善查詢效能。 這樣做可能會傳回非預期且不正確的結果。</p>
</blockquote>
<p>後面有看到有篇文章在介紹<span class="exturl" data-url="aHR0cHM6Ly9kYmEuc3RhY2tleGNoYW5nZS5jb20vcXVlc3Rpb25zLzE1NDUwOS91c2Utd2hlcmUtY2xhdXNlLXdpdGgtbWVyZ2U=" title="https://dba.stackexchange.com/questions/154509/use-where-clause-with-merge">use-where-clause-with-merge<i class="fa fa-external-link"></i></span></p>
<p>我就嘗試把sp寫法改成只利用兩個Table可以<code>JOIN</code>欄位當作條件,發現Duplicate PK問題就可以解決了….但發現另一個更麻煩問題.</p>
<p>SP改寫後</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> <span class="keyword">ALTER</span> PROC [dbo].[CalculateStake]</span><br><span class="line">	@CategoryID <span class="built_in">int</span>,</span><br><span class="line">	@ProductID <span class="built_in">smallint</span> ,</span><br><span class="line">	@ProdcutGroupID <span class="built_in">smallint</span>,</span><br><span class="line">	@PriceLimit [uftt_PriceLimit] readonly</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	<span class="keyword">SET</span> NOCOUNT <span class="keyword">ON</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">MERGE</span> <span class="keyword">INTO</span> [dbo].[PriceLimitation] t1</span><br><span class="line">		<span class="keyword">USING</span> @PriceLimit t2</span><br><span class="line">		<span class="keyword">ON</span> t1.UserID = t2.UserID </span><br><span class="line">	<span class="keyword">WHEN</span> <span class="keyword">MATCHED</span>   </span><br><span class="line">            <span class="keyword">AND</span> t1.ProdcutGroupID= @ProdcutGroupID</span><br><span class="line">            <span class="keyword">AND</span> t1.CategoryID=@CategoryID </span><br><span class="line">            <span class="keyword">AND</span> t1.ProductID = @ProductID </span><br><span class="line">            <span class="keyword">THEN</span></span><br><span class="line">		<span class="keyword">UPDATE</span> <span class="keyword">SET</span> t1.StakeAmount = t1.StakeAmount + t2.StakeAmount</span><br><span class="line">	<span class="keyword">WHEN</span> <span class="keyword">NOT</span> <span class="keyword">MATCHED</span> <span class="keyword">THEN</span></span><br><span class="line">		<span class="keyword">INSERT</span> <span class="keyword">VALUES</span>(@CategoryID, @ProdcutGroupID, t2.UserID ,t2.StakeAmount, @ProductID);</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure></div>
<p>新寫法的執行計畫在對於大資料表時會很沒效率….</p>
<h4 id="改寫後遇到的問題-不好的執行計畫"><a href="#改寫後遇到的問題-不好的執行計畫" class="headerlink" title="改寫後遇到的問題(不好的執行計畫)"></a>改寫後遇到的問題(不好的執行計畫)</h4><p>一般SP在執行過後都會把使用的執行計畫快取起來,所以我們可以透過DMV來查看執行執行計畫.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Cacheobjtype, Objtype, <span class="built_in">TEXT</span>, query_plan</span><br><span class="line"><span class="keyword">FROM</span> sys.dm_exec_cached_plans t1</span><br><span class="line"><span class="keyword">CROSS</span> <span class="keyword">APPLY</span> sys.dm_exec_sql_text(plan_handle) t2</span><br><span class="line"><span class="keyword">CROSS</span> <span class="keyword">APPLY</span> sys.dm_exec_query_plan(plan_handle) t3</span><br><span class="line"><span class="keyword">where</span> t2.objectid = object_id(<span class="string">'dbo.CalculateStake'</span>, <span class="string">'p'</span>)</span><br></pre></td></tr></table></figure></div>
<p>新和舊SP寫法執行計畫如下圖.</p>
<p>舊寫法</p>
<p><img src="https://i.imgur.com/ueY6efl.png" alt></p>
<p>新寫法</p>
<p><img src="https://i.imgur.com/gbPva4K.png" alt></p>
<p>造成上面差異原因，因為新寫法透過統計資訊使用效能較差的執行計畫(能看到上面使用<code>Merge Join</code>明明傳入結果集資料並不多)且在<code>WHEN MATCHED</code>進行第二次判斷…</p>
<p>所以效能就變很差,現在已經找到此問題點了，我就在思考那有沒有辦法兼具效能又可解決此問題呢?</p>
<h3 id="最終版SP寫法"><a href="#最終版SP寫法" class="headerlink" title="最終版SP寫法"></a>最終版SP寫法</h3><p>最後我就思考何不如把傳入參數全部加入<code>user defined table type</code></p>
<ol>
<li>這樣就可以利用傳入參數當作<code>ON</code>條件也可以得到精準執行計畫.</li>
<li><code>user defined table type</code>所有欄位可以跟Table的Clustered Index Match.</li>
</ol>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> proc[dbo].[CalculateStake]</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">type</span> [dbo].[uftt_PriceLimit] </span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TYPE</span> [dbo].[uftt_PriceLimit] <span class="keyword">AS</span> <span class="keyword">TABLE</span>(</span><br><span class="line">	[CategoryID] [<span class="built_in">int</span>] <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">	[ProdcutGroupID] [<span class="built_in">smallint</span>] <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">	[UserID] [<span class="built_in">int</span>] <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">	[StakeAmount] [<span class="built_in">numeric</span>](<span class="number">18</span>, <span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">	[ProductID] [<span class="built_in">smallint</span>] <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">	PRIMARY <span class="keyword">KEY</span> CLUSTERED </span><br><span class="line">(</span><br><span class="line">	[UserID] <span class="keyword">ASC</span>,</span><br><span class="line">	[CategoryID] <span class="keyword">ASC</span>,</span><br><span class="line">	[ProductID] <span class="keyword">ASC</span>,</span><br><span class="line">	[ProdcutGroupID] <span class="keyword">ASC</span></span><br><span class="line">)<span class="keyword">WITH</span> (IGNORE_DUP_KEY = <span class="keyword">OFF</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> <span class="keyword">ALTER</span> PROC [dbo].[CalculateStake]</span><br><span class="line">	@PriceLimit [uftt_PriceLimit] readonly</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	<span class="keyword">SET</span> NOCOUNT <span class="keyword">ON</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">MERGE</span> <span class="keyword">INTO</span> [dbo].[PriceLimitation] t1</span><br><span class="line">		<span class="keyword">USING</span> @PriceLimit t2</span><br><span class="line">		<span class="keyword">ON</span> t1.UserID = t2.UserID </span><br><span class="line">            <span class="keyword">AND</span> t1.ProdcutGroupID= t2.ProdcutGroupID</span><br><span class="line">            <span class="keyword">AND</span> t1.CategoryID=t2.CategoryID </span><br><span class="line">            <span class="keyword">AND</span> t1.ProductID =t2.ProductID</span><br><span class="line">	<span class="keyword">WHEN</span> <span class="keyword">MATCHED</span> <span class="keyword">THEN</span></span><br><span class="line">		<span class="keyword">UPDATE</span> <span class="keyword">SET</span> t1.StakeAmount = t1.StakeAmount + t2.StakeAmount</span><br><span class="line">	<span class="keyword">WHEN</span> <span class="keyword">NOT</span> <span class="keyword">MATCHED</span> <span class="keyword">THEN</span></span><br><span class="line">		<span class="keyword">INSERT</span> <span class="keyword">VALUES</span>(t2.CategoryID, t2.ProdcutGroupID, t2.UserID ,t2.StakeAmount, t2.ProductID);</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure></div>
<p>測試腳本改成把參數透過<code>uftt_PriceLimit</code>傳入</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> @CategoryID <span class="built_in">int</span>,</span><br><span class="line">	@ProductID <span class="built_in">smallint</span> ,</span><br><span class="line">	@ProdcutGroupID <span class="built_in">smallint</span>,  </span><br><span class="line">    @PriceLimit [uftt_PriceLimit] </span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> @<span class="keyword">from</span> <span class="built_in">int</span></span><br><span class="line"><span class="keyword">SELECT</span> @<span class="keyword">from</span> = <span class="keyword">ROUND</span>(<span class="keyword">RAND</span>(<span class="keyword">CAST</span>(NEWID() <span class="keyword">as</span> varbinary)) * <span class="number">500</span>,<span class="number">0</span>)</span><br><span class="line"><span class="keyword">SELECT</span> @CategoryID =  <span class="keyword">CAST</span>(<span class="keyword">ROUND</span>(<span class="keyword">RAND</span>(<span class="keyword">CAST</span>(NEWID() <span class="keyword">as</span> varbinary)) * <span class="number">123</span>,<span class="number">0</span>) <span class="keyword">as</span> <span class="built_in">int</span>) % <span class="number">4</span> +<span class="number">1</span></span><br><span class="line"><span class="keyword">SELECT</span> @ProductID =  <span class="keyword">CAST</span>(<span class="keyword">ROUND</span>(<span class="keyword">RAND</span>(<span class="keyword">CAST</span>(NEWID() <span class="keyword">as</span> varbinary)) * <span class="number">123</span>,<span class="number">0</span>) <span class="keyword">as</span> <span class="built_in">int</span>) % <span class="number">5</span> +<span class="number">1</span></span><br><span class="line"><span class="keyword">SELECT</span> @ProdcutGroupID =  <span class="keyword">CAST</span>(<span class="keyword">ROUND</span>(<span class="keyword">RAND</span>(<span class="keyword">CAST</span>(NEWID() <span class="keyword">as</span> varbinary)) * <span class="number">731</span>,<span class="number">0</span>) <span class="keyword">as</span> <span class="built_in">int</span>) % <span class="number">20</span> +<span class="number">1</span></span><br><span class="line"></span><br><span class="line">;<span class="keyword">with</span> cte <span class="keyword">as</span>(</span><br><span class="line">	<span class="keyword">select</span> @<span class="keyword">from</span> <span class="keyword">as</span> <span class="keyword">num</span></span><br><span class="line">	<span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">	<span class="keyword">select</span> <span class="keyword">num</span> + <span class="number">1</span> <span class="keyword">as</span> <span class="keyword">num</span> <span class="keyword">from</span> cte </span><br><span class="line">	<span class="keyword">where</span> <span class="keyword">num</span> &lt; @<span class="keyword">from</span>+<span class="number">500</span></span><br><span class="line">) </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> @PriceLimit ([UserID],[StakeAmount],CategoryID,[ProductID],[ProdcutGroupID])</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">num</span>,<span class="number">100</span>,@CategoryID,@ProductID,@ProdcutGroupID</span><br><span class="line"><span class="keyword">from</span> cte</span><br><span class="line"><span class="keyword">option</span>(MAXRECURSION <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">exec  [dbo].[CalculateStake] @PriceLimit</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>請在跑修改後的SP前記得把Table先Truncate掉，這樣可以更精準模擬</p>
</blockquote>
<p>使用QueryStress模擬參數</p>
<ul>
<li>Iterator:30</li>
<li>Thread:100</li>
</ul>
<p>執行結果如下</p>
<p><img src="https://i.imgur.com/fQMm2up.png" alt></p>
<p>利用<code>Query Stress</code>工具壓測發現問題解決且效能不會變差:)</p>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結:"></a>小結:</h2><p>沒想到<code>Merge</code>在<code>On</code>條件有些隱藏限制(對於On寫value condition官方只有說會有想不到的問題發生,並沒解釋原因為何…),但經過這次經驗我日後在使用<code>Merge</code>時不會直接在On使用value condition會在中間多墊一層<code>Table</code>這樣就可以使用<code>ON</code>來<code>JOIN</code>.</p>
<p>另外<code>QueryStress</code>真是一個對於DB壓測找問題的好工具,推薦大家去了解使用</p>
<p><strong>此文作者</strong>：Daniel Shih(石頭)<br><strong>此文地址</strong>： <a href="https://isdaniel.github.io/sqlserver-merge-condition-problem/">https://isdaniel.github.io/sqlserver-merge-condition-problem/</a> <br><strong>版權聲明</strong>：本博客所有文章除特別聲明外，均採用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC90dy8=" title="https://creativecommons.org/licenses/by-nc-sa/3.0/tw/">CC BY-NC-SA 3.0 TW<i class="fa fa-external-link"></i></span> 許可協議。轉載請註明出處！</p>
]]></content>
      <categories>
        <category>SQL-Server</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>SQL-Server</tag>
        <tag>Merge</tag>
      </tags>
  </entry>
  <entry>
    <title>影響Query Optimizer產生執行計畫的關鍵(統計值)</title>
    <url>/sqlserver-statistics/</url>
    <content><![CDATA[<h2 id="什麼是統計值"><a href="#什麼是統計值" class="headerlink" title="什麼是統計值"></a>什麼是統計值</h2><p>SQL Server的QO(Query Optimizer)透過<code>cost-based model</code>來選擇一個最合適計畫(估算成本最低)來執行查詢</p>
<blockquote>
<p>　注意每個執行計畫是使用CPU來做估算，使用過的執行計畫一般會Cache起來已便下次使用</p>
</blockquote>
<p>QO會依照基數估計(Cardinality estimation)來產生執行計畫，基數估計扮演一個很重要的角色</p>
<p>SQL Server統計值是對於每個Index或欄位資料分布做紀錄，任何型態都支援統計值資料.</p>
<p>過期的統計值資料導致QO誤判產生不良執行計畫</p>
<p>在我們建立<code>Index</code>時，統計值會自動創建。此外當欄位在查詢裡被使用(作為WHERE條件的一部分,group by子句,join條件)統計值會被自動建立</p>
<h3 id="何時建立統計值"><a href="#何時建立統計值" class="headerlink" title="何時建立統計值?"></a>何時建立統計值?</h3><p>每個索引都會有自己個統計資訊，在<code>UI</code>查看統計資訊如下圖.</p>
<p><img src="https://i.imgur.com/7TiCaUh.png" alt></p>
<p>如果查詢條件欄位沒有統計值，<code>Query Optimizer</code>會在編譯前將<strong>統計值建立或有門檻條件性的更新</strong>。</p>
<p>如下圖我們使用<code>C3</code>沒有建立索引欄位來查詢，SQL-Server就會幫我們自動產生<code>_WA_Sys_00000003_6EF57B66</code>這個統計資訊來讓<code>QO</code>產生執行計畫時有個依據.</p>
<p><img src="https://i.imgur.com/WYcY8VW.png" alt></p>
<h2 id="查詢資料表統計值-amp-了解統計值欄位含意"><a href="#查詢資料表統計值-amp-了解統計值欄位含意" class="headerlink" title="查詢資料表統計值 &amp; 了解統計值欄位含意"></a>查詢資料表統計值 &amp; 了解統計值欄位含意</h2><p>想要查詢資料表索引的統計值可以輸入<code>DBCC SHOW_STATISTICS</code>，第一個參數是查詢資料表，第二個參數是查詢的索引或統計值.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">DBCC SHOW_STATISTICS('dbo.posts','PK_Posts')</span><br></pre></td></tr></table></figure></div>
<p>使用上語法查詢會出現三個結果集</p>
<p><img src="https://i.imgur.com/0IKcsNG.png" alt></p>
<p>第一個結果集</p>
<p>顯示出此統計值的基本資訊其中有幾個重要的欄位</p>
<ul>
<li>最後更新時間</li>
<li>密度</li>
<li>統計值Key的欄位大小</li>
</ul>
<p>第二個結果集</p>
<p>密度分布,使用常數查詢,直接使用子方圖進行資料筆數估計</p>
<p>第三個結果集</p>
<p><code>RANGE_HI_KEY</code>:每個區域資料的分佈。<br><code>RANGE_ROWS</code>:上圖列出(120 + 1) ~(126)區間的Row是57.175筆資料<br><code>EQ_ROWS</code>:代表這個區間值。<br><code>DISTINCT_RANGE_ROWS</code>:代表這個區間裏面有幾個特殊/單一(Unique)值。<br><code>AVG_RANGE_ROWS</code>:代表這個區間每個特殊值平均有幾筆</p>
<h3 id="觸發統計值更新"><a href="#觸發統計值更新" class="headerlink" title="觸發統計值更新"></a>觸發統計值更新</h3><p>假如有設定自動更新統計值，異動資料筆數超過 (500 + 20%)資料，會觸發統計值更新</p>
<blockquote>
<p>如果是大資料表容易造成統計值不準確，因為要達到自動更新門檻有點困難</p>
</blockquote>
<p>在SQL2017之前版本建議啟用TF2371，可以讓自動更新統計值的門檻數量變平滑點</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">DBCC TRACEON (2371,-1)</span><br></pre></td></tr></table></figure></div>
<p>啟動後大資料就不會只使用(500 + 20%)條件來更新統計值，會依照資料表筆數來判斷(如下圖)</p>
<p><img src="https://www.virtual-dba.com/media/sql-server-chart.jpg" alt="image alt"></p>
<blockquote>
<p>假如使用執行計畫(估計值)很不準確可以查看，當前的統計值是否是正確</p>
</blockquote>
<p>如果要更新統計值可以使用下面語法.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">STATISTICS</span> dbo.T1;  <span class="comment">--更新統計值</span></span><br><span class="line">DBCC SHOW_STATISTICS ('dbo.T1', idx1) <span class="comment">--顯示統計值</span></span><br></pre></td></tr></table></figure></div>
<h3 id="刪除重複統計值資料"><a href="#刪除重複統計值資料" class="headerlink" title="刪除重複統計值資料"></a>刪除重複統計值資料</h3><p>我們在建立索引，在下次查詢時<code>SQL-Server</code>會幫我們建立索引的統計值資料,這時候之前建立資料變得是多餘的就可以利用下面<code>Script</code>找尋是否有<strong>同個欄位擁有重複統計值</strong>，可建立刪除<code>Script</code></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">WITH</span>    autostats(object_id, stats_id, <span class="keyword">name</span>, column_id)</span><br><span class="line"><span class="keyword">AS</span> (</span><br><span class="line"><span class="keyword">SELECT</span>  sys.stats.object_id ,</span><br><span class="line">        sys.stats.stats_id ,</span><br><span class="line">        sys.stats.name ,</span><br><span class="line">        sys.stats_columns.column_id</span><br><span class="line"><span class="keyword">FROM</span>    sys.stats</span><br><span class="line">        <span class="keyword">INNER</span> <span class="keyword">JOIN</span> sys.stats_columns <span class="keyword">ON</span> sys.stats.object_id = sys.stats_columns.object_id</span><br><span class="line">                                        <span class="keyword">AND</span> sys.stats.stats_id = sys.stats_columns.stats_id</span><br><span class="line"><span class="keyword">WHERE</span>   sys.stats.auto_created = <span class="number">1</span></span><br><span class="line">        <span class="keyword">AND</span> sys.stats_columns.stats_column_id = <span class="number">1</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">SELECT</span>  OBJECT_NAME(sys.stats.object_id) <span class="keyword">AS</span> [<span class="keyword">Table</span>] ,</span><br><span class="line">		sys.columns.name <span class="keyword">AS</span> [<span class="keyword">Column</span>] ,</span><br><span class="line">		sys.stats.name <span class="keyword">AS</span> [Overlapped] ,</span><br><span class="line">		autostats.name <span class="keyword">AS</span> [Overlapping] ,</span><br><span class="line">		<span class="string">'DROP STATISTICS ['</span> + OBJECT_SCHEMA_NAME(sys.stats.object_id) + <span class="string">'].['</span> + OBJECT_NAME(sys.stats.object_id) + <span class="string">'].['</span> + autostats.name + <span class="string">']'</span></span><br><span class="line"><span class="keyword">FROM</span>    sys.stats</span><br><span class="line">		<span class="keyword">INNER</span> <span class="keyword">JOIN</span> sys.stats_columns <span class="keyword">ON</span> sys.stats.object_id = sys.stats_columns.object_id</span><br><span class="line">										<span class="keyword">AND</span> sys.stats.stats_id = sys.stats_columns.stats_id</span><br><span class="line">		<span class="keyword">INNER</span> <span class="keyword">JOIN</span> autostats <span class="keyword">ON</span> sys.stats_columns.object_id = autostats.object_id</span><br><span class="line">								<span class="keyword">AND</span> sys.stats_columns.column_id = autostats.column_id</span><br><span class="line">		<span class="keyword">INNER</span> <span class="keyword">JOIN</span> sys.columns <span class="keyword">ON</span> sys.stats.object_id = sys.columns.object_id</span><br><span class="line">									<span class="keyword">AND</span> sys.stats_columns.column_id = sys.columns.column_id</span><br><span class="line"><span class="keyword">WHERE</span>   sys.stats.auto_created = <span class="number">0</span></span><br><span class="line">		<span class="keyword">AND</span> sys.stats_columns.stats_column_id = <span class="number">1</span></span><br><span class="line">		<span class="keyword">AND</span> sys.stats_columns.stats_id != autostats.stats_id</span><br><span class="line">		<span class="keyword">AND</span> OBJECTPROPERTY(sys.stats.object_id, <span class="string">'IsMsShipped'</span>) = <span class="number">0</span>;</span><br></pre></td></tr></table></figure></div>
<h3 id="統計值和查詢記憶體分配"><a href="#統計值和查詢記憶體分配" class="headerlink" title="統計值和查詢記憶體分配"></a>統計值和查詢記憶體分配</h3><p>SQL-Server查詢不同操作有不同的記憶體分配方式,例如<code>Index Scan</code>不用把資料存在記憶體中(因為一筆一筆取出就可以),但如果是使用<code>Sort</code>相關的操作,需要在執行前訪問rowset</p>
<p><code>SQL-Server</code>會依照統計值來分配合適的記憶體大小,假如統計值不准會導致記憶體分配不對,就會把資料存在TempDb造成查詢效能低落.</p>
<p>下面這個範例來演示上面所說的</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> dbo.MemoryGrantDemo </span><br><span class="line">( </span><br><span class="line">    <span class="keyword">ID</span> <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span>, </span><br><span class="line">    <span class="keyword">Col</span> <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span>, </span><br><span class="line">    Placeholder <span class="built_in">char</span>(<span class="number">8000</span>) </span><br><span class="line">); </span><br><span class="line"> </span><br><span class="line"><span class="keyword">create</span> <span class="keyword">unique</span> clustered <span class="keyword">index</span> IDX_MemoryGrantDemo_ID </span><br><span class="line"> <span class="keyword">on</span> dbo.MemoryGrantDemo(<span class="keyword">ID</span>); </span><br><span class="line"></span><br><span class="line"> ;<span class="keyword">with</span> N1(C) <span class="keyword">as</span> (<span class="keyword">select</span> <span class="number">0</span> <span class="keyword">union</span> <span class="keyword">all</span> <span class="keyword">select</span> <span class="number">0</span>) <span class="comment">-- 2 rows </span></span><br><span class="line"> ,N2(C) <span class="keyword">as</span> (<span class="keyword">select</span> <span class="number">0</span> <span class="keyword">from</span> N1 <span class="keyword">as</span> T1 <span class="keyword">cross</span> <span class="keyword">join</span> N1 <span class="keyword">as</span> T2) <span class="comment">-- 4 rows </span></span><br><span class="line"> ,N3(C) <span class="keyword">as</span> (<span class="keyword">select</span> <span class="number">0</span> <span class="keyword">from</span> N2 <span class="keyword">as</span> T1 <span class="keyword">cross</span> <span class="keyword">join</span> N2 <span class="keyword">as</span> T2) <span class="comment">-- 16 rows </span></span><br><span class="line"> ,N4(C) <span class="keyword">as</span> (<span class="keyword">select</span> <span class="number">0</span> <span class="keyword">from</span> N3 <span class="keyword">as</span> T1 <span class="keyword">cross</span> <span class="keyword">join</span> N3 <span class="keyword">as</span> T2) <span class="comment">-- 256 rows </span></span><br><span class="line"> ,N5(C) <span class="keyword">as</span> (<span class="keyword">select</span> <span class="number">0</span> <span class="keyword">from</span> N4 <span class="keyword">as</span> T1 <span class="keyword">cross</span> <span class="keyword">join</span> N4 <span class="keyword">as</span> T2) <span class="comment">-- 65,536 rows </span></span><br><span class="line"> ,IDs(<span class="keyword">ID</span>) <span class="keyword">as</span> (<span class="keyword">select</span> row_number() <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> (<span class="keyword">select</span> <span class="literal">null</span>)) <span class="keyword">from</span> N5) </span><br><span class="line"> <span class="keyword">insert</span> <span class="keyword">into</span> dbo.MemoryGrantDemo(<span class="keyword">ID</span>,<span class="keyword">Col</span>,Placeholder) </span><br><span class="line">     <span class="keyword">select</span> <span class="keyword">ID</span>, <span class="keyword">ID</span> % <span class="number">100</span>, <span class="keyword">convert</span>(<span class="built_in">char</span>(<span class="number">100</span>),<span class="keyword">ID</span>) <span class="keyword">from</span> IDs; </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">create</span> nonclustered <span class="keyword">index</span> IDX_MemoryGrantDemo_Col </span><br><span class="line"> <span class="keyword">on</span> dbo.MemoryGrantDemo(<span class="keyword">Col</span>);</span><br></pre></td></tr></table></figure></div>
<p>建立一張表<code>MemoryGrantDemo</code>並建立<code>Clustered Index</code>跟新增65,536筆資料<code>Col</code>介於1~100之間,最後在建立一個<code>NonClustered Index</code></p>
<blockquote>
<p><code>Col</code>介於1~100之間會有統計值</p>
</blockquote>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line">;<span class="keyword">with</span> N1(C) <span class="keyword">as</span> (<span class="keyword">select</span> <span class="number">0</span> <span class="keyword">union</span> <span class="keyword">all</span> <span class="keyword">select</span> <span class="number">0</span>) <span class="comment">-- 2 rows </span></span><br><span class="line">,N2(C) <span class="keyword">as</span> (<span class="keyword">select</span> <span class="number">0</span> <span class="keyword">from</span> N1 <span class="keyword">as</span> T1 <span class="keyword">cross</span> <span class="keyword">join</span> N1 <span class="keyword">as</span> T2) <span class="comment">-- 4 rows </span></span><br><span class="line">,N3(C) <span class="keyword">as</span> (<span class="keyword">select</span> <span class="number">0</span> <span class="keyword">from</span> N2 <span class="keyword">as</span> T1 <span class="keyword">cross</span> <span class="keyword">join</span> N2 <span class="keyword">as</span> T2) <span class="comment">-- 16 rows </span></span><br><span class="line">,N4(C) <span class="keyword">as</span> (<span class="keyword">select</span> <span class="number">0</span> <span class="keyword">from</span> N3 <span class="keyword">as</span> T1 <span class="keyword">cross</span> <span class="keyword">join</span> N3 <span class="keyword">as</span> T2) <span class="comment">-- 256 rows </span></span><br><span class="line">,N5(C) <span class="keyword">as</span> (<span class="keyword">select</span> <span class="number">0</span> <span class="keyword">from</span> N4 <span class="keyword">as</span> T1 <span class="keyword">cross</span> <span class="keyword">join</span> N2 <span class="keyword">as</span> T2) <span class="comment">-- 1,024 rows </span></span><br><span class="line">,IDs(<span class="keyword">ID</span>) <span class="keyword">as</span> (<span class="keyword">select</span> row_number() <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> (<span class="keyword">select</span> <span class="literal">null</span>)) <span class="keyword">from</span> N5) </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dbo.MemoryGrantDemo(<span class="keyword">ID</span>,<span class="keyword">Col</span>,Placeholder) </span><br><span class="line">    <span class="keyword">select</span> <span class="number">100000</span> + <span class="keyword">ID</span>, <span class="number">1000</span>, <span class="keyword">convert</span>(<span class="built_in">char</span>(<span class="number">100</span>),<span class="keyword">ID</span>) </span><br><span class="line">    <span class="keyword">from</span> IDs </span><br><span class="line">    <span class="keyword">where</span> <span class="keyword">ID</span> &lt;= <span class="number">656</span>;</span><br></pre></td></tr></table></figure></div>
<p>最後在新增<code>Col = 1000</code>的<code>656</code>筆資料</p>
<blockquote>
<p>因為只有新增<code>656</code>只有原本的1%所以不會觸法更新統計值</p>
</blockquote>
<p>如下圖能看到<code>IDX_MemoryGrantDemo_Col</code>並沒有<code>Col=1000</code>的資訊</p>
<p><img src="https://i.imgur.com/FTykGu7.png" alt></p>
<p>建立好資料後我們使用<code>statistics</code>和打開執行計畫來看看兩者差別</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">declare</span> </span><br><span class="line">     @Dummy <span class="built_in">int</span> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">set</span> <span class="keyword">statistics</span> <span class="built_in">time</span> <span class="keyword">on</span> </span><br><span class="line"> <span class="keyword">select</span> @Dummy = <span class="keyword">ID</span> <span class="keyword">from</span> dbo.MemoryGrantDemo <span class="keyword">where</span> <span class="keyword">Col</span> = <span class="number">1</span> <span class="keyword">order</span> <span class="keyword">by</span> Placeholder; </span><br><span class="line"> <span class="keyword">select</span> @Dummy = <span class="keyword">ID</span> <span class="keyword">from</span> dbo.MemoryGrantDemo <span class="keyword">where</span> <span class="keyword">Col</span> = <span class="number">1000</span> <span class="keyword">order</span> <span class="keyword">by</span> Placeholder; </span><br><span class="line"> <span class="keyword">set</span> <span class="keyword">statistics</span> <span class="built_in">time</span> <span class="keyword">off</span></span><br></pre></td></tr></table></figure></div>
<p>在執行計畫中看到第二個查詢有個驚嘆號,移過去看可以發現查詢出來的資料寫入TempDb中</p>
<p><img src="https://i.imgur.com/fTAZq1T.png" alt></p>
<p>[訊息]中能看到第二個查詢語法使用時間比較長</p>
<p><img src="https://i.imgur.com/Pjk1vTs.png" alt></p>
<blockquote>
<p>因為SQL-Server依照統計值分配記憶體大小,所以會把統計值預估外資料搬到tempdb資料庫</p>
</blockquote>
<p><strong>此文作者</strong>：Daniel Shih(石頭)<br><strong>此文地址</strong>： <a href="https://isdaniel.github.io/sqlserver-statistics/">https://isdaniel.github.io/sqlserver-statistics/</a> <br><strong>版權聲明</strong>：本博客所有文章除特別聲明外，均採用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC90dy8=" title="https://creativecommons.org/licenses/by-nc-sa/3.0/tw/">CC BY-NC-SA 3.0 TW<i class="fa fa-external-link"></i></span> 許可協議。轉載請註明出處！</p>
]]></content>
      <categories>
        <category>DataBase</category>
        <category>Turning</category>
      </categories>
      <tags>
        <tag>DataBase</tag>
        <tag>Turning</tag>
        <tag>sql-server</tag>
      </tags>
  </entry>
  <entry>
    <title>State Pattern(狀態者模式)</title>
    <url>/statuspattern/</url>
    <content><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>狀態者模式</p>
<p>優勢在可將複雜的物件狀態條件,以物件方式來減少條件式的判斷程式</p>
<p>可由物件自身的狀態，決定之後的動作行為.</p>
<h2 id="狀態者模式-說明："><a href="#狀態者模式-說明：" class="headerlink" title="狀態者模式 說明："></a>狀態者模式 說明：</h2><p>需求簡易流程如下</p>
<p>這是一個簡單的訂單流程圖</p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/九桃/c83df7da-1425-4410-9df3-a45bf9e35c1a/1542429110_98117.png" alt></p>
<p>我們可看到從建立訂單開始-&gt;最後判斷成功或取消訂單 看似簡單但需要寫一定程度的判斷條件式,而且也要做一定程度的逆向流程防呆.</p>
<p>這裡先貼上 未使用狀態者模式的程式碼: <code>PaymentContext.cs</code></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PaymentContext</span></span><br><span class="line">&#123;</span><br><span class="line">    Product _Item &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    PayStatus _status &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PaymentContext</span>(<span class="params">Product p</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        _Item = p;</span><br><span class="line">        _status = PayStatus.Init;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 設置狀態</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="status"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">SetStatus</span>(<span class="params">PayStatus status</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">string</span> result = <span class="string">$"修改成功<span class="subst">&#123;status.ToString()&#125;</span>"</span>;</span><br><span class="line">        <span class="keyword">switch</span> (_status)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> PayStatus.Init:</span><br><span class="line">                <span class="keyword">if</span> (status == PayStatus.Init)</span><br><span class="line">                    result = <span class="string">"請勿重新建立訂單"</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    _status = status;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> PayStatus.Success:</span><br><span class="line">                result = <span class="string">"訂單成功請勿修改"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> PayStatus.Cancel:</span><br><span class="line">                result = <span class="string">"訂單取消請勿修改"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> PayStatus.Processing:</span><br><span class="line">                <span class="keyword">if</span> (status == PayStatus.Init)</span><br><span class="line">                    result = <span class="string">"請勿重新建立訂單"</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    _status = status;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 跑流程</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">RunProcess</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (_status)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> PayStatus.Init:</span><br><span class="line">                _status = PayStatus.Processing;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"交易建立中..."</span>;</span><br><span class="line">            <span class="keyword">case</span> PayStatus.Success:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"交易完成"</span>;</span><br><span class="line">            <span class="keyword">case</span> PayStatus.Cancel:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"交易取消完成"</span>;</span><br><span class="line">            <span class="keyword">case</span> PayStatus.Processing:</span><br><span class="line">                <span class="keyword">if</span> (_Item.Price &gt; <span class="number">300</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    _status = PayStatus.Cancel;</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">"物件超過300元 交易取消中"</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                _status = PayStatus.Success;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"交易中請稍後"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"不在狀態內"</span>;        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>裡面有<code>SetStatus</code> 和 <code>RunProcess</code> 方法</p>
<ol>
<li>RunProcess 方法 就是將商品一個往下一個流程推進</li>
<li>SetStatus 方法 可以改變商品狀態</li>
</ol>
<p>上面類別中的程式碼 目前有點小複雜但還算簡單,但等日後需求越來越多 後人一直把程式碼寫入<code>Switch case</code> 或<code>if ... else</code> 中就會導致程式碼越來越複雜</p>
<p>這個情境我們可以嘗試使用 State Pattern(狀態者模式)</p>
<blockquote>
<p>幫助我們將每個自身狀態封裝到物件裡面,由每個狀態來決定後面動作</p>
</blockquote>
<p>我們可發現 每個流程都可以使用 <code>RunningProcee</code> 和 <code>SetSatus</code> 這兩個動作  </p>
<p>就可開出一個抽象類別,裡面有這兩個抽象方法,給之後的狀態子類去實現.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">PaymentSatusBase</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">protected</span> PaymentGate _gate;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">string</span> <span class="title">Running</span>(<span class="params">Product p</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">string</span> <span class="title">SetSatus</span>(<span class="params">PayStatus s</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><code>PaymentGate</code> 是給外部呼叫端使用的類別,我們可比較上面之前<code>PaymentContext</code>類別可看到<code>if....else</code> 全部不見了,</p>
<p>因為狀態封裝到各個類別中了</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PaymentGate</span></span><br><span class="line">&#123;</span><br><span class="line">    Product _product;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">internal</span> PaymentSatusBase CurrnetProceess &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; <span class="comment">// 這裡擁有下個流程的引用</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PaymentGate</span>(<span class="params">Product p</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        _product = p;</span><br><span class="line">        CurrnetProceess = <span class="keyword">new</span> InitSatus(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">internal</span> PayStatus CurrnetStatus &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 設置狀態</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="status"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">SetStatus</span>(<span class="params">PayStatus status</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> CurrnetProceess.SetSatus(status);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 跑流程</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">RunProcess</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> CurrnetProceess.Running(_product);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="如何新建一個流程物件"><a href="#如何新建一個流程物件" class="headerlink" title="如何新建一個流程物件?"></a>如何新建一個流程物件?</h2><ol>
<li>首先我們需要先取得當前使用者使用的 <code>PaymentGate</code>引用並傳入建構子當作參數</li>
<li>實現Running和SetStatus方法,並將此狀態的邏輯寫上</li>
<li>執行完後需要更改下個流程,可以將值賦予給<code>CurrnetProceess</code> 屬性</li>
</ol>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ProcessSatus</span> : <span class="title">PaymentSatusBase</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProcessSatus</span>(<span class="params">PaymentGate g</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        _gate = g;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">string</span> <span class="title">Running</span>(<span class="params">Product p</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">string</span> result = <span class="string">"交易中請稍後"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (p.Price &gt; <span class="number">300</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            result = <span class="string">"物件超過300元 交易取消中"</span>;</span><br><span class="line">            _gate.CurrnetProceess = <span class="keyword">new</span> CancelSatus(_gate);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            _gate.CurrnetProceess = <span class="keyword">new</span> SuccessSatus(_gate);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">string</span> <span class="title">SetSatus</span>(<span class="params">PayStatus s</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">string</span> result = <span class="keyword">string</span>.Empty;</span><br><span class="line">        <span class="keyword">if</span> (s == PayStatus.Init)</span><br><span class="line">            result = <span class="string">"請勿重新建立訂單"</span>;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="說明"><a href="#說明" class="headerlink" title="說明:"></a>說明:</h3><p>以流程進行中為例子.</p>
<p>他會判斷商品使用超過300元,來決定下個流程 所以我們就把這個邏輯寫在此類中.  </p>
<p>另外後面幾個流程比照辦理一一搬入類別中</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CancelSatus</span> : <span class="title">PaymentSatusBase</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CancelSatus</span>(<span class="params">PaymentGate g</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        _gate = g;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">string</span> <span class="title">Running</span>(<span class="params">Product p</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"交易取消完成"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">string</span> <span class="title">SetSatus</span>(<span class="params">PayStatus s</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">string</span> result = <span class="keyword">string</span>.Empty;</span><br><span class="line">        <span class="keyword">if</span> (s == PayStatus.Init)</span><br><span class="line">            result = <span class="string">"訂單取消請勿修改"</span>;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SuccessSatus</span> : <span class="title">PaymentSatusBase</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SuccessSatus</span>(<span class="params">PaymentGate g</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        _gate = g;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">string</span> <span class="title">Running</span>(<span class="params">Product p</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"交易完成"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">string</span> <span class="title">SetSatus</span>(<span class="params">PayStatus s</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">string</span> result = <span class="keyword">string</span>.Empty;</span><br><span class="line">        <span class="keyword">if</span> (s == PayStatus.Init)</span><br><span class="line">            result = <span class="string">"訂單成功請勿修改"</span>;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>最後外部程式使用如下</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSHARP"><figure class="iseeu highlight /csharp"><table><tr><td class="code"><pre><span class="line">Product p = <span class="keyword">new</span> Product();</span><br><span class="line">p.Name = <span class="string">"電腦"</span>;</span><br><span class="line">p.Price = <span class="number">300000</span>;</span><br><span class="line"></span><br><span class="line">PaymentGate context = <span class="keyword">new</span> PaymentGate(p);</span><br><span class="line">Console.WriteLine(context.RunProcess());</span><br><span class="line">Console.WriteLine(context.RunProcess());</span><br><span class="line">Console.WriteLine(context.RunProcess());</span><br><span class="line">context.SetStatus(PayStatus.Init);</span><br><span class="line">Console.WriteLine(context.RunProcess());</span><br></pre></td></tr></table></figure></div>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2lzZGFuaWVsL0Rlc2lnblBhdHRlcm4vdHJlZS9tYXN0ZXIvRGVzaWduUGF0dGVybi9TdGF0ZVBhdHRlcm4=" title="https://github.com/isdaniel/DesignPattern/tree/master/DesignPattern/StatePattern">程式碼放在github上<i class="fa fa-external-link"></i></span></p>
<p><strong>此文作者</strong>：Daniel Shih(石頭)<br><strong>此文地址</strong>： <a href="https://isdaniel.github.io/statuspattern/">https://isdaniel.github.io/statuspattern/</a> <br><strong>版權聲明</strong>：本博客所有文章除特別聲明外，均採用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC90dy8=" title="https://creativecommons.org/licenses/by-nc-sa/3.0/tw/">CC BY-NC-SA 3.0 TW<i class="fa fa-external-link"></i></span> 許可協議。轉載請註明出處！</p>
]]></content>
      <categories>
        <category>C#</category>
        <category>DesignPattern</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>DesignPattern</tag>
        <tag>StatePattern</tag>
      </tags>
  </entry>
  <entry>
    <title>那些年String.Format中的Boxing和UnBoxing</title>
    <url>/stringformat-compare/</url>
    <content><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>下面有兩個虛擬程式碼</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> times = <span class="number">30000000</span>;</span><br><span class="line"><span class="keyword">string</span> s = <span class="keyword">string</span>.Empty;</span><br><span class="line"></span><br><span class="line">s = <span class="string">$"<span class="subst">&#123;times&#125;</span>"</span>;</span><br><span class="line">s = <span class="string">$"<span class="subst">&#123;times.ToString()&#125;</span>"</span>;</span><br></pre></td></tr></table></figure>
<p>請問下面這兩段程式碼有沒有差別?</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">s = <span class="string">$"<span class="subst">&#123;times&#125;</span>"</span>;</span><br><span class="line">s = <span class="string">$"<span class="subst">&#123;times.ToString()&#125;</span>"</span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>$&quot;&quot;</code>這個程式碼是<code>string.Format()</code>語法糖</p>
</blockquote>
<p>如果知道差別的同學,恭喜你已經可以下課了</p>
<p>如果不知道差別也沒關係,讓我細細講述.</p>
<h2 id="String-Format方法簽章"><a href="#String-Format方法簽章" class="headerlink" title="String.Format方法簽章"></a>String.Format方法簽章</h2><p>在<code>String.Format</code>方法有一個重載方法,可以看到裡面吃參數是<code>params object[]</code>這可以讓我們傳進東西當作參數(他會在方法中呼叫<code>ToString</code>方法).</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">Format</span>(<span class="params"><span class="keyword">string</span> format, <span class="keyword">params</span> <span class="keyword">object</span>[] args</span>)</span></span><br></pre></td></tr></table></figure>
<p>所以這段程式碼看起來應該是要一樣,但事實並非如此…</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">s = <span class="string">$"<span class="subst">&#123;times&#125;</span>"</span>;</span><br><span class="line">s = <span class="string">$"<span class="subst">&#123;times.ToString()&#125;</span>"</span>;</span><br></pre></td></tr></table></figure>
<h3 id="”-times-”-vs-”-times-ToString-”"><a href="#”-times-”-vs-”-times-ToString-”" class="headerlink" title="$”{times}” vs $”{times.ToString()}”"></a>$”{times}” vs $”{times.ToString()}”</h3><p>在執行下面程式碼會發現兩段程式碼不管怎麼執行</p>
<p>執行時間<code>$&quot;{times}&quot;;</code>永遠都會比<code>$&quot;{times.ToString()}&quot;;</code>來的多</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">int</span> times = <span class="number">30000000</span>;</span><br><span class="line">        <span class="keyword">string</span> s = <span class="keyword">string</span>.Empty;</span><br><span class="line">        Stopwatch sw = <span class="keyword">new</span> Stopwatch();</span><br><span class="line">        sw.Start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; times ; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            s = <span class="string">$"<span class="subst">&#123;times&#125;</span>"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        sw.Stop();</span><br><span class="line">        Console.WriteLine(sw.ElapsedMilliseconds);</span><br><span class="line"></span><br><span class="line">        sw.Restart();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; times ; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            s = <span class="string">$"<span class="subst">&#123;times.ToString()&#125;</span>"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        sw.Stop();</span><br><span class="line">        Console.WriteLine(sw.ElapsedMilliseconds);</span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>執行時間如上圖</p>
<p><img src="https://i.imgur.com/NzlZgu1.png" alt="img"></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2lzZGFuaWVsL0Jsb2dTYW1wbGUvdHJlZS9tYXN0ZXIvc3JjL1NhbXBsZXMvQm94X1VuQm94aW5n" title="https://github.com/isdaniel/BlogSample/tree/master/src/Samples/Box_UnBoxing">Source Code<i class="fa fa-external-link"></i></span></p>
<p>這是為什麼呢??</p>
<p>原因出在Boxing和UnBoxing上…</p>
<h2 id="Boxing-和-UnBoxing"><a href="#Boxing-和-UnBoxing" class="headerlink" title="Boxing 和 UnBoxing"></a>Boxing 和 UnBoxing</h2><p>在說<code>Boxing</code>和<code>UnBoxing</code>之前</p>
<p>我們要了解.Net中的<code>Refer Type</code>和<code>Value Type</code>在記憶體存放上差別.</p>
<blockquote>
<p>想了解<code>Refer Type</code>和<code>Value Type</code>的人,可以參考我之前寫文章 <a href>【C#】 參考類型 , 值類型 Equals方法 和 ==</a>.</p>
</blockquote>
<p>假如已經了解<code>Refer Type</code>和<code>Value Type</code>,在.Net中有分Stack記憶體區段和Heap記憶體區段.</p>
<ul>
<li>Stack:存放Value Type(struct)資料</li>
<li>Heap:存放Refer Type資料</li>
</ul>
<h3 id="Boxing"><a href="#Boxing" class="headerlink" title="Boxing"></a>Boxing</h3><p>因為在Boxing時我們會把<code>Value Type</code>資料<strong>複製</strong>一份資料到<code>Refer Type</code>記憶體中.</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i=<span class="number">20</span>;</span><br><span class="line"><span class="keyword">object</span> o=(<span class="keyword">object</span>)i;</span><br></pre></td></tr></table></figure>
<p>上面程式碼大概會如下圖操作</p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/%E4%B9%9D%E6%A1%83/62a967a6-4b35-4ca6-a9d1-90318cd12cdc/1556535346_2245.png" alt></p>
<blockquote>
<p>int強制轉型為object 因為我們所有物件都是繼承於object物件</p>
</blockquote>
<h3 id="UnBoxing"><a href="#UnBoxing" class="headerlink" title="UnBoxing"></a>UnBoxing</h3><p>至於<code>UnBoxing</code>動作就如下面程式碼</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i=<span class="number">20</span>;</span><br><span class="line"><span class="keyword">object</span> o=(<span class="keyword">object</span>)i;</span><br><span class="line"><span class="keyword">int</span> j=(<span class="keyword">int</span>)o;</span><br></pre></td></tr></table></figure>
<p><code>UnBoxing</code>會將原本存在Heap的值,會把他搬回Stack並附值給<code>J</code></p>
<p><img src="https://dotblogsfile.blob.core.windows.net/user/%E4%B9%9D%E6%A1%83/62a967a6-4b35-4ca6-a9d1-90318cd12cdc/1556535644_50214.png" alt></p>
<blockquote>
<p><code>o Object</code>強轉成<code>int</code>在這個案例不會有問題，但如果是將<code>o</code>轉為<code>char</code>就會有問題 </p>
</blockquote>
<h2 id="解答-String-Format兩個範例-效能差異"><a href="#解答-String-Format兩個範例-效能差異" class="headerlink" title="(解答)String.Format兩個範例 效能差異"></a>(解答)String.Format兩個範例 效能差異</h2><p>如果有從頭看到尾小夥伴,相信應該可以了解到問什麼會有沒有<code>.ToString</code>會造成差異性了吧.</p>
<p>因為<code>Boxing</code>會造成系統無形中消耗,如果我們先把傳入<code>Value Type</code>資料轉成<code>String</code>再傳入就可以避免<code>Boxing</code>問題.</p>
<p><strong>此文作者</strong>：Daniel Shih(石頭)<br><strong>此文地址</strong>： <a href="https://isdaniel.github.io/stringformat-compare/">https://isdaniel.github.io/stringformat-compare/</a> <br><strong>版權聲明</strong>：本博客所有文章除特別聲明外，均採用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC90dy8=" title="https://creativecommons.org/licenses/by-nc-sa/3.0/tw/">CC BY-NC-SA 3.0 TW<i class="fa fa-external-link"></i></span> 許可協議。轉載請註明出處！</p>
]]></content>
      <categories>
        <category>C#</category>
        <category>Boxing-UnBoxing</category>
      </categories>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>樣板模式(TemplatePattern)</title>
    <url>/template-pattern/</url>
    <content><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>如果目前場景遇到一定流程階段，但流程內容依照邏輯或情境不同也有所不一樣. 這時可以考慮使用樣板模式(TemplatePattern)</p>
<h3 id="生活舉例："><a href="#生活舉例：" class="headerlink" title="生活舉例："></a>生活舉例：</h3><p>因為十二年國教，所以基本上每個人都有上學的經驗</p>
<p>每天上學最少要經歷下面過程(我做一些簡化)</p>
<div class="note note--normal">到學校=&gt;上午上課=&gt;吃午餐=&gt;下午上課=&gt;放學回家</div>

<p>可以看到不管是國小、國中、高中 至少都有上述的過程</p>
<p>但每個過程內容可能會依照年級階段不同，也有所不一樣</p>
<p>例如：</p>
<ul>
<li>吃中餐：高中可能是吃便當，但國小是吃營養午餐，雖然都是吃飯但內容不一樣。</li>
<li>上午上課：都是教數學，但高中教微積分，國小教加減乘除。</li>
</ul>
<div class="note note--normal">重點:流程雖一樣但細部邏輯交由學校去實施實現</div>

<hr>
<h2 id="常見例子："><a href="#常見例子：" class="headerlink" title="常見例子："></a>常見例子：</h2><p>我們常見的測試框架 <code>MSTest,NUnit.....</code> 都有樣板模式的思想。</p>
<p>一般來說測試框架都有<strong>生命週期</strong>，只是每個框架命名不一樣但核心原理差不多</p>
<ol>
<li>SetUpClass (每個測試類別只都執行一次)</li>
<li>SetUpUnitTest (每次執行測試方法時都執行一次)</li>
<li>UnitTest (執行測試方法)</li>
</ol>
<p><strong>如下圖</strong></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9jYW1vLmdpdGh1YnVzZXJjb250ZW50LmNvbS82ODU4ODljMGViNjllZTdlMTMwNzI0NzZmZTg2OGE2NTNlMzIwOTBiLzY4NzQ3NDcwNzMzYTJmMmY3Nzc3NzcyZTYzNmY2NDY1NzA3MjZmNmE2NTYzNzQyZTYzNmY2ZDJmNGI0MjJmNjM3MzJmNjE3NTc0NzAzMTJmNzQ2NTczNzQ1Mzc1Njk3NDY1NDY2YzZmNzcyZTZhNzA2Nw==" title="https://camo.githubusercontent.com/685889c0eb69ee7e13072476fe868a653e32090b/68747470733a2f2f7777772e636f646570726f6a6563742e636f6d2f4b422f63732f61757470312f746573745375697465466c6f772e6a7067"><img src="https://camo.githubusercontent.com/685889c0eb69ee7e13072476fe868a653e32090b/68747470733a2f2f7777772e636f646570726f6a6563742e636f6d2f4b422f63732f61757470312f746573745375697465466c6f772e6a7067" alt="Alt text" title="Optional title"><i class="fa fa-external-link"></i></span></p>
<p>(圖片來自網路上)</p>
<hr>
<h3 id="程式碼範例："><a href="#程式碼範例：" class="headerlink" title="程式碼範例："></a>程式碼範例：</h3><p>此範例使用Console來模擬單元測試框架流程：</p>
<p>建立一個 <code>UnitFlowBase</code> 抽像類別依照<code>Nunit</code>生命週期來實現下面方法.</p>
<ol>
<li><code>OneTimeSetUp</code> (每個測試類別只都執行一次)</li>
<li><code>Dispose</code> (每次執行測試方法時都執行一次)</li>
<li><code>SetUp</code> 每次執行<code>TestCase</code>前資料初始化</li>
<li><code>TearDown</code> 每次執行<code>TestCase</code>後釋放資源</li>
</ol>
<p>此抽象類別提供幾個Hock讓子類實做細節。 <code>UnitFlowBase</code>只提供框架</p>
<p><code>UnitTest</code>對外提供一個<code>void UnitTest(IEnumerable&lt;Func&lt;bool&gt;&gt; testCases)</code>方法.</p>
<blockquote>
<p>可以傳入要驗證動作一個<code>IEnumerable&lt;Func&lt;bool&gt;&gt;</code>型別.</p>
</blockquote>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">UnitFlowBase</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OneTimeSetUp</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Dispose</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">SetUp</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">TearDown</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">UnitTest</span>(<span class="params">IEnumerable&lt;Func&lt;<span class="keyword">bool</span>&gt;&gt; testCases</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        OneTimeSetUp();</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> testCase <span class="keyword">in</span> testCases)</span><br><span class="line">        &#123;</span><br><span class="line">            SetUp();</span><br><span class="line">            Console.WriteLine(testCase() ? <span class="string">"Assert Successful."</span> : <span class="string">"Assert Fail."</span>);</span><br><span class="line">            TearDown();</span><br><span class="line">        &#125;</span><br><span class="line">        Dispose();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>建立另一個類別<code>UnitCounter</code>重載<code>SetUp</code>,<code>OneTimeSetUp</code>方法.</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UnitCounter</span> : <span class="title">UnitFlowBase</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">SetUp</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">"Set up UnitCounter thing."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OneTimeSetUp</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">"OneTimeSetUp!!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>呼叫實我們建立一個<code>UnitCounter</code>類別,並傳入一個<code>IEnumerable&lt;Func&lt;bool&gt;&gt;</code>的資料集合</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        </span><br><span class="line">        UnitCounter unitCounter = <span class="keyword">new</span> UnitCounter();</span><br><span class="line">        unitCounter.UnitTest(<span class="keyword">new</span> List&lt;Func&lt;<span class="keyword">bool</span>&gt;&gt;()</span><br><span class="line">        &#123;</span><br><span class="line">            ()=&gt;<span class="literal">true</span>,</span><br><span class="line">            ()=&gt;<span class="literal">false</span>,</span><br><span class="line">            ()=&gt;<span class="literal">false</span>,</span><br><span class="line">            ()=&gt;<span class="literal">true</span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="實際案例"><a href="#實際案例" class="headerlink" title="實際案例"></a>實際案例</h2><p>在我一個開源專案中<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2lzZGFuaWVsL0VsZWN0cm9uaWNJbnZvaWNlX1RX" title="https://github.com/isdaniel/ElectronicInvoice_TW">ElectronicInvoice_TW<i class="fa fa-external-link"></i></span>,有使用到<code>Template Method Pattern</code></p>
<p>因為在大平台傳送資料有些固定的流程,這個就很適合使用此Pattern.</p>
<ol>
<li>參數需要按照字首排序.</li>
<li>參數製作簽章防偽造.</li>
<li>利用Http類別請求大平台.</li>
</ol>
<p>對於每個API來說有一個變化是傳入參數,所以我就把它當作是此系列類別需要<code>override</code>方法.</p>
<p>而在<code>ApiBase.cs</code>是所有大平台API的<code>Base</code>類別在裡面有一個<code>string ExecuteApi(TModel mode)</code>方法提供給外部呼叫.</p>
<p>詳細資料可自行參閱我的原始碼.</p>
<hr>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結:"></a>小結:</h2><p>日後測試程式只需關注我們需要如何實現邏輯細解（重寫三個方法），核心流程順序就交由<code>UnitFlowBase</code>決定。</p>
<p><strong>此文作者</strong>：Daniel Shih(石頭)<br><strong>此文地址</strong>： <a href="https://isdaniel.github.io/template-pattern/">https://isdaniel.github.io/template-pattern/</a> <br><strong>版權聲明</strong>：本博客所有文章除特別聲明外，均採用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC90dy8=" title="https://creativecommons.org/licenses/by-nc-sa/3.0/tw/">CC BY-NC-SA 3.0 TW<i class="fa fa-external-link"></i></span> 許可協議。轉載請註明出處！</p>
]]></content>
      <categories>
        <category>C#</category>
        <category>DesignPattern</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>DesignPattern</tag>
        <tag>TemplatePattern</tag>
      </tags>
  </entry>
  <entry>
    <title>多執行緒系統中不得不知-volatile</title>
    <url>/volatile-introduce/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>假如你寫過多執行緒系統一定會看過<code>volatile</code>，但你對他的了解有多少？</p>
<p>MSDN對於<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vemgtdHcvZG90bmV0L2NzaGFycC9sYW5ndWFnZS1yZWZlcmVuY2Uva2V5d29yZHMvdm9sYXRpbGU=" title="https://docs.microsoft.com/zh-tw/dotnet/csharp/language-reference/keywords/volatile">volatile<i class="fa fa-external-link"></i></span>關鍵字解釋如下.</p>
<blockquote>
<p>volatile 關鍵字指出某個欄位可能是由同時執行的多個執行緒所修改。 編譯器、執行階段系統，甚至硬體都有可能基於效能因素，而重新排列對記憶體位置的讀取和寫入。 宣告為 volatile 的欄位不受限於這些最佳化考量。 加入 volatile 修飾詞可確保所有的執行緒都會依執行寫入的順序，觀察任何其他執行緒所執行的暫時性寫入。</p>
</blockquote>
<p>MSDN上寫一堆文謅謅的解釋，如果沒有相對應OS或底層概念會很難理解上面敘述</p>
<h2 id="volatile-三大特性"><a href="#volatile-三大特性" class="headerlink" title="volatile 三大特性"></a>volatile 三大特性</h2><p>這裡我先總結<code>volatile</code>三大特性</p>
<ol>
<li><code>volatile</code>修飾的變數具有<strong>可見性</strong></li>
<li><code>volatile</code>避免指令優化重排</li>
<li><code>volatile</code><strong>不保證Atomic</strong></li>
</ol>
<p>本文會針對這三大特性來一一解釋</p>
<blockquote>
<p>注意在執行本文程式碼時要把Build Mode改成Release.</p>
</blockquote>
<h2 id="volatile令變數具有可見性-amp-volatile避免指令優化重排"><a href="#volatile令變數具有可見性-amp-volatile避免指令優化重排" class="headerlink" title="volatile令變數具有可見性 &amp; volatile避免指令優化重排"></a>volatile令變數具有可見性 &amp; volatile避免指令優化重排</h2><p>下面有段程式碼.</p>
<p>有一個<code>member</code>物件初始數值<code>Balance=100</code>，建立一個Thread裡面會把<code>member</code>物件的餘額成0</p>
<p>在Main Thread中<code>while (member.balance &gt; 0)</code>有一段程式會等待<code>member.balance=0</code>跳出迴圈.</p>
<p>預期在程式最後印出<code>執行結束!</code></p>
<p>但如果您使用Release Mode來跑會發現</p>
<p><img src="https://i.imgur.com/1nZBMSC.png" alt></p>
<p>最後一行<code>執行結束!</code>不會如預期印出來..</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        </span><br><span class="line">        Member member = <span class="keyword">new</span> Member();</span><br><span class="line">        <span class="keyword">new</span> Thread(()=&gt;&#123;</span><br><span class="line">            </span><br><span class="line">            System.Console.WriteLine(<span class="string">$"Sleep 前~ 餘額剩下:<span class="subst">&#123;member.balance&#125;</span>"</span>);</span><br><span class="line">            member.UpdateBalance();</span><br><span class="line">            System.Console.WriteLine(<span class="string">$"Sleep 結束! 餘額剩下:<span class="subst">&#123;member.balance&#125;</span>"</span>);</span><br><span class="line">        &#125;).Start();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (member.balance &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//等待sub thread把balance改成0跳出迴圈</span></span><br><span class="line">        &#125;   </span><br><span class="line"></span><br><span class="line">        Thread.Sleep(<span class="number">50</span>);</span><br><span class="line">        Console.WriteLine(<span class="string">"執行結束!"</span>);</span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Member</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> balance = <span class="number">100</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">UpdateBalance</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        balance = <span class="number">0</span>;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="解釋volatile可見性-amp-指令優化重排"><a href="#解釋volatile可見性-amp-指令優化重排" class="headerlink" title="解釋volatile可見性 &amp; 指令優化重排"></a>解釋volatile可見性 &amp; 指令優化重排</h3><p>每個Thread對於變數操作，會先把Memory記憶體中的變數Copy一份到記憶體中並執行操作，操作完畢再重新寫入Memory中.</p>
<p>概念大致如下圖</p>
<p><img src="https://i.imgur.com/zXprOIe.png" alt></p>
<p>所以這就會導致一個問題，假如ThreadA對於變數做異動，但ThreadB不會被通知</p>
<p>一般來說Release Mode，會把程式語言優化(包含一些CPU指令)，所以在multiple-Thread 系統中可能就會遇到一些不預期問題(如此範例)</p>
<p>所以依照上面特性我來總結解釋一下</p>
<ul>
<li>一開始Main Thread跟sub Thread在取得Balance都是100</li>
<li>sub Thread更新餘額成為0，但Main Thread沒有更新(還是100)</li>
<li>Main Thread進入無限迴圈導致出不來.</li>
</ul>
<h3 id="使用-volatile-解決問題"><a href="#使用-volatile-解決問題" class="headerlink" title="使用 volatile 解決問題"></a>使用 volatile 解決問題</h3><p>解決上面問題我們只需要在<code>balance</code>上加一個<code>volatile</code>就好!</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Member</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">volatile</span> <span class="keyword">int</span> balance = <span class="number">100</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">UpdateBalance</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="comment">// sub thread update balance to 0</span></span><br><span class="line">        balance = <span class="number">0</span>;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://i.imgur.com/RaSL8k4.png" alt></p>
<p>執行結果如上，能看到程式可以正常結束了</p>
<p>還記得我一開始的總結前兩條嗎</p>
<ol>
<li><code>volatile</code>修飾的變數具有<strong>可見性</strong></li>
<li><code>volatile</code>避免指令優化重排</li>
</ol>
<p>使用<code>volatile</code>會告訴編譯器別嘗試優化，使用此變數程式碼，無論是讀取還是寫入，都在主記憶體操作。</p>
<p>所以當呼叫<code>UpdateBalance</code>(<code>balance = 0;</code>) 方法時此異動在Main Thread就會看到Memory <code>balance = 0</code>所以就跳出迴圈.</p>
<h2 id="volatile-不保證Atomic"><a href="#volatile-不保證Atomic" class="headerlink" title="volatile 不保證Atomic"></a>volatile 不保證Atomic</h2><p>雖然volatile讓變數具有可見性，但不保證Atomic（原子性），這是甚麼意思？</p>
<p>我一樣用下圖來解釋來解釋.</p>
<p><img src="https://i.imgur.com/zXprOIe.png" alt></p>
<p>在每個Thread要異動變數都會將數值Copy進Thread中進行修改在異動,就算目前有可見性,但我們不能保證修改指令具有原子性</p>
<p>所以可能造成兩個Thread剛好對於一個數值或物件異動造成Data Racing.</p>
<blockquote>
<p>如果要解決此問題可以參閱 <a href="https://isdaniel.github.io/high-concurrency-atomic-cas-algorithm/">高併發系統系列-使用lock &amp; Interlocked CAS(compare and swap)</a></p>
</blockquote>
<p>下面的範例來演示我說的問題</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        </span><br><span class="line">        NoAtomicMember m = <span class="keyword">new</span> NoAtomicMember();</span><br><span class="line">        List&lt;Task&gt; tasks = <span class="keyword">new</span> List&lt;Task&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            tasks.Add(Task.Run(()=&gt;&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    m.AddBalance();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;));</span><br><span class="line">        &#125;</span><br><span class="line">        Task.WaitAll(tasks.ToArray());</span><br><span class="line"></span><br><span class="line">        System.Console.WriteLine(m.balance);</span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">NoAtomicMember</span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">volatile</span> <span class="keyword">int</span> balance = <span class="number">0</span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddBalance</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            balance+=<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://i.imgur.com/pUqN5ii.png" alt></p>
<p>我這個例子使用10個Task來模擬高併發動作,對於同一個數值做新增餘額10000次</p>
<p>理論上我們預期Balance要是10w，但每次執行的結果都不是10w且數值都不一樣，這個問題在正式環境很嚴重.</p>
<p>我們可以使用lock來避免同一時間會有多個Thread對於同一個物件修改</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">NoAtomicMember</span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> balance = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">object</span> _sync = <span class="keyword">new</span> <span class="keyword">object</span>();</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddBalance</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">lock</span>(_sync)&#123;</span><br><span class="line">                balance+=<span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>修改後結果如下</p>
<p><img src="https://i.imgur.com/fszxx6X.png" alt></p>
<h2 id="區域變數或參考型別使用volatile"><a href="#區域變數或參考型別使用volatile" class="headerlink" title="區域變數或參考型別使用volatile"></a>區域變數或參考型別使用volatile</h2><p>如果是區域變數或參考型別<code>volatile</code>關鍵字就無法使用,這時候我們可以使用下面兩個method來替代使用.</p>
<ul>
<li><code>Thread.VolatileRead</code></li>
<li><code>Thread.VolatileWrite</code></li>
</ul>
<p>下面是<code>VolatileRead</code>,<code>VolatileWrite</code>原始碼</p>
<p>能發現在裡面都有呼叫<code>MemoryBarrier</code>方法.</p>
<blockquote>
<p><code>MemoryBarrier</code>保證我們程式可見性，概念跟volatile一樣清除cache直接讀取主要Memory資料.</p>
</blockquote>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">VolatileRead</span>(<span class="params"><span class="keyword">ref</span> Object address</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Object ret = address;</span><br><span class="line">    <span class="comment">//呼叫組語load 禁止指令重排  從Memory拿到最新資料</span></span><br><span class="line">    MemoryBarrier(); <span class="comment">// Call MemoryBarrier to ensure the proper semantic in a portable way.</span></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">VolatileWrite</span>(<span class="params"><span class="keyword">ref</span> Object address, Object <span class="keyword">value</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//呼叫組語store 禁止指令重排</span></span><br><span class="line">    MemoryBarrier(); <span class="comment">// Call MemoryBarrier to ensure the proper semantic in a portable way.</span></span><br><span class="line">    address = <span class="keyword">value</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>在多執行緒系統中我建議常異動的變數要使用<code>volatile</code>來保證每個Thread讀,寫資料是正確</p>
<p><img src="https://i.imgur.com/lMx2FJI.png" alt></p>
<p>發現在我們常用的Console類別,運用許多<code>volatile</code>來達到Thread互相資料可見性.</p>
<p>但也要注意<code>volatile</code><strong>不保證Atomic</strong>，所以如果有Atomic需求記得要使用CAS或Lock來處理.</p>
<p>另外<code>volatile</code>也不是萬靈丹,既然可以提高可見性想必對於系統會有多一些負擔,所以還是要看情況來使用.</p>
<p><strong>此文作者</strong>：Daniel Shih(石頭)<br><strong>此文地址</strong>： <a href="https://isdaniel.github.io/volatile-introduce/">https://isdaniel.github.io/volatile-introduce/</a> <br><strong>版權聲明</strong>：本博客所有文章除特別聲明外，均採用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC90dy8=" title="https://creativecommons.org/licenses/by-nc-sa/3.0/tw/">CC BY-NC-SA 3.0 TW<i class="fa fa-external-link"></i></span> 許可協議。轉載請註明出處！</p>
]]></content>
      <categories>
        <category>C#</category>
        <category>volatile</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>volatile</tag>
      </tags>
  </entry>
  <entry>
    <title>串接 Restcountries By Vue.js</title>
    <url>/vue-first-Restcountries/</url>
    <content><![CDATA[<h2 id="前文"><a href="#前文" class="headerlink" title="前文"></a>前文</h2><p>最近面試有一間公司要求使用<span class="exturl" data-url="aHR0cHM6Ly9yZXN0Y291bnRyaWVzLmV1Lw==" title="https://restcountries.eu/">Restcountries API<i class="fa fa-external-link"></i></span>使用CRUD前端Html串接API，有看我文章的夥伴應該知道我大多是研究後端或CI/CD相關技術，對於前端技術較少研究，這次我打算使用vue.js來完成此次需求.</p>
<p>需求如下</p>
<ol>
<li>分頁</li>
<li>顯示國家相關資訊</li>
<li>排序效果</li>
<li>點選國家名稱進入Detail頁面</li>
</ol>
<p>因為以上幾點都是CRUD相關操作，關於CRUD相關操作使用三大框架就很適合(所以我選擇使用Vue)</p>
<p>話不多說先給大家看看成品 <a href="https://isdaniel.github.io/RestcountriesSample/">RestcountriesSample</a></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2lzZGFuaWVsL1Jlc3Rjb3VudHJpZXNTYW1wbGU=" title="https://github.com/isdaniel/RestcountriesSample">Source Code<i class="fa fa-external-link"></i></span></p>
<h2 id="要使用的API介紹"><a href="#要使用的API介紹" class="headerlink" title="要使用的API介紹"></a>要使用的API介紹</h2><p>雖然官網對於API介紹雖少，但我相信只要有常串API的人應該可以很快猜出每個API作用.</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9yZXN0Y291bnRyaWVzLmV1L3Jlc3QvdjIvYWxs" title="https://restcountries.eu/rest/v2/all">All<i class="fa fa-external-link"></i></span>:請求所有國家資訊</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9yZXN0Y291bnRyaWVzLmV1L3Jlc3QvdjIvbmFtZS9hcnViYT9mdWxsVGV4dD10cnVl" title="https://restcountries.eu/rest/v2/name/aruba?fullText=true">FULL NAME<i class="fa fa-external-link"></i></span>:查找國家By名子.</li>
</ul>
<blockquote>
<p>而且我發現大部分API都可以用GET來請求.</p>
</blockquote>
<p>只要用這兩個就可以完成我們的需求</p>
<h2 id="Code解說與問題分析"><a href="#Code解說與問題分析" class="headerlink" title="Code解說與問題分析"></a>Code解說與問題分析</h2><p>一開始我在分析問題是要找尋合適的API後面經過塞選挑出上面兩個API.</p>
<p>接下來我就考慮把畫面用Table + 分頁方式呈現,而Detail Page利用Query String方式傳Country Name來看明細資料.</p>
<p>我用Pure前端串接API，所以我建立兩個Html頁面</p>
<ul>
<li>一個是Master Page</li>
<li>一個是Detail Page</li>
</ul>
<h3 id="Master-page"><a href="#Master-page" class="headerlink" title="Master page"></a>Master page</h3><p><img src="https://i.imgur.com/Sj52iBe.png" alt></p>
<p>在Javascript code我主要介紹流程</p>
<p>主要在一開始頁面建立時去Load <span class="exturl" data-url="aHR0cHM6Ly9yZXN0Y291bnRyaWVzLmV1L3Jlc3QvdjIvYWxs" title="https://restcountries.eu/rest/v2/all">All<i class="fa fa-external-link"></i></span> 資料並把資料binding在<code>rows</code>陣列物件</p>
<p><code>orderBy</code>方法，提供一個排序實現這邊可以讓Page呼叫時傳入要排的欄位名稱就可以不用HardCode(使用類似<code>@click=&quot;orderBy(&#39;name&#39;),ASC *= -1&quot;</code>)傳入Name就可以對於Name來排序，提高程式碼可用性</p>
<p>因為API請求有時候會比較久，所以我這邊使用<span class="exturl" data-url="aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvdnVlLWxvYWRpbmctb3ZlcmxheQ==" title="https://www.npmjs.com/package/vue-loading-overlay">vue-loading-overlay<i class="fa fa-external-link"></i></span>來當Loading Page(有興趣的可以在查閱此連結的API)</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"vld-parent"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">loading</span> <span class="attr">:active.sync</span>=<span class="string">"isLoading"</span> <span class="attr">:is-full-page</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">loading</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>Search Country Name:<span class="tag">&lt;/<span class="name">b</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"countryName"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"filteredRows.length === 0"</span>&gt;</span>No Data Display!!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">v-if</span>=<span class="string">"filteredRows.length &gt; 0"</span> <span class="attr">class</span>=<span class="string">"table table-condensed"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>國旗<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span> @<span class="attr">click</span>=<span class="string">"orderBy('name'),ASC *= -1"</span>&gt;</span>國家名稱</span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon"</span> <span class="attr">:class</span>=<span class="string">"&#123;'Reverse':ASC==1&#125;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-angle-up"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>2位國家代碼<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>3位國家代碼<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>母語名稱<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>替代國家名稱<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>國際電話區號<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">"item in filteredRows.slice(pageStart, pageStart + pageSize)"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">item.flag</span> <span class="attr">style</span>=<span class="string">'height:150px'</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">:href</span>=<span class="string">"'./CountryModel.html?countryName=' + item.name"</span>&gt;</span></span><br><span class="line">        &#123;&#123; item.name &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; item.alpha2Code &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; item.alpha3Code &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; item.nativeName &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; item.altSpellings[0] &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; item.callingCodes[0] &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pagination"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-bind:class</span>=<span class="string">"&#123;'disabled': (currPage === 1)&#125;"</span> @<span class="attr">click.prevent</span>=<span class="string">"setPage(currPage-1)"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Prev<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"n in totalPage"</span> <span class="attr">v-bind:class</span>=<span class="string">"&#123;'active': (currPage === (n))&#125;"</span> @<span class="attr">click.prevent</span>=<span class="string">"setPage(n)"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span></span></span><br><span class="line"><span class="tag">        <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>&#123;&#123;n&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-bind:class</span>=<span class="string">"&#123;'disabled': (currPage === totalPage || totalPage === 0)&#125;"</span></span></span><br><span class="line"><span class="tag">        @<span class="attr">click.prevent</span>=<span class="string">"setPage(currPage+1)"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Next<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      rows: [],</span><br><span class="line">      pageSize: <span class="number">25</span>,</span><br><span class="line">      currPage: <span class="number">1</span>,</span><br><span class="line">      countryName: <span class="string">''</span>,</span><br><span class="line">      ASC: <span class="number">1</span>,</span><br><span class="line">      isLoading: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line">      filteredRows: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">return</span> self.rows.filter(<span class="function"><span class="params">x</span>=&gt;</span> !self.countryName || x.name.search(self.countryName) != <span class="number">-1</span>);</span><br><span class="line">      &#125;,</span><br><span class="line">      pageStart: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">this</span>.currPage - <span class="number">1</span>) * <span class="keyword">this</span>.pageSize;</span><br><span class="line">      &#125;,</span><br><span class="line">      totalPage: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Math</span>.ceil(<span class="keyword">this</span>.filteredRows.length / <span class="keyword">this</span>.pageSize);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      setPage: <span class="function"><span class="keyword">function</span> (<span class="params">index</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt;= <span class="number">0</span> || index &gt; <span class="keyword">this</span>.totalPage) &#123;</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.currPage = index;</span><br><span class="line">      &#125;,</span><br><span class="line">      orderBy: <span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">return</span> self.rows.sort(<span class="function"><span class="keyword">function</span> (<span class="params">obj1, obj2</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">var</span> obj1 = obj1[item]</span><br><span class="line">          <span class="keyword">var</span> obj2 = obj2[item]</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (obj1 === obj2)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">          <span class="keyword">else</span> <span class="keyword">if</span> (obj1 &gt; obj2)</span><br><span class="line">            <span class="keyword">return</span> self.ASC;</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> self.ASC * <span class="number">-1</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">      $.<span class="keyword">get</span>('https://restcountries.eu/rest/v2/all', function (data) &#123;</span><br><span class="line">        self.rows = data;</span><br><span class="line">        self.isLoading = <span class="literal">false</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    watch:&#123;</span><br><span class="line">      countryName:<span class="function"><span class="keyword">function</span>(<span class="params">newValue</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.currPage = <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div>
<h3 id="Detail-Page"><a href="#Detail-Page" class="headerlink" title="Detail Page"></a>Detail Page</h3><p><img src="https://i.imgur.com/PLnxUIn.png" alt></p>
<p>Detail我使用<span class="exturl" data-url="aHR0cHM6Ly9yZXN0Y291bnRyaWVzLmV1L3Jlc3QvdjIvbmFtZS9hcnViYT9mdWxsVGV4dD10cnVl" title="https://restcountries.eu/rest/v2/name/aruba?fullText=true">FULL NAME<i class="fa fa-external-link"></i></span>來查找我要的國家明細</p>
<p>Detail Html畫面，我就不多說可以看原始碼</p>
<p>因為我在設計時想要使用QueryString來傳送CountryName，所以我利用<code>URLSearchParams</code>來取得QueryString <code>countryName</code>資料並使用Ajax查詢API</p>
<p>如果查不到資料或使用者傳送一個不存在的資訊，我就會顯示<code>No Data Display!!</code></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      vm: &#123;&#125;,</span><br><span class="line">      isLoading : <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">      <span class="keyword">let</span> urlParams = <span class="keyword">new</span> URLSearchParams(<span class="built_in">window</span>.location.search);</span><br><span class="line">      <span class="keyword">var</span> countryName = urlParams.has(<span class="string">'countryName'</span>) ? urlParams.get(<span class="string">'countryName'</span>) : <span class="string">''</span>;</span><br><span class="line">      <span class="keyword">var</span> url = <span class="string">'https://restcountries.eu/rest/v2/name/'</span>+<span class="built_in">encodeURI</span>(countryName)+<span class="string">'?fullText=true'</span></span><br><span class="line">      $.<span class="keyword">get</span>(url, function (data) &#123;</span><br><span class="line">        self.vm = data[<span class="number">0</span>];</span><br><span class="line">        self.isLoading = <span class="literal">false</span>;</span><br><span class="line">      &#125;).fail(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">document</span>.write(<span class="string">'No Data Display!!'</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></div>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>這次題目我前後大約花半天就把東西從無到有完成，個人覺得還算蠻順利的，但我寫的Front Code可能不太標準(因為我很少寫Js XDD)</p>
<p>如果有寫得不好的地方在歡迎指教</p>
<p>不得不說我覺得Vuejs寫起來真的蠻直覺，而且很多資源可以查閱學習來相對蠻容易的</p>
<p>相是Loading Page就有很多不同的樣式可以挑選.</p>
<p><strong>此文作者</strong>：Daniel Shih(石頭)<br><strong>此文地址</strong>： <a href="https://isdaniel.github.io/vue-first-Restcountries/">https://isdaniel.github.io/vue-first-Restcountries/</a> <br><strong>版權聲明</strong>：本博客所有文章除特別聲明外，均採用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzMuMC90dy8=" title="https://creativecommons.org/licenses/by-nc-sa/3.0/tw/">CC BY-NC-SA 3.0 TW<i class="fa fa-external-link"></i></span> 許可協議。轉載請註明出處！</p>
]]></content>
      <categories>
        <category>javascript</category>
        <category>vue.js</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>vue.js</tag>
        <tag>Restcountries</tag>
      </tags>
  </entry>
</search>
